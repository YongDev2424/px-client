// src/stores/deletionState.ts

import { createStore } from 'zustand/vanilla';
import { Container, Application } from 'pixi.js';
import type { SelectableElement } from './selectionState';

/**
 * Deletion Record ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tracking ‡∏Å‡∏≤‡∏£‡∏•‡∏ö
 */
export interface DeletionRecord {
  nodeId: string;
  elementType: 'node' | 'edge';
  timestamp: number;
  success: boolean;
  error?: string;
}

/**
 * Deletion State Store Interface
 * ‡πÉ‡∏ä‡πâ Function-based architecture ‡∏î‡πâ‡∏ß‡∏¢ Zustand
 */
interface DeletionStateStore {
  // State
  deletingElements: Map<string, boolean>;
  deletionHistory: DeletionRecord[];
  
  // Actions - Element Deletion
  deleteNode: (element: SelectableElement) => Promise<boolean>;
  deleteEdge: (element: SelectableElement) => Promise<boolean>;
  deleteElement: (element: SelectableElement) => Promise<boolean>; // Generic method
  
  // Actions - State Management
  markAsDeleting: (nodeId: string) => void;
  unmarkAsDeleting: (nodeId: string) => void;
  addDeletionRecord: (record: DeletionRecord) => void;
  
  // Actions - Utilities
  isDeleting: (nodeId: string) => boolean;
  getDeletionHistory: () => DeletionRecord[];
  clearHistory: () => void;
  destroy: () => void;
}

/**
 * Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á deletion record
 */
function createDeletionRecord(
  element: SelectableElement,
  success: boolean,
  error?: string
): DeletionRecord {
  return {
    nodeId: element.nodeId,
    elementType: element.type,
    timestamp: Date.now(),
    success,
    error
  };
}

/**
 * Zustand store ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Element Deletion
 * ‡πÉ‡∏ä‡πâ Function-based pattern ‡∏ï‡∏≤‡∏° architecture ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
 */
export const useDeletionState = createStore<DeletionStateStore>((set, get) => ({
  // Initial State
  deletingElements: new Map(),
  deletionHistory: [],

  // === Element Deletion Actions ===
  deleteNode: async (element: SelectableElement): Promise<boolean> => {
    const { markAsDeleting, unmarkAsDeleting, addDeletionRecord } = get();
    
    console.log('üóëÔ∏è Starting node deletion:', element.nodeId);
    markAsDeleting(element.nodeId);
    
    try {
      // Import deletion utilities dynamically
      const { deleteNodeElement } = await import('../utils/elementDeletion');
      
      // ‡∏™‡πà‡∏á event ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
      const startEvent = new CustomEvent('element-deletion-started', {
        detail: { element, elementType: 'node' }
      });
      window.dispatchEvent(startEvent);
      
      // ‡∏•‡∏ö node element
      const success = await deleteNodeElement(element);
      
      if (success) {
        console.log('‚úÖ Node deletion successful:', element.nodeId);
        
        // ‡∏™‡πà‡∏á event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        const completedEvent = new CustomEvent('element-deletion-completed', {
          detail: { element, elementType: 'node' }
        });
        window.dispatchEvent(completedEvent);
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        addDeletionRecord(createDeletionRecord(element, true));
      } else {
        throw new Error('Node deletion failed');
      }
      
      return success;
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      console.error('‚ùå Node deletion failed:', element.nodeId, errorMessage);
      
      // ‡∏™‡πà‡∏á event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      const failedEvent = new CustomEvent('element-deletion-failed', {
        detail: { element, elementType: 'node', error: errorMessage }
      });
      window.dispatchEvent(failedEvent);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
      addDeletionRecord(createDeletionRecord(element, false, errorMessage));
      
      return false;
      
    } finally {
      unmarkAsDeleting(element.nodeId);
    }
  },

  deleteEdge: async (element: SelectableElement): Promise<boolean> => {
    const { markAsDeleting, unmarkAsDeleting, addDeletionRecord } = get();
    
    console.log('üóëÔ∏è Starting edge deletion:', element.nodeId);
    markAsDeleting(element.nodeId);
    
    try {
      // Import deletion utilities dynamically
      const { deleteEdgeElement } = await import('../utils/elementDeletion');
      
      // ‡∏™‡πà‡∏á event ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
      const startEvent = new CustomEvent('element-deletion-started', {
        detail: { element, elementType: 'edge' }
      });
      window.dispatchEvent(startEvent);
      
      // ‡∏•‡∏ö edge element
      const success = await deleteEdgeElement(element);
      
      if (success) {
        console.log('‚úÖ Edge deletion successful:', element.nodeId);
        
        // ‡∏™‡πà‡∏á event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        const completedEvent = new CustomEvent('element-deletion-completed', {
          detail: { element, elementType: 'edge' }
        });
        window.dispatchEvent(completedEvent);
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        addDeletionRecord(createDeletionRecord(element, true));
      } else {
        throw new Error('Edge deletion failed');
      }
      
      return success;
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      console.error('‚ùå Edge deletion failed:', element.nodeId, errorMessage);
      
      // ‡∏™‡πà‡∏á event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      const failedEvent = new CustomEvent('element-deletion-failed', {
        detail: { element, elementType: 'edge', error: errorMessage }
      });
      window.dispatchEvent(failedEvent);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
      addDeletionRecord(createDeletionRecord(element, false, errorMessage));
      
      return false;
      
    } finally {
      unmarkAsDeleting(element.nodeId);
    }
  },

  deleteElement: async (element: SelectableElement): Promise<boolean> => {
    const { deleteNode, deleteEdge } = get();
    
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ method ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á element
    if (element.type === 'node') {
      return await deleteNode(element);
    } else if (element.type === 'edge') {
      return await deleteEdge(element);
    } else {
      console.error('‚ùå Unknown element type:', element.type);
      return false;
    }
  },

  // === State Management Actions ===
  markAsDeleting: (nodeId: string) => {
    set((state) => {
      const newDeletingElements = new Map(state.deletingElements);
      newDeletingElements.set(nodeId, true);
      return { deletingElements: newDeletingElements };
    });
    
    console.log('‚è≥ Marked as deleting:', nodeId);
  },

  unmarkAsDeleting: (nodeId: string) => {
    set((state) => {
      const newDeletingElements = new Map(state.deletingElements);
      newDeletingElements.delete(nodeId);
      return { deletingElements: newDeletingElements };
    });
    
    console.log('‚úÖ Unmarked as deleting:', nodeId);
  },

  addDeletionRecord: (record: DeletionRecord) => {
    set((state) => ({
      deletionHistory: [...state.deletionHistory, record]
    }));
    
    console.log('üìù Added deletion record:', record);
  },

  // === Utility Actions ===
  isDeleting: (nodeId: string): boolean => {
    const { deletingElements } = get();
    return deletingElements.has(nodeId);
  },

  getDeletionHistory: (): DeletionRecord[] => {
    const { deletionHistory } = get();
    return [...deletionHistory]; // Return copy to prevent mutation
  },

  clearHistory: () => {
    set({ deletionHistory: [] });
    console.log('üßπ Deletion history cleared');
  },

  destroy: () => {
    console.log('üóëÔ∏è Destroying deletion state store');
    
    set({
      deletingElements: new Map(),
      deletionHistory: []
    });
  }
}));

/**
 * Compatibility wrapper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏° (Backward compatibility)
 * ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ manager pattern ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
 */
export const deletionManager = {
  deleteElement: (element: SelectableElement): Promise<boolean> => {
    return useDeletionState.getState().deleteElement(element);
  },
  
  deleteNode: (element: SelectableElement): Promise<boolean> => {
    return useDeletionState.getState().deleteNode(element);
  },
  
  deleteEdge: (element: SelectableElement): Promise<boolean> => {
    return useDeletionState.getState().deleteEdge(element);
  },
  
  isDeleting: (nodeId: string): boolean => {
    return useDeletionState.getState().isDeleting(nodeId);
  },
  
  getDeletionHistory: (): DeletionRecord[] => {
    return useDeletionState.getState().getDeletionHistory();
  },
  
  clearHistory: (): void => {
    useDeletionState.getState().clearHistory();
  }
};

/**
 * Export types ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
 */
export type { DeletionStateStore };