// src/composables/useDeletionActions.ts

import type { SelectableElement } from '../stores/selectionState';
import type { DeletionRecord } from '../stores/deletionState';

/**
 * Composable ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Element Deletion
 * ‡πÉ‡∏ä‡πâ Function-based architecture ‡∏û‡∏£‡πâ‡∏≠‡∏° React Hook patterns
 */

/**
 * Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö Elements
 * ‡∏£‡∏ß‡∏° actions ‡πÅ‡∏•‡∏∞ utilities ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
 */
export function useDeletionActions() {
  
  /**
   * ‡∏•‡∏ö Element ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Deletion Store
   * @param element - Element ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
   * @returns Promise<boolean> - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏ö
   */
  async function deleteElement(element: SelectableElement): Promise<boolean> {
    try {
      const { useDeletionState } = await import('../stores/deletionState');
      const deletionState = useDeletionState.getState();
      
      console.log('üóëÔ∏è Initiating element deletion via composable:', element.nodeId);
      return await deletionState.deleteElement(element);
      
    } catch (error) {
      console.error('‚ùå Deletion composable error:', error);
      return false;
    }
  }

  /**
   * ‡∏•‡∏ö Node Element ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
   * @param element - Node Element ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
   * @returns Promise<boolean> - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏ö
   */
  async function deleteNode(element: SelectableElement): Promise<boolean> {
    if (element.type !== 'node') {
      console.warn('‚ö†Ô∏è Element is not a node type');
      return false;
    }

    try {
      const { useDeletionState } = await import('../stores/deletionState');
      const deletionState = useDeletionState.getState();
      
      return await deletionState.deleteNode(element);
      
    } catch (error) {
      console.error('‚ùå Node deletion composable error:', error);
      return false;
    }
  }

  /**
   * ‡∏•‡∏ö Edge Element ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
   * @param element - Edge Element ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
   * @returns Promise<boolean> - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏ö
   */
  async function deleteEdge(element: SelectableElement): Promise<boolean> {
    if (element.type !== 'edge') {
      console.warn('‚ö†Ô∏è Element is not an edge type');
      return false;
    }

    try {
      const { useDeletionState } = await import('../stores/deletionState');
      const deletionState = useDeletionState.getState();
      
      return await deletionState.deleteEdge(element);
      
    } catch (error) {
      console.error('‚ùå Edge deletion composable error:', error);
      return false;
    }
  }

  /**
   * ‡∏•‡∏ö Elements ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
   * @param elements - Array ‡∏Ç‡∏≠‡∏á Elements ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
   * @returns Promise<boolean[]> - Array ‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ element
   */
  async function deleteMultipleElements(elements: SelectableElement[]): Promise<boolean[]> {
    console.log(`üóëÔ∏è Starting bulk deletion of ${elements.length} elements`);
    
    const results: boolean[] = [];
    
    // ‡∏•‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤ order ‡πÅ‡∏•‡∏∞ error handling
    for (const element of elements) {
      try {
        const success = await deleteElement(element);
        results.push(success);
        
        if (success) {
          console.log(`‚úÖ Successfully deleted element: ${element.nodeId}`);
        } else {
          console.warn(`‚ö†Ô∏è Failed to delete element: ${element.nodeId}`);
        }
        
        // ‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ UI ‡∏ï‡∏≤‡∏°‡∏ó‡∏±‡∏ô
        await new Promise(resolve => setTimeout(resolve, 50));
        
      } catch (error) {
        console.error(`‚ùå Error deleting element ${element.nodeId}:`, error);
        results.push(false);
      }
    }
    
    const successCount = results.filter(Boolean).length;
    console.log(`üéØ Bulk deletion completed: ${successCount}/${elements.length} successful`);
    
    return results;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Element ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   * @param nodeId - ID ‡∏Ç‡∏≠‡∏á Node
   * @returns boolean - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏ö
   */
  async function isDeleting(nodeId: string): Promise<boolean> {
    try {
      const { useDeletionState } = await import('../stores/deletionState');
      const deletionState = useDeletionState.getState();
      
      return deletionState.isDeleting(nodeId);
      
    } catch (error) {
      console.error('‚ùå Error checking deletion status:', error);
      return false;
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Element ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   * @param element - Element ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   * @returns Promise<{canDelete: boolean, reason?: string}> - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
   */
  async function canDeleteElement(element: SelectableElement): Promise<{
    canDelete: boolean;
    reason?: string;
  }> {
    try {
      const { calculateDeletionPermissions } = await import('../utils/elementDeletion');
      return calculateDeletionPermissions(element);
      
    } catch (error) {
      console.error('‚ùå Error checking deletion permissions:', error);
      return {
        canDelete: false,
        reason: 'Permission check failed'
      };
    }
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏ö Elements
   * @returns Promise<DeletionRecord[]> - Array ‡∏Ç‡∏≠‡∏á deletion records
   */
  async function getDeletionHistory(): Promise<DeletionRecord[]> {
    try {
      const { useDeletionState } = await import('../stores/deletionState');
      const deletionState = useDeletionState.getState();
      
      return deletionState.getDeletionHistory();
      
    } catch (error) {
      console.error('‚ùå Error getting deletion history:', error);
      return [];
    }
  }

  /**
   * ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏ö Elements
   * @returns Promise<void>
   */
  async function clearDeletionHistory(): Promise<void> {
    try {
      const { useDeletionState } = await import('../stores/deletionState');
      const deletionState = useDeletionState.getState();
      
      deletionState.clearHistory();
      console.log('üßπ Deletion history cleared via composable');
      
    } catch (error) {
      console.error('‚ùå Error clearing deletion history:', error);
    }
  }

  /**
   * ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏ö Elements
   * @returns Promise<{total: number, successful: number, failed: number}> - ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏ö
   */
  async function getDeletionStats(): Promise<{
    total: number;
    successful: number;
    failed: number;
  }> {
    try {
      const history = await getDeletionHistory();
      
      const total = history.length;
      const successful = history.filter(record => record.success).length;
      const failed = total - successful;
      
      return { total, successful, failed };
      
    } catch (error) {
      console.error('‚ùå Error calculating deletion stats:', error);
      return { total: 0, successful: 0, failed: 0 };
    }
  }

  // Return all actions ‡πÅ‡∏•‡∏∞ utilities
  return {
    // Core deletion actions
    deleteElement,
    deleteNode,
    deleteEdge,
    deleteMultipleElements,
    
    // Status checks
    isDeleting,
    canDeleteElement,
    
    // History management
    getDeletionHistory,
    clearDeletionHistory,
    getDeletionStats
  };
}

/**
 * Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Monitor Deletion Events
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö components ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á deletion events
 */
export function useDeletionEvents() {
  
  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Deletion Events
   * @param callback - Function ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ deletion event
   * @returns cleanup function
   */
  function onDeletionEvent(
    callback: (event: CustomEvent) => void
  ): () => void {
    const events = [
      'element-deletion-started',
      'element-deletion-completed',
      'element-deletion-failed'
    ];
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å deletion events
    events.forEach(eventType => {
      window.addEventListener(eventType, callback as EventListener);
    });
    
    console.log('üëÇ Deletion event listeners added');
    
    // Return cleanup function
    return () => {
      events.forEach(eventType => {
        window.removeEventListener(eventType, callback as EventListener);
      });
      console.log('üßπ Deletion event listeners removed');
    };
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Deletion Started Events
   * @param callback - Function ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö element
   * @returns cleanup function
   */
  function onDeletionStarted(
    callback: (detail: { element: SelectableElement; elementType: string }) => void
  ): () => void {
    const handler = (event: CustomEvent) => {
      callback(event.detail);
    };
    
    window.addEventListener('element-deletion-started', handler as EventListener);
    
    return () => {
      window.removeEventListener('element-deletion-started', handler as EventListener);
    };
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Deletion Completed Events
   * @param callback - Function ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö element ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
   * @returns cleanup function
   */
  function onDeletionCompleted(
    callback: (detail: { element: SelectableElement; elementType: string }) => void
  ): () => void {
    const handler = (event: CustomEvent) => {
      callback(event.detail);
    };
    
    window.addEventListener('element-deletion-completed', handler as EventListener);
    
    return () => {
      window.removeEventListener('element-deletion-completed', handler as EventListener);
    };
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Deletion Failed Events
   * @param callback - Function ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö element ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
   * @returns cleanup function
   */
  function onDeletionFailed(
    callback: (detail: { element: SelectableElement; elementType: string; error: string }) => void
  ): () => void {
    const handler = (event: CustomEvent) => {
      callback(event.detail);
    };
    
    window.addEventListener('element-deletion-failed', handler as EventListener);
    
    return () => {
      window.removeEventListener('element-deletion-failed', handler as EventListener);
    };
  }

  return {
    onDeletionEvent,
    onDeletionStarted,
    onDeletionCompleted,
    onDeletionFailed
  };
}

/**
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Composables:
 * 
 * ```typescript
 * // ‡πÉ‡∏ô component
 * const { deleteElement, isDeleting, canDeleteElement } = useDeletionActions();
 * const { onDeletionCompleted } = useDeletionEvents();
 * 
 * // ‡∏•‡∏ö element
 * const handleDelete = async (element: SelectableElement) => {
 *   const permission = await canDeleteElement(element);
 *   if (permission.canDelete) {
 *     const success = await deleteElement(element);
 *     console.log('Delete result:', success);
 *   }
 * };
 * 
 * // ‡∏ü‡∏±‡∏á deletion events
 * useEffect(() => {
 *   const cleanup = onDeletionCompleted((detail) => {
 *     console.log('Element deleted:', detail.element.nodeId);
 *   });
 *   return cleanup;
 * }, []);
 * ```
 */