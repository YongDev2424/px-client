// src/components/PropertyList.ts

import { Container, Graphics, Text } from 'pixi.js';
import { PropertyValue } from '../utils/nodeStateManager';
import { PropertyItem } from './PropertyItem';

/**
 * ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PropertyList
 */
export interface PropertyListOptions {
  width?: number;                    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á list (default: 180)
  maxHeight?: number;               // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á list (default: 120)
  itemHeight?: number;              // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ item (default: 24)
  spacing?: number;                 // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á items (default: 2)
  backgroundColor?: number;         // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á (default: 0x1e1e1e)
  borderColor?: number;             // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏ö (default: 0x444444)
  scrollbarColor?: number;          // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á scrollbar (default: 0x666666)
  scrollbarWidth?: number;          // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á scrollbar (default: 8)
  showScrollbar?: boolean;          // ‡πÅ‡∏™‡∏î‡∏á scrollbar ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (default: true)
  emptyMessage?: string;            // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ properties (default: 'No properties')
}

/**
 * Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Properties ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£ scroll
 * ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á PropertyItem ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏°‡∏µ scrollbar ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô
 */
export class PropertyList extends Container {
  private options: Required<PropertyListOptions>;
  private backgroundGraphics: Graphics;
  private scrollContainer: Container;
  private scrollbarContainer: Container;
  private scrollbarTrack: Graphics;
  private scrollbarThumb: Graphics;
  private emptyMessageText: Text;
  
  private properties: Map<string, PropertyItem> = new Map();
  private scrollPosition: number = 0;
  private maxScrollPosition: number = 0;
  private isDraggingScrollbar: boolean = false;
  private scrollbarVisible: boolean = false;

  // Event handlers
  private onPropertyEdit?: (property: PropertyValue) => void;
  private onPropertyDelete?: (property: PropertyValue) => void;

  constructor(options: PropertyListOptions = {}) {
    super();
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default options
    this.options = {
      width: 180,
      maxHeight: 120,
      itemHeight: 24,
      spacing: 2,
      backgroundColor: 0x1e1e1e,
      borderColor: 0x444444,
      scrollbarColor: 0x666666,
      scrollbarWidth: 8,
      showScrollbar: true,
      emptyMessage: 'No properties',
      ...options
    };

    this.createBackground();
    this.createScrollContainer();
    this.createScrollbar();
    this.createEmptyMessage();
    this.setupEvents();
    this.updateLayout();

    console.log('üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á PropertyList');
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á PropertyList
   */
  private createBackground(): void {
    this.backgroundGraphics = new Graphics();
    this.addChild(this.backgroundGraphics);
    this.drawBackground();
  }

  /**
   * ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
   */
  private drawBackground(): void {
    const { width, maxHeight, backgroundColor, borderColor } = this.options;

    this.backgroundGraphics.clear();
    
    // ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    this.backgroundGraphics
      .fill(backgroundColor)
      .rect(0, 0, width, maxHeight)
      .fill();

    // ‡∏ß‡∏≤‡∏î‡∏Ç‡∏≠‡∏ö
    this.backgroundGraphics
      .rect(0, 0, width, maxHeight)
      .stroke({ width: 1, color: borderColor });
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á Scroll Container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö PropertyItems
   */
  private createScrollContainer(): void {
    this.scrollContainer = new Container();
    this.addChild(this.scrollContainer);

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ mask ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö clipping
    const maskGraphics = new Graphics();
    maskGraphics
      .fill(0xffffff)
      .rect(0, 0, this.options.width - this.options.scrollbarWidth, this.options.maxHeight)
      .fill();
    
    this.scrollContainer.mask = maskGraphics;
    this.addChild(maskGraphics);
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á Scrollbar
   */
  private createScrollbar(): void {
    if (!this.options.showScrollbar) return;

    this.scrollbarContainer = new Container();
    this.addChild(this.scrollbarContainer);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á scrollbar track
    this.scrollbarTrack = new Graphics();
    this.scrollbarContainer.addChild(this.scrollbarTrack);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á scrollbar thumb
    this.scrollbarThumb = new Graphics();
    this.scrollbarContainer.addChild(this.scrollbarThumb);

    this.drawScrollbar();
    this.setupScrollbarEvents();
  }

  /**
   * ‡∏ß‡∏≤‡∏î Scrollbar
   */
  private drawScrollbar(): void {
    if (!this.options.showScrollbar) return;

    const { width, maxHeight, scrollbarColor, scrollbarWidth } = this.options;
    const trackX = width - scrollbarWidth;

    // ‡∏ß‡∏≤‡∏î scrollbar track
    this.scrollbarTrack.clear();
    this.scrollbarTrack
      .fill(scrollbarColor - 0x222222)
      .rect(trackX, 0, scrollbarWidth, maxHeight)
      .fill();

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á thumb
    const contentHeight = this.getContentHeight();
    const thumbHeight = Math.max(20, (maxHeight / contentHeight) * maxHeight);
    const thumbY = (this.scrollPosition / this.maxScrollPosition) * (maxHeight - thumbHeight);

    // ‡∏ß‡∏≤‡∏î scrollbar thumb
    this.scrollbarThumb.clear();
    if (this.scrollbarVisible) {
      this.scrollbarThumb
        .fill(scrollbarColor)
        .rect(trackX + 1, thumbY, scrollbarWidth - 2, thumbHeight)
        .fill();
    }
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Scrollbar Events
   */
  private setupScrollbarEvents(): void {
    if (!this.options.showScrollbar) return;

    this.scrollbarThumb.eventMode = 'static';
    this.scrollbarThumb.cursor = 'pointer';

    this.scrollbarThumb.on('pointerdown', (event) => {
      event.stopPropagation();
      this.isDraggingScrollbar = true;
    });

    // Global events ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö scrollbar dragging
    document.addEventListener('pointermove', this.handleScrollbarDrag.bind(this));
    document.addEventListener('pointerup', this.handleScrollbarRelease.bind(this));
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Scrollbar Drag
   */
  private handleScrollbarDrag(event: PointerEvent): void {
    if (!this.isDraggingScrollbar) return;

    const { maxHeight } = this.options;
    const contentHeight = this.getContentHeight();
    
    if (contentHeight <= maxHeight) return;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á scroll
    const localY = event.clientY; // ‡πÉ‡∏ä‡πâ client coordinates ‡πÅ‡∏ó‡∏ô
    const scrollRatio = localY / maxHeight;
    this.scrollPosition = Math.max(0, Math.min(this.maxScrollPosition, scrollRatio * this.maxScrollPosition));

    this.updateScrollPosition();
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Scrollbar Release
   */
  private handleScrollbarRelease(): void {
    this.isDraggingScrollbar = false;
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ Properties
   */
  private createEmptyMessage(): void {
    this.emptyMessageText = new Text({
      text: this.options.emptyMessage,
      style: {
        fontSize: 12,
        fill: 0x888888,
        fontFamily: 'Arial, sans-serif',
        fontStyle: 'italic'
      }
    });

    this.emptyMessageText.anchor.set(0.5);
    this.addChild(this.emptyMessageText);
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Events
   */
  private setupEvents(): void {
    // Wheel event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö scrolling
    this.eventMode = 'static';
    this.on('wheel', this.handleWheel.bind(this));
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Wheel Event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö scrolling
   */
  private handleWheel(event: any): void {
    event.stopPropagation();
    
    const deltaY = event.deltaY || 0;
    const scrollSpeed = 20;
    
    this.scrollPosition = Math.max(0, Math.min(this.maxScrollPosition, 
      this.scrollPosition + (deltaY > 0 ? scrollSpeed : -scrollSpeed)));
    
    this.updateScrollPosition();
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á scroll
   */
  private updateScrollPosition(): void {
    this.scrollContainer.y = -this.scrollPosition;
    this.drawScrollbar();
  }

  /**
   * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  private getContentHeight(): number {
    const { itemHeight, spacing } = this.options;
    const itemCount = this.properties.size;
    
    if (itemCount === 0) return 0;
    
    return (itemCount * itemHeight) + ((itemCount - 1) * spacing);
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Layout ‡∏Ç‡∏≠‡∏á PropertyList
   */
  private updateLayout(): void {
    const { width, maxHeight, itemHeight, spacing } = this.options;
    const contentHeight = this.getContentHeight();
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï max scroll position
    this.maxScrollPosition = Math.max(0, contentHeight - maxHeight);
    
    // ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô scrollbar
    this.scrollbarVisible = contentHeight > maxHeight;
    
    // ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á empty message
    this.emptyMessageText.x = width / 2;
    this.emptyMessageText.y = maxHeight / 2;
    this.emptyMessageText.visible = this.properties.size === 0;
    
    // ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á PropertyItems
    let currentY = 0;
    const sortedProperties = Array.from(this.properties.values())
      .sort((a, b) => a.getProperty().order - b.getProperty().order);
    
    sortedProperties.forEach((item) => {
      item.x = 0;
      item.y = currentY;
      currentY += itemHeight + spacing;
    });
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï scroll position ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï
    if (this.scrollPosition > this.maxScrollPosition) {
      this.scrollPosition = this.maxScrollPosition;
    }
    
    this.updateScrollPosition();
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° Property ‡πÉ‡∏´‡∏°‡πà
   */
  public addProperty(property: PropertyValue): void {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ property ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (this.properties.has(property.key)) {
      console.warn(`Property "${property.key}" ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô PropertyList`);
      return;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á PropertyItem ‡πÉ‡∏´‡∏°‡πà
    const propertyItem = new PropertyItem(property, {
      width: this.options.width - (this.scrollbarVisible ? this.options.scrollbarWidth : 0),
      height: this.options.itemHeight
    });

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event handlers
    propertyItem.setEditClickHandler(this.handlePropertyEdit.bind(this));
    propertyItem.setDeleteClickHandler(this.handlePropertyDelete.bind(this));

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô collections
    this.properties.set(property.key, propertyItem);
    this.scrollContainer.addChild(propertyItem);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï layout
    this.updateLayout();

    console.log(`‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° Property "${property.key}" ‡∏•‡∏á‡πÉ‡∏ô PropertyList`);
  }

  /**
   * ‡∏•‡∏ö Property
   */
  public removeProperty(key: string): void {
    const propertyItem = this.properties.get(key);
    if (!propertyItem) {
      console.warn(`‡πÑ‡∏°‡πà‡∏û‡∏ö Property "${key}" ‡πÉ‡∏ô PropertyList`);
      return;
    }

    // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å collections
    this.properties.delete(key);
    this.scrollContainer.removeChild(propertyItem);
    propertyItem.destroy();

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï layout
    this.updateLayout();

    console.log(`‚ûñ ‡∏•‡∏ö Property "${key}" ‡∏à‡∏≤‡∏Å PropertyList`);
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Property
   */
  public updateProperty(property: PropertyValue): void {
    const propertyItem = this.properties.get(property.key);
    if (!propertyItem) {
      console.warn(`‡πÑ‡∏°‡πà‡∏û‡∏ö Property "${property.key}" ‡πÉ‡∏ô PropertyList`);
      return;
    }

    propertyItem.updateProperty(property);
    console.log(`üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Property "${property.key}" ‡πÉ‡∏ô PropertyList`);
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á Properties ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  public renderProperties(properties: PropertyValue[]): void {
    // ‡∏•‡πâ‡∏≤‡∏á properties ‡πÄ‡∏î‡∏¥‡∏°
    this.clearProperties();

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° properties ‡πÉ‡∏´‡∏°‡πà
    properties.forEach(property => {
      this.addProperty(property);
    });

    console.log(`üìã ‡πÅ‡∏™‡∏î‡∏á ${properties.length} Properties ‡πÉ‡∏ô PropertyList`);
  }

  /**
   * ‡∏•‡πâ‡∏≤‡∏á Properties ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  public clearProperties(): void {
    this.properties.forEach((item) => {
      this.scrollContainer.removeChild(item);
      item.destroy();
    });
    
    this.properties.clear();
    this.scrollPosition = 0;
    this.updateLayout();

    console.log('üßπ ‡∏•‡πâ‡∏≤‡∏á Properties ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô PropertyList');
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Property Edit
   */
  private handlePropertyEdit(property: PropertyValue): void {
    console.log(`‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Property: ${property.key}`);
    
    if (this.onPropertyEdit) {
      this.onPropertyEdit(property);
    }

    // ‡∏™‡πà‡∏á custom event
    this.dispatchPropertyListEvent('edit', property);
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Property Delete
   */
  private handlePropertyDelete(property: PropertyValue): void {
    console.log(`üóëÔ∏è ‡∏•‡∏ö Property: ${property.key}`);
    
    if (this.onPropertyDelete) {
      this.onPropertyDelete(property);
    }

    // ‡∏™‡πà‡∏á custom event
    this.dispatchPropertyListEvent('delete', property);
  }

  /**
   * ‡∏™‡πà‡∏á Custom Event
   */
  private dispatchPropertyListEvent(action: 'edit' | 'delete', property: PropertyValue): void {
    const customEvent = new CustomEvent('property-list-action', {
      detail: {
        action: action,
        property: property,
        list: this
      }
    });
    window.dispatchEvent(customEvent);
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Property Edit Handler
   */
  public setPropertyEditHandler(handler: (property: PropertyValue) => void): void {
    this.onPropertyEdit = handler;
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Property Delete Handler
   */
  public setPropertyDeleteHandler(handler: (property: PropertyValue) => void): void {
    this.onPropertyDelete = handler;
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Properties
   */
  public getPropertyCount(): number {
    return this.properties.size;
  }

  /**
   * ‡πÑ‡∏î‡πâ Properties ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  public getAllProperties(): PropertyValue[] {
    return Array.from(this.properties.values())
      .map(item => item.getProperty())
      .sort((a, b) => a.order - b.order);
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Property ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  public hasProperty(key: string): boolean {
    return this.properties.has(key);
  }

  /**
   * Scroll ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
   */
  public scrollTo(position: number): void {
    this.scrollPosition = Math.max(0, Math.min(this.maxScrollPosition, position));
    this.updateScrollPosition();
  }

  /**
   * Scroll ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Property ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
   */
  public scrollToProperty(key: string): void {
    const propertyItem = this.properties.get(key);
    if (!propertyItem) return;

    const targetY = propertyItem.y;
    this.scrollTo(targetY);
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á PropertyList
   */
  public getSize(): { width: number; height: number } {
    return {
      width: this.options.width,
      height: this.options.maxHeight
    };
  }

  /**
   * ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ component ‡πÅ‡∏•‡∏∞ cleanup resources
   */
  public destroy(): void {
    // ‡∏•‡∏ö event listeners
    document.removeEventListener('pointermove', this.handleScrollbarDrag.bind(this));
    document.removeEventListener('pointerup', this.handleScrollbarRelease.bind(this));

    // ‡∏•‡πâ‡∏≤‡∏á properties
    this.clearProperties();

    // ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ children
    this.backgroundGraphics?.destroy();
    this.scrollContainer?.destroy();
    this.scrollbarContainer?.destroy();
    this.scrollbarTrack?.destroy();
    this.scrollbarThumb?.destroy();
    this.emptyMessageText?.destroy();
    
    console.log('üóëÔ∏è ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ PropertyList');
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å parent destroy
    super.destroy();
  }
}