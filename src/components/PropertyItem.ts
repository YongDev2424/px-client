// src/components/PropertyItem.ts

import { Container, Graphics, Text, FederatedPointerEvent, Circle } from 'pixi.js';
import { PropertyValue } from '../utils/nodeStateManager';
import { ActionButton } from './ActionButton';

/**
 * ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PropertyItem
 */
export interface PropertyItemOptions {
  width?: number;                    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á item (default: 180)
  height?: number;                   // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á item (default: 24)
  backgroundColor?: number;          // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á (default: 0x2a2a2a)
  textColor?: number;               // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (default: 0xffffff)
  fontSize?: number;                // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (default: 12)
  padding?: number;                 // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô (default: 4)
  showEditButton?: boolean;         // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° edit ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (default: true)
  showDeleteButton?: boolean;       // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° delete ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (default: true)
  buttonSize?: number;              // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏∏‡πà‡∏° (default: 16)
}

/**
 * Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Property ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
 * ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ key: value ‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏° edit/delete
 */
export class PropertyItem extends Container {
  private property: PropertyValue;
  private options: Required<PropertyItemOptions>;
  private backgroundGraphics: Graphics;
  private keyText: Text;
  private valueText: Text;
  private editButton?: ActionButton;
  private deleteButton?: ActionButton;
  private isHovered: boolean = false;

  // Event handlers
  private onEditClick?: (property: PropertyValue) => void;
  private onDeleteClick?: (property: PropertyValue) => void;

  constructor(property: PropertyValue, options: PropertyItemOptions = {}) {
    super();

    this.property = { ...property }; // Clone ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô mutation
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default options
    this.options = {
      width: 180,
      height: 24,
      backgroundColor: 0x2a2a2a,
      textColor: 0xffffff,
      fontSize: 12,
      padding: 4,
      showEditButton: true,
      showDeleteButton: true,
      buttonSize: 16,
      ...options
    };

    this.createBackground();
    this.createTexts();
    this.createButtons();
    this.setupEvents();
    this.layoutComponents();

    console.log(`üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á PropertyItem: ${property.key} = ${property.value}`);
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á PropertyItem
   */
  private createBackground(): void {
    this.backgroundGraphics = new Graphics();
    this.addChild(this.backgroundGraphics);
    this.drawBackground();
  }

  /**
   * ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   */
  private drawBackground(): void {
    const { width, height, backgroundColor } = this.options;
    const currentBgColor = this.isHovered ? backgroundColor + 0x0a0a0a : backgroundColor;

    this.backgroundGraphics.clear();
    
    // ‡∏ß‡∏≤‡∏î‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    this.backgroundGraphics
      .fill(currentBgColor)
      .rect(0, 0, width, height)
      .fill();

    // ‡∏ß‡∏≤‡∏î‡∏Ç‡∏≠‡∏ö‡∏ö‡∏≤‡∏á‡πÜ
    this.backgroundGraphics
      .rect(0, 0, width, height)
      .stroke({ width: 1, color: 0x444444 });
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á Text components ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö key ‡πÅ‡∏•‡∏∞ value
   */
  private createTexts(): void {
    const { textColor, fontSize } = this.options;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Text ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö key
    this.keyText = new Text({
      text: `${this.property.key}:`,
      style: {
        fontSize: fontSize,
        fill: textColor,
        fontFamily: 'Arial, sans-serif',
        fontWeight: 'bold'
      }
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Text ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö value
    this.valueText = new Text({
      text: this.formatValue(this.property.value, this.property.type),
      style: {
        fontSize: fontSize,
        fill: textColor,
        fontFamily: 'Arial, sans-serif'
      }
    });

    this.addChild(this.keyText);
    this.addChild(this.valueText);
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö value ‡∏ï‡∏≤‡∏° type
   */
  private formatValue(value: string, type: PropertyValue['type']): string {
    switch (type) {
      case 'boolean':
        return value.toLowerCase() === 'true' ? '‚úì' : '‚úó';
      case 'number':
        return value;
      case 'text':
      default:
        return value;
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° Edit ‡πÅ‡∏•‡∏∞ Delete
   */
  private createButtons(): void {
    const { showEditButton, showDeleteButton, buttonSize } = this.options;

    if (showEditButton) {
      this.editButton = new ActionButton('edit', {
        size: buttonSize,
        backgroundColor: 0x3a3a3a,
        borderColor: 0x555555,
        hoverBackgroundColor: 0x4a4a4a,
        hoverScale: 1.05
      });

      this.editButton.setClickHandler(this.handleEditClick.bind(this));
      this.addChild(this.editButton);
    }

    if (showDeleteButton) {
      this.deleteButton = new ActionButton('delete', {
        size: buttonSize,
        backgroundColor: 0x3a3a3a,
        borderColor: 0x555555,
        hoverBackgroundColor: 0x4a4a4a,
        hoverScale: 1.05
      });

      this.deleteButton.setClickHandler(this.handleDeleteClick.bind(this));
      this.addChild(this.deleteButton);
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á components ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  private layoutComponents(): void {
    const { width, height, padding, buttonSize } = this.options;
    const buttonSpacing = 2;
    const buttonsWidth = (this.editButton ? buttonSize + buttonSpacing : 0) + 
                        (this.deleteButton ? buttonSize : 0);
    const textAreaWidth = width - (buttonsWidth + padding * 3);

    // ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á key text
    this.keyText.x = padding;
    this.keyText.y = (height - this.keyText.height) / 2;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á key text
    const keyWidth = this.keyText.width + padding;
    const valueWidth = textAreaWidth - keyWidth;

    // ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á value text
    this.valueText.x = padding + keyWidth;
    this.valueText.y = (height - this.valueText.height) / 2;

    // ‡∏ï‡∏±‡∏î value text ‡∏ñ‡πâ‡∏≤‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    if (this.valueText.width > valueWidth) {
      const originalText = this.valueText.text;
      let truncatedText = originalText;
      
      while (this.valueText.width > valueWidth - 20 && truncatedText.length > 3) {
        truncatedText = truncatedText.slice(0, -1);
        this.valueText.text = truncatedText + '...';
      }
    }

    // ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°
    let buttonX = width - padding - buttonSize;

    if (this.deleteButton) {
      this.deleteButton.x = buttonX;
      this.deleteButton.y = height / 2;
      buttonX -= (buttonSize + buttonSpacing);
    }

    if (this.editButton) {
      this.editButton.x = buttonX;
      this.editButton.y = height / 2;
    }
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Handlers
   */
  private setupEvents(): void {
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ interact ‡πÑ‡∏î‡πâ
    this.eventMode = 'static';
    this.cursor = 'default';
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ hit area
    this.hitArea = new Circle(this.options.width / 2, this.options.height / 2, 
                             Math.max(this.options.width, this.options.height) / 2);

    // Hover events
    this.on('pointerover', this.handlePointerOver.bind(this));
    this.on('pointerout', this.handlePointerOut.bind(this));
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Pointer Over Event
   */
  private handlePointerOver(event: FederatedPointerEvent): void {
    event.stopPropagation();
    
    if (!this.isHovered) {
      this.isHovered = true;
      this.drawBackground();
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Pointer Out Event
   */
  private handlePointerOut(event: FederatedPointerEvent): void {
    event.stopPropagation();
    
    if (this.isHovered) {
      this.isHovered = false;
      this.drawBackground();
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Edit Button Click
   */
  private handleEditClick(event: FederatedPointerEvent): void {
    console.log(`‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Property: ${this.property.key}`);
    
    if (this.onEditClick) {
      this.onEditClick(this.property);
    }

    // ‡∏™‡πà‡∏á custom event
    this.dispatchPropertyEvent('edit', event);
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Delete Button Click
   */
  private handleDeleteClick(event: FederatedPointerEvent): void {
    console.log(`üóëÔ∏è ‡∏•‡∏ö Property: ${this.property.key}`);
    
    if (this.onDeleteClick) {
      this.onDeleteClick(this.property);
    }

    // ‡∏™‡πà‡∏á custom event
    this.dispatchPropertyEvent('delete', event);
  }

  /**
   * ‡∏™‡πà‡∏á Custom Event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö Property
   */
  private dispatchPropertyEvent(action: 'edit' | 'delete', event: FederatedPointerEvent): void {
    const customEvent = new CustomEvent('property-item-action', {
      detail: {
        property: this.property,
        action: action,
        originalEvent: event,
        item: this
      }
    });
    window.dispatchEvent(customEvent);
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Property data
   */
  public updateProperty(newProperty: PropertyValue): void {
    this.property = { ...newProperty };
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï texts
    this.keyText.text = `${this.property.key}:`;
    this.valueText.text = this.formatValue(this.property.value, this.property.type);
    
    // ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
    this.layoutComponents();
    
    console.log(`üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï PropertyItem: ${this.property.key} = ${this.property.value}`);
  }

  /**
   * ‡πÑ‡∏î‡πâ Property data
   */
  public getProperty(): PropertyValue {
    return { ...this.property };
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Edit Click Handler
   */
  public setEditClickHandler(handler: (property: PropertyValue) => void): void {
    this.onEditClick = handler;
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Delete Click Handler
   */
  public setDeleteClickHandler(handler: (property: PropertyValue) => void): void {
    this.onDeleteClick = handler;
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á PropertyItem
   */
  public getSize(): { width: number; height: number } {
    return {
      width: this.options.width,
      height: this.options.height
    };
  }

  /**
   * ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ component ‡πÅ‡∏•‡∏∞ cleanup resources
   */
  public destroy(): void {
    // ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ children
    this.backgroundGraphics?.destroy();
    this.keyText?.destroy();
    this.valueText?.destroy();
    this.editButton?.destroy();
    this.deleteButton?.destroy();
    
    console.log(`üóëÔ∏è ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ PropertyItem: ${this.property.key}`);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å parent destroy
    super.destroy();
  }
}