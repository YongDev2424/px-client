// src/components/Edge.ts

import { Container, Graphics, Point } from 'pixi.js';
import { createEditableLabel } from './EditableLabel';
import { positionLabelOnEdge } from './EdgeLabel';

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏à‡∏∏‡∏î
 * @param point1 - ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 1
 * @param point2 - ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 2
 * @returns ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
 */
function getMidPoint(point1: Point, point2: Point): Point {
  return new Point(
    (point1.x + point2.x) / 2,
    (point1.y + point2.y) / 2
  );
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏à‡∏∏‡∏î (‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ radian)
 * @param from - ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
 * @param to - ‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
 * @returns ‡∏°‡∏∏‡∏°‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ radian
 */
function getAngleBetweenPoints(from: Point, to: Point): number {
  return Math.atan2(to.y - from.y, to.x - from.x);
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏ô Node (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á connection point)
 * @param node - Container ‡∏Ç‡∏≠‡∏á Node
 * @param preferredSide - ‡∏î‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (optional) ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡πÉ‡∏ä‡πâ connection point ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
 * @returns ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á connection point ‡∏ö‡∏ô Node
 */
function getConnectionPointPosition(node: Container, preferredSide?: string): Point {
  // ‡∏´‡∏≤ connection points ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Node (children ‡∏ó‡∏µ‡πà‡∏°‡∏µ cursor = 'crosshair')
  const connectionPoints = node.children.filter(child => 
    (child as any).cursor === 'crosshair'
  );
  
  if (connectionPoints.length === 0) {
    // fallback: ‡πÉ‡∏ä‡πâ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Node ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤ connection point ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
    const bounds = node.getBounds();
    const centerX = bounds.x + bounds.width / 2;
    const centerY = bounds.y + bounds.height / 2;
    console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Connection Points ‡πÉ‡∏ô Node, ‡πÉ‡∏ä‡πâ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á');
    return new Point(centerX, centerY);
  }
  
  let selectedConnectionPoint = connectionPoints[0]; // default ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
  console.log('üéØ Connection Points ‡∏ó‡∏µ‡πà‡∏û‡∏ö:', connectionPoints.length, '‡∏à‡∏∏‡∏î');
  console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤ preferredSide:', preferredSide);
  
  // ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ side ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡∏´‡∏≤ connection point ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
  if (preferredSide) {
    console.log('üìã Connection Points ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:');
    connectionPoints.forEach((point, index) => {
      console.log(`   [${index}] side: ${(point as any).side || 'undefined'}`);
    });
    
    const matchingPoint = connectionPoints.find(point => 
      (point as any).side === preferredSide
    );
    
    if (matchingPoint) {
      console.log('‚úÖ ‡∏û‡∏ö Connection Point ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö side:', preferredSide);
      selectedConnectionPoint = matchingPoint;
    } else {
      console.warn('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Connection Point ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö side:', preferredSide, '‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å');
    }
  }
  
  // ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á connection point ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (PixiJS v8 API)
  const globalPos = selectedConnectionPoint.getGlobalPosition();
  console.log('üîç Connection Point global position:', globalPos, 'side:', (selectedConnectionPoint as any).side);
  return globalPos;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á "‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏†‡∏≤‡∏û" ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£ (Arrow Head)
 * @param tipPosition - ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏®‡∏£
 * @param angle - ‡∏°‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£ (‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ radian)
 * @param size - ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£ (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 10)
 * @param color - ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£ (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏™‡∏µ‡∏î‡∏≥)
 * @returns Graphics object ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£
 */
function createArrowHead(tipPosition: Point, angle: number, size: number = 10, color: number = 0x000000): Graphics {
  const arrow = new Graphics();
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£ (‡∏£‡∏π‡∏õ‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°)
  const arrowLength = size;
  const arrowWidth = size * 0.6;
  
  // ‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£
  const tip = tipPosition;
  
  // ‡∏à‡∏∏‡∏î‡∏ê‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ç‡∏ß‡∏≤‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£
  const baseLeft = new Point(
    tip.x - arrowLength * Math.cos(angle) + arrowWidth * Math.cos(angle + Math.PI / 2),
    tip.y - arrowLength * Math.sin(angle) + arrowWidth * Math.sin(angle + Math.PI / 2)
  );
  
  const baseRight = new Point(
    tip.x - arrowLength * Math.cos(angle) + arrowWidth * Math.cos(angle - Math.PI / 2),
    tip.y - arrowLength * Math.sin(angle) + arrowWidth * Math.sin(angle - Math.PI / 2)
  );
  
  // ‡∏ß‡∏≤‡∏î‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏•‡∏π‡∏Å‡∏®‡∏£
  arrow
    .moveTo(tip.x, tip.y)
    .lineTo(baseLeft.x, baseLeft.y)
    .lineTo(baseRight.x, baseRight.y)
    .lineTo(tip.x, tip.y)
    .fill({ color });
  
  return arrow;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Edge (‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°) ‡πÅ‡∏ö‡∏ö static ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á Node ‡∏û‡∏£‡πâ‡∏≠‡∏° Label
 * ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Label
 * @param sourceNode - Node ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
 * @param targetNode - Node ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
 * @param labelText - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Label ‡∏ö‡∏ô Edge (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô "relationship")
 * @param lineColor - ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏™‡∏µ‡∏î‡∏≥)
 * @param lineWidth - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 2)
 * @param showArrow - ‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô true)
 * @returns Container ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡πâ‡∏ô, ‡∏•‡∏π‡∏Å‡∏®‡∏£ ‡πÅ‡∏•‡∏∞ Label
 */
export function createEdge(
  sourceNode: Container, 
  targetNode: Container,
  labelText: string = 'relationship',
  lineColor: number = 0x000000,
  lineWidth: number = 2,
  showArrow: boolean = true,
  sourceSide?: string,
  targetSide?: string
): Container {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Container ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Edge
  const edgeContainer = new Container();
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á Node
  const startPoint = getConnectionPointPosition(sourceNode, sourceSide);
  const endPoint = getConnectionPointPosition(targetNode, targetSide);
  
  console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Edge:');
  console.log('üìç Source:', startPoint, 'side:', sourceSide);
  console.log('üìç Target:', endPoint, 'side:', targetSide);
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö label
  const midPoint = getMidPoint(startPoint, endPoint);
  const totalDistance = Math.sqrt((endPoint.x - startPoint.x) ** 2 + (endPoint.y - startPoint.y) ** 2);
  const labelGapSize = 60; // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö label (pixels)
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏™‡πâ‡∏ô‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
  const gapRatio = labelGapSize / totalDistance;
  const gapStart = {
    x: midPoint.x - (endPoint.x - startPoint.x) * gapRatio * 0.5,
    y: midPoint.y - (endPoint.y - startPoint.y) * gapRatio * 0.5
  };
  const gapEnd = {
    x: midPoint.x + (endPoint.x - startPoint.x) * gapRatio * 0.5,
    y: midPoint.y + (endPoint.y - startPoint.y) * gapRatio * 0.5
  };
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Graphics ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏£‡∏Å (‡∏à‡∏≤‡∏Å start ‡∏ñ‡∏∂‡∏á gap start)
  const lineGraphics1 = new Graphics();
  lineGraphics1
    .moveTo(startPoint.x, startPoint.y)
    .lineTo(gapStart.x, gapStart.y)
    .stroke({ width: lineWidth, color: lineColor });
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Graphics ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á (‡∏à‡∏≤‡∏Å gap end ‡∏ñ‡∏∂‡∏á end)
  const lineGraphics2 = new Graphics();
  lineGraphics2
    .moveTo(gapEnd.x, gapEnd.y)
    .lineTo(endPoint.x, endPoint.y)
    .stroke({ width: lineWidth, color: lineColor });
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô Container
  edgeContainer.addChild(lineGraphics1);
  edgeContainer.addChild(lineGraphics2);
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  if (showArrow) {
    const angle = getAngleBetweenPoints(startPoint, endPoint);
    const arrowGraphics = createArrowHead(endPoint, angle, 12, lineColor);
    edgeContainer.addChild(arrowGraphics);
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Edge ‡∏î‡πâ‡∏ß‡∏¢ unified system
  const labelContainer = createEditableLabel({
    text: labelText,
    fontSize: 12, // ‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤ Node label
    textColor: 0x000000,
    backgroundColor: 0xFFFFFF,
    hasBackground: true, // Edge label ‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    padding: 4,
    borderColor: 0xCCCCCC,
    borderWidth: 1,
    onTextChange: (newText: string, oldText: string) => {
      console.log(`Edge label ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "${oldText}" ‡πÄ‡∏õ‡πá‡∏ô "${newText}"`);
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï metadata
      (edgeContainer as any).edgeData.labelText = newText;
    },
    onEditStart: () => {
      console.log('‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Edge label');
    },
    onEditEnd: () => {
      console.log('‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Edge label');
    }
  });

  // ‡∏ß‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Label ‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á Edge
  const labelMidPoint = getMidPoint(startPoint, endPoint);
  const angle = getAngleBetweenPoints(startPoint, endPoint);
  positionLabelOnEdge(labelContainer, labelMidPoint, angle, 0);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° Label ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô Edge Container
  edgeContainer.addChild(labelContainer);
  
  // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• metadata ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Container (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
  (edgeContainer as any).edgeData = {
    sourceNode,
    targetNode,
    startPoint: startPoint.clone(),
    endPoint: endPoint.clone(),
    labelText: labelText,
    labelContainer: labelContainer,
    sourceSide: sourceSide,    // ‡πÄ‡∏Å‡πá‡∏ö side ‡∏Ç‡∏≠‡∏á source
    targetSide: targetSide     // ‡πÄ‡∏Å‡πá‡∏ö side ‡∏Ç‡∏≠‡∏á target
  };
  
  return edgeContainer;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Preview Edge (‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß) ‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡πÄ‡∏°‡∏≤‡∏™‡πå
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≤‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Edge
 * @param startPoint - ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏û‡∏¥‡∏Å‡∏±‡∏î global)
 * @param endPoint - ‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á (‡∏û‡∏¥‡∏Å‡∏±‡∏î global, ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏°‡∏≤‡∏™‡πå)
 * @param lineColor - ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤)
 * @param lineWidth - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 2)
 * @param alpha - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 0.7)
 * @returns Graphics object ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô preview
 */
export function createPreviewEdge(
  startPoint: Point,
  endPoint: Point,
  lineColor: number = 0x666666,
  lineWidth: number = 2,
  alpha: number = 0.7
): Graphics {
  const previewLine = new Graphics();
  
  // ‡∏õ‡∏¥‡∏î hit testing ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏á target Node
  previewLine.eventMode = 'none';
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
  previewLine.alpha = alpha;
  
  // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏à‡∏≤‡∏Å startPoint ‡πÑ‡∏õ endPoint
  previewLine
    .moveTo(startPoint.x, startPoint.y)
    .lineTo(endPoint.x, endPoint.y)
    .stroke({ width: lineWidth, color: lineColor });
  
  return previewLine;
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á Edge ‡πÅ‡∏•‡∏∞ Label ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Node ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
 * ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏™‡πà‡∏ß‡∏ô‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö label
 * @param edgeContainer - Container ‡∏Ç‡∏≠‡∏á Edge ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 */
export function updateEdgePosition(edgeContainer: Container): void {
  const edgeData = (edgeContainer as any).edgeData;
  if (!edgeData) {
    console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• edgeData ‡πÉ‡∏ô Container');
    return;
  }
  
  const { sourceNode, targetNode, labelContainer } = edgeData;
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ side ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
  const sourceSide = (edgeContainer as any).edgeData?.sourceSide;
  const targetSide = (edgeContainer as any).edgeData?.targetSide;
  
  const newStartPoint = getConnectionPointPosition(sourceNode, sourceSide);
  const newEndPoint = getConnectionPointPosition(targetNode, targetSide);
  
  console.log('üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Edge position:');
  console.log('üìç Source Side:', sourceSide, '‚Üí', newStartPoint);
  console.log('üìç Target Side:', targetSide, '‚Üí', newEndPoint);
  
  // ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà
  edgeContainer.removeChildren();
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö label (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô createEdge)
  const midPoint = getMidPoint(newStartPoint, newEndPoint);
  const totalDistance = Math.sqrt((newEndPoint.x - newStartPoint.x) ** 2 + (newEndPoint.y - newStartPoint.y) ** 2);
  const labelGapSize = 60; // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö label (pixels)
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏™‡πâ‡∏ô‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
  const gapRatio = labelGapSize / totalDistance;
  const gapStart = {
    x: midPoint.x - (newEndPoint.x - newStartPoint.x) * gapRatio * 0.5,
    y: midPoint.y - (newEndPoint.y - newStartPoint.y) * gapRatio * 0.5
  };
  const gapEnd = {
    x: midPoint.x + (newEndPoint.x - newStartPoint.x) * gapRatio * 0.5,
    y: midPoint.y + (newEndPoint.y - newStartPoint.y) * gapRatio * 0.5
  };
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏£‡∏Å
  const lineGraphics1 = new Graphics();
  lineGraphics1
    .moveTo(newStartPoint.x, newStartPoint.y)
    .lineTo(gapStart.x, gapStart.y)
    .stroke({ width: 2, color: 0x000000 });
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
  const lineGraphics2 = new Graphics();
  lineGraphics2
    .moveTo(gapEnd.x, gapEnd.y)
    .lineTo(newEndPoint.x, newEndPoint.y)
    .stroke({ width: 2, color: 0x000000 });
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£‡πÉ‡∏´‡∏°‡πà
  const angle = getAngleBetweenPoints(newStartPoint, newEndPoint);
  const arrowGraphics = createArrowHead(newEndPoint, angle);
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
  edgeContainer.addChild(lineGraphics1);
  edgeContainer.addChild(lineGraphics2);
  edgeContainer.addChild(arrowGraphics);
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Label ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  if (labelContainer) {
    const newMidPoint = getMidPoint(newStartPoint, newEndPoint);
    const newAngle = getAngleBetweenPoints(newStartPoint, newEndPoint);
    positionLabelOnEdge(labelContainer, newMidPoint, newAngle, 0);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Label ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
    edgeContainer.addChild(labelContainer);
  }
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï metadata
  edgeData.startPoint = newStartPoint;
  edgeData.endPoint = newEndPoint;
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Edge ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏á Label
 * @param edgeContainer - Container ‡∏Ç‡∏≠‡∏á Edge
 * @returns ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */
export function getEdgeMidPoint(edgeContainer: Container): Point | null {
  const edgeData = (edgeContainer as any).edgeData;
  if (!edgeData) {
    return null;
  }
  
  return getMidPoint(edgeData.startPoint, edgeData.endPoint);
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏°‡∏Ç‡∏≠‡∏á Edge ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏∏‡∏ô Label ‡πÉ‡∏´‡πâ‡∏Ç‡∏ô‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô
 * @param edgeContainer - Container ‡∏Ç‡∏≠‡∏á Edge
 * @returns ‡∏°‡∏∏‡∏°‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ radian ‡∏´‡∏£‡∏∑‡∏≠ 0 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */
export function getEdgeAngle(edgeContainer: Container): number {
  const edgeData = (edgeContainer as any).edgeData;
  if (!edgeData) {
    return 0;
  }
  
  return getAngleBetweenPoints(edgeData.startPoint, edgeData.endPoint);
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Edge ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Node ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param edgeContainer - Container ‡∏Ç‡∏≠‡∏á Edge
 * @param node - Node ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
 * @returns true ‡∏ñ‡πâ‡∏≤ Edge ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Node ‡∏ô‡∏µ‡πâ
 */
export function isEdgeConnectedToNode(edgeContainer: Container, node: Container): boolean {
  const edgeData = (edgeContainer as any).edgeData;
  if (!edgeData) {
    console.warn('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö edgeData ‡πÉ‡∏ô container');
    return false;
  }
  
  const isSource = edgeData.sourceNode === node;
  const isTarget = edgeData.targetNode === node;
  const isConnected = isSource || isTarget;
  
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:');
  console.log('   - edgeData.sourceNode === node:', isSource);
  console.log('   - edgeData.targetNode === node:', isTarget);
  console.log('   - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:', isConnected);
  
  return isConnected;
}