// src/components/Edge.ts

import { Container, Graphics, Point, FederatedPointerEvent } from 'pixi.js';
import { createEditableLabel } from './EditableLabel';

// Enhanced Property System Integration (Function-Based)
import { usePropertyActions, useDrawerActions } from '../composables';
import { PropertyCountBadge, createPropertyCountBadge } from './PropertyCountBadge';
import { createSimpleDoubleClickHandler } from '../utils/doubleClickDetector';

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏à‡∏∏‡∏î
 * @param point1 - ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 1
 * @param point2 - ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 2
 * @returns ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
 */
function getMidPoint(point1: Point, point2: Point): Point {
  return new Point(
    (point1.x + point2.x) / 2,
    (point1.y + point2.y) / 2
  );
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Floating Edge Label ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ Node ‡πÅ‡∏ï‡πà‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡∏Å‡∏ß‡πà‡∏≤
 * @param labelText - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° label
 * @param onTextChange - callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
 * @returns Container ‡∏Ç‡∏≠‡∏á floating label
 */
function createFloatingEdgeLabel(
  labelText: string,
  onTextChange?: (newText: string, oldText: string) => void
): Container {
  const labelContainer = new Container();
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á (‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ Node ‡πÅ‡∏ï‡πà‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡∏Å‡∏ß‡πà‡∏≤)
  const labelBackground = new Graphics();
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  const padding = 8;
  const textWidth = labelText.length * 7; // ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  const boxWidth = Math.max(60, textWidth + padding * 2);
  const boxHeight = 24;
  
  // ‡∏ß‡∏≤‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ö‡∏ö outlined ‡∏û‡∏£‡πâ‡∏≠‡∏° rounded corners (‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
  labelBackground
    .roundRect(-boxWidth/2, -boxHeight/2, boxWidth, boxHeight, 4) // radius ‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á (‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
    .fill({ color: 0x1e1e1e, alpha: 0.6 }) // ‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    .stroke({ width: 1, color: 0x999999, alpha: 0.4 }); // ‡∏Ç‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á label ‡∏î‡πâ‡∏ß‡∏¢ createEditableLabel
  const textLabel = createEditableLabel({
    text: labelText,
    fontSize: 11,
    textColor: 0xFFFFFF,
    hasBackground: false, // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß
    onTextChange: onTextChange || (() => {}),
    onEditStart: () => {
      console.log('‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Edge label');
    },
    onEditEnd: () => {
      console.log('‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Edge label');
    }
  });
  
  // ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á
  textLabel.x = 0;
  textLabel.y = 0;
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô container
  labelContainer.addChild(labelBackground);
  labelContainer.addChild(textLabel);
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° hover effects
  labelContainer.eventMode = 'static';
  labelContainer.cursor = 'pointer';
  
  labelContainer.on('pointerover', () => {
    labelBackground.alpha = 0.9; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∂‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover (‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™)
  });
  
  labelContainer.on('pointerout', () => {
    labelBackground.alpha = 0.6; // ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡πÄ‡∏î‡∏¥‡∏°
  });
  
  // ‡πÄ‡∏Å‡πá‡∏ö reference ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
  (labelContainer as any).labelBackground = labelBackground;
  (labelContainer as any).textLabel = textLabel;
  
  return labelContainer;
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏à‡∏∏‡∏î (‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ radian)
 * @param from - ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
 * @param to - ‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
 * @returns ‡∏°‡∏∏‡∏°‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ radian
 */
function getAngleBetweenPoints(from: Point, to: Point): number {
  return Math.atan2(to.y - from.y, to.x - from.x);
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏ô Node (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á connection point)
 * @param node - Container ‡∏Ç‡∏≠‡∏á Node
 * @param preferredSide - ‡∏î‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (optional) ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡πÉ‡∏ä‡πâ connection point ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
 * @param returnLocalCoordinates - ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô local coordinates ‡∏Ç‡∏≠‡∏á stage ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (default: false = global)
 * @returns ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á connection point ‡∏ö‡∏ô Node
 */
function getConnectionPointPosition(node: Container, preferredSide?: string, returnLocalCoordinates: boolean = false): Point {
  // ‡∏´‡∏≤ connection points ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Node (children ‡∏ó‡∏µ‡πà‡∏°‡∏µ cursor = 'crosshair')
  const connectionPoints = node.children.filter(child => 
    (child as any).cursor === 'crosshair'
  );
  
  if (connectionPoints.length === 0) {
    // fallback: ‡πÉ‡∏ä‡πâ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Node ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤ connection point ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
    const bounds = node.getBounds();
    const centerX = bounds.x + bounds.width / 2;
    const centerY = bounds.y + bounds.height / 2;
    console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Connection Points ‡πÉ‡∏ô Node, ‡πÉ‡∏ä‡πâ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á');
    
    const globalCenter = new Point(centerX, centerY);
    
    if (returnLocalCoordinates) {
      // ‡∏´‡∏≤ stage ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô local coordinates
      let stage = node.parent;
      while (stage && stage.parent) {
        stage = stage.parent as Container;
      }
      return stage ? stage.toLocal(globalCenter) : globalCenter;
    }
    
    return globalCenter;
  }
  
  let selectedConnectionPoint = connectionPoints[0]; // default ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
  console.log('üéØ Connection Points ‡∏ó‡∏µ‡πà‡∏û‡∏ö:', connectionPoints.length, '‡∏à‡∏∏‡∏î');
  console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤ preferredSide:', preferredSide);
  
  // ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ side ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡∏´‡∏≤ connection point ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
  if (preferredSide) {
    console.log('üìã Connection Points ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:');
    connectionPoints.forEach((point, index) => {
      console.log(`   [${index}] side: ${(point as any).side || 'undefined'}`);
    });
    
    const matchingPoint = connectionPoints.find(point => 
      (point as any).side === preferredSide
    );
    
    if (matchingPoint) {
      console.log('‚úÖ ‡∏û‡∏ö Connection Point ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö side:', preferredSide);
      selectedConnectionPoint = matchingPoint;
    } else {
      console.warn('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Connection Point ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö side:', preferredSide, '‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å');
    }
  }
  
  // ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á connection point ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (PixiJS v8 API)
  const globalPos = selectedConnectionPoint.getGlobalPosition();
  console.log('üîç Connection Point global position:', globalPos, 'side:', (selectedConnectionPoint as any).side);
  
  if (returnLocalCoordinates) {
    // ‡∏´‡∏≤ stage ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô local coordinates
    let stage = node.parent;
    while (stage && stage.parent) {
      stage = stage.parent as Container;
    }
    const localPos = stage ? stage.toLocal(globalPos) : globalPos;
    console.log('üìç Connection Point local position:', localPos);
    return localPos;
  }
  
  return globalPos;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á "‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏†‡∏≤‡∏û" ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£ (Arrow Head)
 * @param tipPosition - ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏®‡∏£
 * @param angle - ‡∏°‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£ (‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ radian)
 * @param size - ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£ (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 10)
 * @param color - ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£ (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏™‡∏µ‡∏î‡∏≥)
 * @returns Graphics object ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£
 */
function createArrowHead(tipPosition: Point, angle: number, size: number = 10, color: number = 0x000000): Graphics {
  const arrow = new Graphics();
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£ (‡∏£‡∏π‡∏õ‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°)
  const arrowLength = size;
  const arrowWidth = size * 0.6;
  
  // ‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£
  const tip = tipPosition;
  
  // ‡∏à‡∏∏‡∏î‡∏ê‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ç‡∏ß‡∏≤‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£
  const baseLeft = new Point(
    tip.x - arrowLength * Math.cos(angle) + arrowWidth * Math.cos(angle + Math.PI / 2),
    tip.y - arrowLength * Math.sin(angle) + arrowWidth * Math.sin(angle + Math.PI / 2)
  );
  
  const baseRight = new Point(
    tip.x - arrowLength * Math.cos(angle) + arrowWidth * Math.cos(angle - Math.PI / 2),
    tip.y - arrowLength * Math.sin(angle) + arrowWidth * Math.sin(angle - Math.PI / 2)
  );
  
  // ‡∏ß‡∏≤‡∏î‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏•‡∏π‡∏Å‡∏®‡∏£
  arrow
    .moveTo(tip.x, tip.y)
    .lineTo(baseLeft.x, baseLeft.y)
    .lineTo(baseRight.x, baseRight.y)
    .lineTo(tip.x, tip.y)
    .fill({ color });
  
  return arrow;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Edge (‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°) ‡πÅ‡∏ö‡∏ö static ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á Node ‡∏û‡∏£‡πâ‡∏≠‡∏° Label
 * ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Label
 * @param sourceNode - Node ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
 * @param targetNode - Node ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
 * @param labelText - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Label ‡∏ö‡∏ô Edge (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô "relationship")
 * @param lineColor - ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏™‡∏µ‡∏î‡∏≥)
 * @param lineWidth - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 2)
 * @param showArrow - ‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô true)
 * @param sourceSide - ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á source node (optional)
 * @param targetSide - ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á target node (optional)
 * @param enhanced - ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô false)
 * @returns Container ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡πâ‡∏ô, ‡∏•‡∏π‡∏Å‡∏®‡∏£ ‡πÅ‡∏•‡∏∞ Label
 */
export function createEdge(
  sourceNode: Container, 
  targetNode: Container,
  labelText: string = 'relationship',
  lineColor: number = 0x999999, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏™‡∏µ‡∏î‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≤‡∏ß
  lineWidth: number = 2,
  showArrow: boolean = true,
  sourceSide?: string,
  targetSide?: string,
  enhanced: boolean = false
): Container {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Container ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Edge
  const edgeContainer = new Container();
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á unique edgeId ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Enhanced Property System
  const edgeId = `edge-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á Node (‡πÉ‡∏ä‡πâ local coordinates ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö zoom)
  const startPoint = getConnectionPointPosition(sourceNode, sourceSide, true);
  const endPoint = getConnectionPointPosition(targetNode, targetSide, true);
  
  console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Edge:');
  console.log('üìç Source (local):', startPoint, 'side:', sourceSide);
  console.log('üìç Target (local):', endPoint, 'side:', targetSide);
  
  // Initialize Enhanced Property System ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Edge (Function-Based)
  const propertyActions = usePropertyActions(edgeId);
  const drawerActions = useDrawerActions();
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á default properties ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Edge
  propertyActions.createTextProperty('label', labelText, { 
    required: true, 
    metadata: { category: 'basic', order: 0 } 
  });
  propertyActions.createTextProperty('type', 'relationship', {
    metadata: { category: 'basic', order: 1 }
  });
  propertyActions.createTextProperty('description', '', {
    metadata: { category: 'basic', order: 2 }
  });
  propertyActions.createArrayProperty('tags', [], {
    metadata: { category: 'classification', order: 3, maxItems: 5 }
  });
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Graphics ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (‡πÑ‡∏°‡πà‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô)
  const lineGraphics = new Graphics();
  lineGraphics
    .moveTo(startPoint.x, startPoint.y)
    .lineTo(endPoint.x, endPoint.y)
    .stroke({ width: lineWidth, color: lineColor });
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hit area detection
  lineGraphics.label = 'edge-line';

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° hover effects ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö edge
  lineGraphics.eventMode = 'static';
  lineGraphics.cursor = 'pointer';
  
  lineGraphics.on('pointerover', () => {
    lineGraphics.tint = 0xFFFFFF; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover
  });
  
  lineGraphics.on('pointerout', () => {
    lineGraphics.tint = 0x999999; // ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≤‡∏ß
  });
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Double-Click Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Edge Line (Function-Based)
  const handleEdgeDoubleClick = createSimpleDoubleClickHandler(() => {
    console.log('üñ±Ô∏è Double-click detected on Edge:', edgeId);
    
    // ‡πÄ‡∏õ‡∏¥‡∏î Property Drawer ‡∏î‡πâ‡∏ß‡∏¢ Enhanced Property System
    drawerActions.openForEdge(edgeContainer, edgeId, {
      tab: 'properties',
      edgeName: propertyActions.getProperty('label')?.value as string || labelText,
      autoFocus: true
    });
  }, 300); // Doherty Threshold: 300ms
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° double-click detection ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö edge line
  lineGraphics.on('pointerdown', handleEdgeDoubleClick);
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô Container
  edgeContainer.addChild(lineGraphics);
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  let arrowGraphics: Graphics | null = null;
  if (showArrow) {
    const angle = getAngleBetweenPoints(startPoint, endPoint);
    arrowGraphics = createArrowHead(endPoint, angle, 12, lineColor);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° hover effects ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏î‡πâ‡∏ß‡∏¢
    arrowGraphics.eventMode = 'static';
    arrowGraphics.cursor = 'pointer';
    
    arrowGraphics.on('pointerover', () => {
      arrowGraphics!.tint = 0xFFFFFF; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover
    });
    
    arrowGraphics.on('pointerout', () => {
      arrowGraphics!.tint = 0x999999; // ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≤‡∏ß
    });
    
    edgeContainer.addChild(arrowGraphics);
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Floating Label ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ Node
  const labelContainer = createFloatingEdgeLabel(labelText, (newText: string, oldText: string) => {
    console.log(`Edge label ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "${oldText}" ‡πÄ‡∏õ‡πá‡∏ô "${newText}"`);
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï label property
    propertyActions.updateProperty('label', newText);
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï metadata
    (edgeContainer as any).edgeData.labelText = newText;
  });

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° double-click ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö label container ‡∏î‡πâ‡∏ß‡∏¢
  const handleLabelDoubleClick = createSimpleDoubleClickHandler(() => {
    console.log('üñ±Ô∏è Double-click detected on Edge Label:', edgeId);
    drawerActions.openForEdge(edgeContainer, edgeId, {
      tab: 'properties',
      edgeName: propertyActions.getProperty('label')?.value as string || labelText,
      autoFocus: true
    });
  }, 300);
  
  labelContainer.on('pointerdown', handleLabelDoubleClick);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á PropertyCountBadge ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Edge (‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô label)
  const propertyBadge = createPropertyCountBadge({
    count: propertyActions.getPropertyCount(),
    position: 'top-right',
    hasChanges: false,
    size: 'small', // ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö edge
    theme: 'auto',
    onClick: () => {
      console.log('üéØ Edge PropertyCountBadge ‡∏Ñ‡∏•‡∏¥‡∏Å - ‡πÄ‡∏õ‡∏¥‡∏î Property Drawer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Edge:', edgeId);
      drawerActions.openForEdge(edgeContainer, edgeId, {
        tab: 'properties',
        edgeName: propertyActions.getProperty('label')?.value as string || labelText
      });
    }
  });

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° badge ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô label container
  labelContainer.addChild(propertyBadge);
  
  // ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á PropertyCountBadge (top-right of label)
  const badgeOffset = { x: 6, y: -6 }; // ‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤ node badge
  propertyBadge.x = (labelContainer.width / 2) + badgeOffset.x;
  propertyBadge.y = -(labelContainer.height / 2) + badgeOffset.y;

  // ‡∏ß‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Label ‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á Edge (floating ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡πÄ‡∏™‡πâ‡∏ô)
  const labelMidPoint = getMidPoint(startPoint, endPoint);
  labelContainer.x = labelMidPoint.x;
  labelContainer.y = labelMidPoint.y - 15; // ‡∏¢‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° Label ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô Edge Container
  edgeContainer.addChild(labelContainer);
  
  // ‡πÄ‡∏Å‡πá‡∏ö Enhanced metadata ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Container (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
  (edgeContainer as any).edgeData = {
    edgeId: edgeId,               // ‡πÄ‡∏û‡∏¥‡πà‡∏° unique edgeId
    sourceNode,
    targetNode,
    startPoint: startPoint.clone(),
    endPoint: endPoint.clone(),
    labelText: labelText,
    labelContainer: labelContainer,
    propertyBadge: propertyBadge, // ‡πÄ‡∏û‡∏¥‡πà‡∏° property badge reference
    sourceSide: sourceSide,       // ‡πÄ‡∏Å‡πá‡∏ö side ‡∏Ç‡∏≠‡∏á source
    targetSide: targetSide,       // ‡πÄ‡∏Å‡πá‡∏ö side ‡∏Ç‡∏≠‡∏á target
    hasProperties: true,          // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Enhanced Property System
    propertyCount: propertyActions.getPropertyCount(),
    edgeType: 'relationship'      // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó edge
  };

  // Setup Property Event Listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Edge (Function-Based)
  const updateEdgePropertyBadge = () => {
    const currentCount = propertyActions.getPropertyCount();
    propertyBadge.updateCount(currentCount, false);
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó metadata
    (edgeContainer as any).edgeData.propertyCount = currentCount;
    
    console.log('üè∑Ô∏è Edge property count updated:', edgeId, 'Count:', currentCount);
  };

  // Listen for property changes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Edge
  window.addEventListener('property-changed', (event: CustomEvent) => {
    if (event.detail.elementId === edgeId) {
      updateEdgePropertyBadge();
    }
  });

  window.addEventListener('properties-batch-updated', (event: CustomEvent) => {
    if (event.detail.elementId === edgeId) {
      updateEdgePropertyBadge();
    }
  });
  
  // üîó ‡πÄ‡∏û‡∏¥‡πà‡∏° selectable capability ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Edge
  const edgeData = {
    labelText,
    relationshipType: 'default',
    sourceId: (sourceNode as any).nodeData?.id || 'unknown-source',
    targetId: (targetNode as any).nodeData?.id || 'unknown-target',
    sourceSide,
    targetSide
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° selectable capability ‡πÉ‡∏ä‡πâ dynamic import ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á circular dependency)
  import('../utils/selectableEdge').then(({ makeSelectableEdge }) => {
    makeSelectableEdge(edgeContainer, {
      data: edgeData,
      hitAreaPadding: 15, // ‡πÄ‡∏û‡∏¥‡πà‡∏° hit area ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö edge selection ‡∏ó‡∏µ‡πà‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
      onSelect: () => {
        console.log('üîó Edge selected for toolbar actions:', labelText);
      },
      onDeselect: () => {
        console.log('‚≠ï Edge deselected from toolbar:', labelText);
      }
    });
  });

  // üé® ADDITIVE ENHANCEMENT: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö optional
  if (enhanced) {
    // Import EdgeStyler ‡πÅ‡∏ö‡∏ö dynamic ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏±‡∏ö existing code
    import('./EdgeStyler').then(({ EdgeStyler }) => {
      import('../utils/EdgeThemes').then(({ EdgeThemes }) => {
        EdgeStyler.enhanceExistingEdge(edgeContainer, EdgeThemes.default);
      });
    }).catch(error => {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î EdgeStyler ‡πÑ‡∏î‡πâ:', error);
      // Edge ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ enhancement
    });
  }
  
  return edgeContainer;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Preview Edge (‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß) ‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡πÄ‡∏°‡∏≤‡∏™‡πå
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≤‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Edge
 * @param startPoint - ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏û‡∏¥‡∏Å‡∏±‡∏î global)
 * @param endPoint - ‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á (‡∏û‡∏¥‡∏Å‡∏±‡∏î global, ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏°‡∏≤‡∏™‡πå)
 * @param lineColor - ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤)
 * @param lineWidth - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 2)
 * @param alpha - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 0.7)
 * @returns Graphics object ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô preview
 */
export function createPreviewEdge(
  startPoint: Point,
  endPoint: Point,
  lineColor: number = 0x999999, // ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≤‡∏ß‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô edge ‡∏à‡∏£‡∏¥‡∏á
  lineWidth: number = 2,
  alpha: number = 0.7
): Graphics {
  const previewLine = new Graphics();
  
  // ‡∏õ‡∏¥‡∏î hit testing ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏á target Node
  previewLine.eventMode = 'none';
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
  previewLine.alpha = alpha;
  
  // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏à‡∏≤‡∏Å startPoint ‡πÑ‡∏õ endPoint
  previewLine
    .moveTo(startPoint.x, startPoint.y)
    .lineTo(endPoint.x, endPoint.y)
    .stroke({ width: lineWidth, color: lineColor });
  
  return previewLine;
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á Edge ‡πÅ‡∏•‡∏∞ Label ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Node ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
 * ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏™‡πà‡∏ß‡∏ô‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö label
 * @param edgeContainer - Container ‡∏Ç‡∏≠‡∏á Edge ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 */
export function updateEdgePosition(edgeContainer: Container): void {
  const edgeData = (edgeContainer as any).edgeData;
  if (!edgeData) {
    console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• edgeData ‡πÉ‡∏ô Container');
    return;
  }
  
  const { sourceNode, targetNode, labelContainer } = edgeData;
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ side ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ (‡πÉ‡∏ä‡πâ local coordinates ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö zoom)
  const sourceSide = (edgeContainer as any).edgeData?.sourceSide;
  const targetSide = (edgeContainer as any).edgeData?.targetSide;
  
  const newStartPoint = getConnectionPointPosition(sourceNode, sourceSide, true);
  const newEndPoint = getConnectionPointPosition(targetNode, targetSide, true);
  
  console.log('üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Edge position:');
  console.log('üìç Source Side:', sourceSide, '‚Üí (local)', newStartPoint);
  console.log('üìç Target Side:', targetSide, '‚Üí (local)', newEndPoint);
  
  // ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà
  edgeContainer.removeChildren();
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (‡πÑ‡∏°‡πà‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô)
  const lineGraphics = new Graphics();
  lineGraphics
    .moveTo(newStartPoint.x, newStartPoint.y)
    .lineTo(newEndPoint.x, newEndPoint.y)
    .stroke({ width: 2, color: 0x999999 }); // ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≤‡∏ß

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° hover effects ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô
  lineGraphics.eventMode = 'static';
  lineGraphics.cursor = 'pointer';
  
  lineGraphics.on('pointerover', () => {
    lineGraphics.tint = 0xFFFFFF; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover
  });
  
  lineGraphics.on('pointerout', () => {
    lineGraphics.tint = 0x999999; // ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≤‡∏ß
  });
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£‡πÉ‡∏´‡∏°‡πà
  const angle = getAngleBetweenPoints(newStartPoint, newEndPoint);
  const arrowGraphics = createArrowHead(newEndPoint, angle, 12, 0x999999); // ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≤‡∏ß
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° hover effects ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏®‡∏£‡∏î‡πâ‡∏ß‡∏¢
  arrowGraphics.eventMode = 'static';
  arrowGraphics.cursor = 'pointer';
  
  arrowGraphics.on('pointerover', () => {
    arrowGraphics.tint = 0xFFFFFF; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover
  });
  
  arrowGraphics.on('pointerout', () => {
    arrowGraphics.tint = 0x999999; // ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≤‡∏ß
  });
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
  edgeContainer.addChild(lineGraphics);
  edgeContainer.addChild(arrowGraphics);
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Label ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (floating ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡πÄ‡∏™‡πâ‡∏ô)
  if (labelContainer) {
    const newMidPoint = getMidPoint(newStartPoint, newEndPoint);
    labelContainer.x = newMidPoint.x;
    labelContainer.y = newMidPoint.y - 15; // ‡∏¢‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Label ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
    edgeContainer.addChild(labelContainer);
  }
  
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï metadata
  edgeData.startPoint = newStartPoint;
  edgeData.endPoint = newEndPoint;
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Edge ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏á Label
 * @param edgeContainer - Container ‡∏Ç‡∏≠‡∏á Edge
 * @returns ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */
export function getEdgeMidPoint(edgeContainer: Container): Point | null {
  const edgeData = (edgeContainer as any).edgeData;
  if (!edgeData) {
    return null;
  }
  
  return getMidPoint(edgeData.startPoint, edgeData.endPoint);
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏°‡∏Ç‡∏≠‡∏á Edge ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏∏‡∏ô Label ‡πÉ‡∏´‡πâ‡∏Ç‡∏ô‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô
 * @param edgeContainer - Container ‡∏Ç‡∏≠‡∏á Edge
 * @returns ‡∏°‡∏∏‡∏°‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ radian ‡∏´‡∏£‡∏∑‡∏≠ 0 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */
export function getEdgeAngle(edgeContainer: Container): number {
  const edgeData = (edgeContainer as any).edgeData;
  if (!edgeData) {
    return 0;
  }
  
  return getAngleBetweenPoints(edgeData.startPoint, edgeData.endPoint);
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Edge ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Node ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param edgeContainer - Container ‡∏Ç‡∏≠‡∏á Edge
 * @param node - Node ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
 * @returns true ‡∏ñ‡πâ‡∏≤ Edge ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Node ‡∏ô‡∏µ‡πâ
 */
export function isEdgeConnectedToNode(edgeContainer: Container, node: Container): boolean {
  const edgeData = (edgeContainer as any).edgeData;
  if (!edgeData) {
    console.warn('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö edgeData ‡πÉ‡∏ô container');
    return false;
  }
  
  const isSource = edgeData.sourceNode === node;
  const isTarget = edgeData.targetNode === node;
  const isConnected = isSource || isTarget;
  
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:');
  console.log('   - edgeData.sourceNode === node:', isSource);
  console.log('   - edgeData.targetNode === node:', isTarget);
  console.log('   - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:', isConnected);
  
  return isConnected;
}

/**
 * üé® ENHANCED EDGE CREATION - ‡∏™‡∏£‡πâ‡∏≤‡∏á Edge ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
 * Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Edge ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
 * @param sourceNode - Node ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
 * @param targetNode - Node ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
 * @param labelText - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Label
 * @param relationshipType - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å theme)
 * @param sourceSide - ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á source node
 * @param targetSide - ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á target node
 * @returns Container ‡∏Ç‡∏≠‡∏á Edge ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
 */
export function createEnhancedEdge(
  sourceNode: Container,
  targetNode: Container,
  labelText: string = 'relationship',
  relationshipType: string = 'default',
  sourceSide?: string,
  targetSide?: string
): Container {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Edge ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô
  const edge = createEdge(
    sourceNode,
    targetNode,
    labelText,
    0x000000, // ‡∏™‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏¢ theme)
    2,        // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏¢ theme)
    true,     // ‡πÅ‡∏™‡∏î‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£
    sourceSide,
    targetSide,
    false     // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ auto enhancement ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏≠‡∏á
  );
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° enhancement ‡πÅ‡∏ö‡∏ö manual ‡∏û‡∏£‡πâ‡∏≠‡∏° theme ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  import('./EdgeStyler').then(({ EdgeStyler }) => {
    import('../utils/EdgeThemes').then(({ getThemeForRelationship }) => {
      const theme = getThemeForRelationship(relationshipType);
      EdgeStyler.enhanceExistingEdge(edge, theme);
      
      console.log(`‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á Enhanced Edge ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (theme: ${relationshipType})`);
    });
  }).catch(error => {
    console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î EdgeStyler ‡πÑ‡∏î‡πâ:', error);
  });
  
  return edge;
}

/**
 * üéØ SELECTABLE EDGE CREATION - ‡∏™‡∏£‡πâ‡∏≤‡∏á Edge ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Edge ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ select ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö toolbar actions
 * @param sourceNode - Node ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
 * @param targetNode - Node ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
 * @param labelText - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Label
 * @param relationshipType - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
 * @param sourceSide - ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á source node
 * @param targetSide - ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á target node
 * @returns Container ‡∏Ç‡∏≠‡∏á Edge ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ select ‡πÑ‡∏î‡πâ
 */
export function createSelectableEdge(
  sourceNode: Container,
  targetNode: Container,
  labelText: string = 'relationship',
  relationshipType: string = 'default',
  sourceSide?: string,
  targetSide?: string
): Container {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á enhanced edge
  const edge = createEnhancedEdge(
    sourceNode,
    targetNode,
    labelText,
    relationshipType,
    sourceSide,
    targetSide
  );
  
  const edgeData = {
    labelText,
    relationshipType,
    sourceNode,
    targetNode,
    sourceSide,
    targetSide
  };
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° selectable capability (‡πÉ‡∏ä‡πâ dynamic import ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á circular dependency)
  import('../utils/selectableEdge').then(({ makeSelectableEdge }) => {
    makeSelectableEdge(edge, {
      data: edgeData,
      hitAreaPadding: 15, // ‡πÄ‡∏û‡∏¥‡πà‡∏° hit area ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö edge selection ‡∏ó‡∏µ‡πà‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
      onSelect: () => {
        console.log('üîó Edge selected for toolbar actions:', labelText);
      },
      onDeselect: () => {
        console.log('‚≠ï Edge deselected from toolbar:', labelText);
      }
    });
  });
  
  // ‡πÄ‡∏Å‡πá‡∏ö edge data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
  (edge as any).edgeData = edgeData;
  
  console.log(`üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á Selectable Edge ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${labelText}`);
  return edge;
}

/**
 * üîÑ RETROFIT ENHANCEMENT - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Edge ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
 * @param existingEdge - Edge Container ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
 * @param relationshipType - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å theme)
 * @returns Promise ‡∏ó‡∏µ‡πà resolve ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
 */
export async function enhanceExistingEdge(
  existingEdge: Container,
  relationshipType: string = 'default'
): Promise<void> {
  try {
    const { EdgeStyler } = await import('./EdgeStyler');
    const { getThemeForRelationship } = await import('../utils/EdgeThemes');
    
    const theme = getThemeForRelationship(relationshipType);
    EdgeStyler.enhanceExistingEdge(existingEdge, theme);
    
    console.log(`‚ú® ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Edge ‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (theme: ${relationshipType})`);
  } catch (error) {
    console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Edge ‡πÑ‡∏î‡πâ:', error);
    throw error;
  }
}