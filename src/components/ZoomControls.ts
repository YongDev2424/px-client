// src/components/ZoomControls.ts
import { Application } from 'pixi.js';

/**
 * ZoomControls - ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£ zoom ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PixiJS canvas
 * 
 * üõ°Ô∏è ADDITIVE APPROACH: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå zoom ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç existing PixiJS interactions
 * - ‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç existing PixiJS application ‡∏´‡∏£‡∏∑‡∏≠ stage
 * - ‡πÄ‡∏û‡∏¥‡πà‡∏° UI controls ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á bottom-right
 * - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö mouse wheel zoom ‡πÅ‡∏•‡∏∞ keyboard shortcuts
 * - ‡∏£‡∏±‡∏Å‡∏©‡∏≤ existing interactions ‡πÅ‡∏•‡∏∞ event handlers
 */

export interface ZoomControlsConfig {
  position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';
  enableMouseWheel?: boolean;
  showTooltips?: boolean;
  smoothTransitions?: boolean;
  minZoom?: number;
  maxZoom?: number;
  zoomStep?: number;
  showZoomLevel?: boolean;
}

export interface ZoomState {
  currentZoom: number;
  minZoom: number;
  maxZoom: number;
  zoomStep: number;
  isTransitioning: boolean;
}

export class ZoomControls {
  private pixiApp: Application;
  private config: Required<ZoomControlsConfig>;
  private state: ZoomState;
  private container!: HTMLElement;
  private zoomInBtn!: HTMLButtonElement;
  private zoomOutBtn!: HTMLButtonElement;
  private resetBtn!: HTMLButtonElement;
  private zoomDisplay!: HTMLElement;
  private isDestroyed: boolean = false;

  // Event handlers for cleanup
  private wheelHandler: (event: WheelEvent) => void;
  private keyHandler: (event: KeyboardEvent) => void;
  private resizeHandler: () => void;

  constructor(pixiApp: Application, config: ZoomControlsConfig = {}) {
    this.pixiApp = pixiApp;
    
    // Default configuration
    this.config = {
      position: config.position || 'bottom-right',
      enableMouseWheel: config.enableMouseWheel !== false, // Default true
      showTooltips: config.showTooltips !== false, // Default true
      smoothTransitions: config.smoothTransitions !== false, // Default true
      minZoom: config.minZoom || 0.25,
      maxZoom: config.maxZoom || 4.0,
      zoomStep: config.zoomStep || 0.25,
      showZoomLevel: config.showZoomLevel !== false // Default true
    };

    // Initialize zoom state
    this.state = {
      currentZoom: 1.0,
      minZoom: this.config.minZoom,
      maxZoom: this.config.maxZoom,
      zoomStep: this.config.zoomStep,
      isTransitioning: false
    };

    // Bind event handlers for proper cleanup
    this.wheelHandler = this.handleWheelZoom.bind(this);
    this.keyHandler = this.handleKeyboardShortcuts.bind(this);
    this.resizeHandler = this.handleWindowResize.bind(this);

    this.createZoomUI();
    this.setupEventListeners();

    console.log('‚úÖ ZoomControls initialized with config:', this.config);
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á UI elements ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö zoom controls
   */
  private createZoomUI(): void {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á container ‡∏´‡∏•‡∏±‡∏Å
    this.container = document.createElement('div');
    this.container.className = 'zoom-controls';
    this.container.setAttribute('data-position', this.config.position);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á zoom buttons
    this.zoomInBtn = this.createButton('zoom-in', '+', 'Zoom In (Ctrl + =)');
    this.zoomOutBtn = this.createButton('zoom-out', '‚àí', 'Zoom Out (Ctrl + -)');
    this.resetBtn = this.createButton('zoom-reset', '‚åÇ', 'Reset Zoom (Ctrl + 0)');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á zoom level display
    if (this.config.showZoomLevel) {
      this.zoomDisplay = document.createElement('div');
      this.zoomDisplay.className = 'zoom-display';
      this.zoomDisplay.textContent = '100%';
      if (this.config.showTooltips) {
        this.zoomDisplay.title = 'Current zoom level';
      }
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° elements ‡πÄ‡∏Ç‡πâ‡∏≤ container
    this.container.appendChild(this.zoomInBtn);
    this.container.appendChild(this.zoomOutBtn);
    this.container.appendChild(this.resetBtn);
    
    if (this.zoomDisplay) {
      this.container.appendChild(this.zoomDisplay);
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° container ‡πÄ‡∏Ç‡πâ‡∏≤ DOM
    document.body.appendChild(this.container);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI state
    this.updateUI();
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á button element ‡∏û‡∏£‡πâ‡∏≠‡∏° event handlers
   */
  private createButton(className: string, text: string, tooltip?: string): HTMLButtonElement {
    const button = document.createElement('button');
    button.className = `zoom-btn ${className}`;
    button.textContent = text;
    button.type = 'button';
    
    if (tooltip && this.config.showTooltips) {
      button.title = tooltip;
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° click handlers
    switch (className) {
      case 'zoom-in':
        button.addEventListener('click', () => this.zoomIn());
        break;
      case 'zoom-out':
        button.addEventListener('click', () => this.zoomOut());
        break;
      case 'zoom-reset':
        button.addEventListener('click', () => this.resetZoom());
        break;
    }

    return button;
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mouse wheel ‡πÅ‡∏•‡∏∞ keyboard
   */
  private setupEventListeners(): void {
    // Mouse wheel zoom (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
    if (this.config.enableMouseWheel) {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° wheel event ‡∏ó‡∏µ‡πà canvas element ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô existing events
      const canvas = this.pixiApp.canvas;
      if (canvas) {
        canvas.addEventListener('wheel', this.wheelHandler, { passive: false });
      }
    }

    // Keyboard shortcuts
    document.addEventListener('keydown', this.keyHandler);

    // Window resize handler
    window.addEventListener('resize', this.resizeHandler);
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ mouse wheel zoom
   */
  private handleWheelZoom(event: WheelEvent): void {
    if (this.isDestroyed || this.state.isTransitioning) return;

    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô default scroll behavior
    event.preventDefault();
    event.stopPropagation();

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì zoom direction
    const delta = event.deltaY;
    const zoomDirection = delta > 0 ? -1 : 1;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì zoom level ‡πÉ‡∏´‡∏°‡πà
    const newZoom = this.state.currentZoom + (zoomDirection * this.state.zoomStep);
    
    // Apply zoom
    this.setZoom(newZoom);
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ keyboard shortcuts
   */
  private handleKeyboardShortcuts(event: KeyboardEvent): void {
    if (this.isDestroyed || this.state.isTransitioning) return;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Ctrl/Cmd key
    const isCtrlOrCmd = event.ctrlKey || event.metaKey;
    
    if (!isCtrlOrCmd) return;

    switch (event.key) {
      case '=':
      case '+':
        event.preventDefault();
        this.zoomIn();
        break;
      case '-':
        event.preventDefault();
        this.zoomOut();
        break;
      case '0':
        event.preventDefault();
        this.resetZoom();
        break;
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ window resize
   */
  private handleWindowResize(): void {
    if (this.isDestroyed) return;
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á zoom controls ‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    this.updatePosition();
  }

  /**
   * Zoom in ‡∏î‡πâ‡∏ß‡∏¢ step ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
   */
  public zoomIn(): void {
    if (this.isDestroyed) return;
    
    const newZoom = this.state.currentZoom + this.state.zoomStep;
    this.setZoom(newZoom);
  }

  /**
   * Zoom out ‡∏î‡πâ‡∏ß‡∏¢ step ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
   */
  public zoomOut(): void {
    if (this.isDestroyed) return;
    
    const newZoom = this.state.currentZoom - this.state.zoomStep;
    this.setZoom(newZoom);
  }

  /**
   * Reset zoom ‡πÄ‡∏õ‡πá‡∏ô 100%
   */
  public resetZoom(): void {
    if (this.isDestroyed) return;
    
    this.setZoom(1.0);
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ zoom level ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
   */
  public setZoom(zoomLevel: number): void {
    if (this.isDestroyed) return;

    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î zoom level ‡∏ï‡∏≤‡∏° min/max
    const clampedZoom = Math.max(
      this.state.minZoom,
      Math.min(this.state.maxZoom, zoomLevel)
    );

    // ‡∏ñ‡πâ‡∏≤ zoom level ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    if (Math.abs(clampedZoom - this.state.currentZoom) < 0.001) {
      return;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state
    this.state.currentZoom = clampedZoom;

    // Apply zoom ‡πÑ‡∏õ‡∏¢‡∏±‡∏á PixiJS stage (ENHANCE existing stage, don't replace)
    if (this.config.smoothTransitions) {
      this.applyZoomWithTransition(clampedZoom);
    } else {
      this.applyZoomImmediate(clampedZoom);
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
    this.updateUI();

    // Dispatch custom event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö components ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    this.dispatchZoomEvent(clampedZoom);
  }

  /**
   * Apply zoom ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ transition
   */
  private applyZoomImmediate(zoomLevel: number): void {
    // ENHANCE existing PixiJS stage scale (‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç existing stage)
    this.pixiApp.stage.scale.set(zoomLevel);
    
    // ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏ï‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ zoom ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏±‡∏ö text resolution
    this.updateTextResolution(zoomLevel);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï selection indicators ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    this.updateSelectionIndicators();
  }

  /**
   * Apply zoom ‡∏û‡∏£‡πâ‡∏≠‡∏° smooth transition
   */
  private applyZoomWithTransition(targetZoom: number): void {
    if (this.state.isTransitioning) return;

    this.state.isTransitioning = true;
    const startZoom = this.pixiApp.stage.scale.x;
    const duration = 200; // ms
    const startTime = performance.now();

    const animate = (currentTime: number) => {
      if (this.isDestroyed) {
        this.state.isTransitioning = false;
        return;
      }

      const elapsed = currentTime - startTime;
      const progress = Math.min(elapsed / duration, 1);
      
      // Easing function (ease-out)
      const easeOut = 1 - Math.pow(1 - progress, 3);
      
      // Interpolate zoom level
      const currentZoom = startZoom + (targetZoom - startZoom) * easeOut;
      
      // Apply to stage
      this.pixiApp.stage.scale.set(currentZoom);
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï text resolution ‡πÅ‡∏•‡∏∞ selection indicators ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á animation
      if (progress === 1) {
        this.updateTextResolution(currentZoom);
        this.updateSelectionIndicators();
      }

      if (progress < 1) {
        requestAnimationFrame(animate);
      } else {
        this.state.isTransitioning = false;
      }
    };

    requestAnimationFrame(animate);
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI elements
   */
  private updateUI(): void {
    if (this.isDestroyed) return;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï button states
    this.zoomInBtn.disabled = this.state.currentZoom >= this.state.maxZoom;
    this.zoomOutBtn.disabled = this.state.currentZoom <= this.state.minZoom;
    this.resetBtn.disabled = Math.abs(this.state.currentZoom - 1.0) < 0.001;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï zoom display
    if (this.zoomDisplay) {
      const percentage = Math.round(this.state.currentZoom * 100);
      this.zoomDisplay.textContent = `${percentage}%`;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï CSS classes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö styling
    this.container.classList.toggle('at-min-zoom', this.state.currentZoom <= this.state.minZoom);
    this.container.classList.toggle('at-max-zoom', this.state.currentZoom >= this.state.maxZoom);
    this.container.classList.toggle('at-default-zoom', Math.abs(this.state.currentZoom - 1.0) < 0.001);
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á zoom controls
   */
  private updatePosition(): void {
    if (this.isDestroyed) return;
    
    // CSS ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô data-position attribute
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dynamic positioning
  }

  /**
   * Dispatch custom zoom event
   */
  private dispatchZoomEvent(zoomLevel: number): void {
    const event = new CustomEvent('zoom-changed', {
      detail: {
        zoomLevel,
        percentage: Math.round(zoomLevel * 100),
        isAtMin: zoomLevel <= this.state.minZoom,
        isAtMax: zoomLevel >= this.state.maxZoom,
        isAtDefault: Math.abs(zoomLevel - 1.0) < 0.001
      }
    });
    
    document.dispatchEvent(event);
  }

  /**
   * ‡πÑ‡∏î‡πâ zoom level ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   */
  public getCurrentZoom(): number {
    return this.state.currentZoom;
  }

  /**
   * ‡πÑ‡∏î‡πâ zoom state ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  public getZoomState(): Readonly<ZoomState> {
    return { ...this.state };
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ zoom limits
   */
  public setZoomLimits(minZoom: number, maxZoom: number): void {
    if (this.isDestroyed) return;

    this.state.minZoom = Math.max(0.1, minZoom);
    this.state.maxZoom = Math.min(10, maxZoom);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö current zoom ‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (this.state.currentZoom < this.state.minZoom) {
      this.setZoom(this.state.minZoom);
    } else if (this.state.currentZoom > this.state.maxZoom) {
      this.setZoom(this.state.maxZoom);
    } else {
      this.updateUI();
    }
  }

  /**
   * ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î mouse wheel zoom
   */
  public setMouseWheelEnabled(enabled: boolean): void {
    if (this.isDestroyed) return;

    const canvas = this.pixiApp.canvas;
    if (!canvas) return;

    if (enabled && !this.config.enableMouseWheel) {
      canvas.addEventListener('wheel', this.wheelHandler, { passive: false });
      this.config.enableMouseWheel = true;
    } else if (!enabled && this.config.enableMouseWheel) {
      canvas.removeEventListener('wheel', this.wheelHandler);
      this.config.enableMouseWheel = false;
    }
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô zoom controls
   */
  public setVisible(visible: boolean): void {
    if (this.isDestroyed) return;
    
    this.container.style.display = visible ? 'flex' : 'none';
  }

  /**
   * ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏ï‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ zoom ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏±‡∏ö text resolution
   * ‡∏ï‡∏≤‡∏° PixiJS documentation: https://pixijs.download/release/docs/text.html
   */
  private updateTextResolution(zoomLevel: number): void {
    if (this.isDestroyed) return;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì resolution ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏° zoom level
    // ‡πÉ‡∏ä‡πâ resolution ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ zoom in ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏Ñ‡∏°‡∏ä‡∏±‡∏î
    const targetResolution = Math.max(1, Math.min(4, zoomLevel * 2));

    // ‡∏´‡∏≤ Text objects ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô stage ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï resolution
    this.traverseAndUpdateTextResolution(this.pixiApp.stage, targetResolution);
  }

  /**
   * Traverse ‡∏ú‡πà‡∏≤‡∏ô container hierarchy ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï text resolution
   */
  private traverseAndUpdateTextResolution(container: any, resolution: number): void {
    if (!container || !container.children) return;

    container.children.forEach((child: any) => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Text object ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (child.text !== undefined && typeof child.text === 'string') {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï resolution ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Text objects
        if (child.resolution !== resolution) {
          child.resolution = resolution;
          // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ re-render text ‡∏î‡πâ‡∏ß‡∏¢ resolution ‡πÉ‡∏´‡∏°‡πà
          if (child.updateText) {
            child.updateText();
          } else if (child._updateText) {
            child._updateText();
          }
        }
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô EditableLabel ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏à‡∏≤‡∏Å createEditableLabel)
      if (child.updateTextResolution && typeof child.updateTextResolution === 'function') {
        child.updateTextResolution(resolution);
      }
      
      // Recursively traverse children
      if (child.children && child.children.length > 0) {
        this.traverseAndUpdateTextResolution(child, resolution);
      }
    });
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï selection indicators ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ zoom
   */
  private updateSelectionIndicators(): void {
    if (this.isDestroyed) return;

    // Import selectionManager ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å updateAllIndicators
    // ‡πÉ‡∏ä‡πâ dynamic import ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á circular dependency
    import('../utils/selectionManager').then(({ selectionManager }) => {
      if (selectionManager && selectionManager.updateAllIndicators) {
        selectionManager.updateAllIndicators();
      }
    }).catch(error => {
      console.warn('Failed to update selection indicators:', error);
    });
  }

  /**
   * ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ ZoomControls ‡πÅ‡∏•‡∏∞‡∏•‡∏ö event listeners
   */
  public destroy(): void {
    if (this.isDestroyed) return;

    this.isDestroyed = true;

    // ‡∏•‡∏ö event listeners
    const canvas = this.pixiApp.canvas;
    if (canvas && this.config.enableMouseWheel) {
      canvas.removeEventListener('wheel', this.wheelHandler);
    }
    
    document.removeEventListener('keydown', this.keyHandler);
    window.removeEventListener('resize', this.resizeHandler);

    // ‡∏•‡∏ö DOM elements
    if (this.container && this.container.parentNode) {
      this.container.parentNode.removeChild(this.container);
    }

    console.log('üóëÔ∏è ZoomControls destroyed and cleaned up');
  }
}