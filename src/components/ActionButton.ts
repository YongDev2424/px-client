// src/components/ActionButton.ts

import { Container, Graphics, FederatedPointerEvent, Circle } from 'pixi.js';

/**
 * ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á Action Button
 */
export type ActionButtonType = 'edit' | 'delete';

/**
 * ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ActionButton
 */
export interface ActionButtonOptions {
  size?: number;                    // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° (default: 32)
  backgroundColor?: number;         // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° (default: 0xffffff)
  borderColor?: number;             // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° (default: 0x666666)
  iconColor?: number;               // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô (default: 0x333333)
  hoverBackgroundColor?: number;    // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover (default: 0xf0f0f0)
  hoverScale?: number;              // ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover (default: 1.1)
}

/**
 * Internal state interface for ActionButton
 */
interface ActionButtonState {
  buttonGraphics: Graphics;
  iconGraphics: Graphics;
  buttonType: ActionButtonType;
  options: Required<ActionButtonOptions>;
  isHovered: boolean;
  clickHandler?: (event: FederatedPointerEvent) => void;
}

/**
 * ‡πÑ‡∏î‡πâ‡∏™‡∏µ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏∏‡πà‡∏°
 */
function getDefaultIconColor(type: ActionButtonType): number {
  switch (type) {
    case 'edit':
      return 0x007AFF; // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
    case 'delete':
      return 0xFF3B30; // ‡∏™‡∏µ‡πÅ‡∏î‡∏á
    default:
      return 0x333333; // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Graphics ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° (‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á)
 */
function createButtonGraphics(container: Container, state: ActionButtonState): void {
  state.buttonGraphics = new Graphics();
  container.addChild(state.buttonGraphics);
  drawButton(state);
}

/**
 * ‡∏ß‡∏≤‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 */
function drawButton(state: ActionButtonState): void {
  const { size, backgroundColor, borderColor, hoverBackgroundColor } = state.options;
  const radius = size / 2;
  const currentBgColor = state.isHovered ? hoverBackgroundColor : backgroundColor;

  state.buttonGraphics.clear();
  
  // ‡∏ß‡∏≤‡∏î‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
  state.buttonGraphics
    .fill(currentBgColor)
    .circle(0, 0, radius)
    .fill();

  // ‡∏ß‡∏≤‡∏î‡∏Ç‡∏≠‡∏ö
  state.buttonGraphics
    .circle(0, 0, radius)
    .stroke({ width: 2, color: borderColor });
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Graphics ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
 */
function createIconGraphics(container: Container, state: ActionButtonState): void {
  state.iconGraphics = new Graphics();
  container.addChild(state.iconGraphics);
  drawIcon(state);
}

/**
 * ‡∏ß‡∏≤‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏∏‡πà‡∏°
 */
function drawIcon(state: ActionButtonState): void {
  const { size, iconColor } = state.options;
  const iconSize = size * 0.4; // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î 40% ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°

  state.iconGraphics.clear();

  switch (state.buttonType) {
    case 'edit':
      drawEditIcon(state.iconGraphics, iconSize, iconColor);
      break;
    case 'delete':
      drawDeleteIcon(state.iconGraphics, iconSize, iconColor);
      break;
  }
}

/**
 * ‡∏ß‡∏≤‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏î‡∏¥‡∏ô‡∏™‡∏≠ (Edit)
 */
function drawEditIcon(graphics: Graphics, size: number, color: number): void {
  const halfSize = size / 2;
  
  // ‡∏ß‡∏≤‡∏î‡∏î‡∏¥‡∏ô‡∏™‡∏≠‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
  graphics
    // ‡∏î‡πâ‡∏≤‡∏°‡∏î‡∏¥‡∏ô‡∏™‡∏≠
    .moveTo(-halfSize * 0.8, halfSize * 0.8)
    .lineTo(halfSize * 0.8, -halfSize * 0.8)
    .stroke({ width: 2, color: color })
    
    // ‡∏´‡∏±‡∏ß‡∏î‡∏¥‡∏ô‡∏™‡∏≠
    .moveTo(halfSize * 0.6, -halfSize * 0.6)
    .lineTo(halfSize * 0.8, -halfSize * 0.8)
    .lineTo(halfSize * 0.8, -halfSize * 0.6)
    .fill(color)
    
    // ‡∏à‡∏∏‡∏î‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≤‡∏¢‡∏î‡∏¥‡∏ô‡∏™‡∏≠
    .circle(-halfSize * 0.6, halfSize * 0.6, 1.5)
    .fill(color);
}

/**
 * ‡∏ß‡∏≤‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞ (Delete)
 */
function drawDeleteIcon(graphics: Graphics, size: number, color: number): void {
  const halfSize = size / 2;
  
  // ‡∏ß‡∏≤‡∏î‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
  graphics
    // ‡∏ù‡∏≤‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞
    .rect(-halfSize * 0.8, -halfSize * 0.8, size * 1.6, size * 0.2)
    .fill(color)
    
    // ‡∏ï‡∏±‡∏ß‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞
    .rect(-halfSize * 0.6, -halfSize * 0.6, size * 1.2, size * 1.2)
    .stroke({ width: 2, color: color })
    
    // ‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏ô ‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞
    .moveTo(-halfSize * 0.2, -halfSize * 0.4)
    .lineTo(-halfSize * 0.2, halfSize * 0.4)
    .stroke({ width: 1.5, color: color })
    
    .moveTo(0, -halfSize * 0.4)
    .lineTo(0, halfSize * 0.4)
    .stroke({ width: 1.5, color: color })
    
    .moveTo(halfSize * 0.2, -halfSize * 0.4)
    .lineTo(halfSize * 0.2, halfSize * 0.4)
    .stroke({ width: 1.5, color: color });
}

/**
 * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Handlers
 */
function setupEvents(container: Container, state: ActionButtonState): void {
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ interact ‡πÑ‡∏î‡πâ
  container.eventMode = 'static';
  container.cursor = 'pointer';
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ hit area ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏°
  const radius = state.options.size / 2;
  container.hitArea = new Circle(0, 0, radius);

  // Hover events
  container.on('pointerover', (event: FederatedPointerEvent) => handlePointerOver(container, state, event));
  container.on('pointerout', (event: FederatedPointerEvent) => handlePointerOut(container, state, event));

  // Click event
  container.on('pointerdown', (event: FederatedPointerEvent) => handleClick(state, event));
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Pointer Over Event (Hover ‡πÄ‡∏Ç‡πâ‡∏≤)
 */
function handlePointerOver(container: Container, state: ActionButtonState, event: FederatedPointerEvent): void {
  event.stopPropagation();
  
  if (!state.isHovered) {
    state.isHovered = true;
    animateHoverIn(container, state);
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Pointer Out Event (Hover ‡∏≠‡∏≠‡∏Å)
 */
function handlePointerOut(container: Container, state: ActionButtonState, event: FederatedPointerEvent): void {
  event.stopPropagation();
  
  if (state.isHovered) {
    state.isHovered = false;
    animateHoverOut(container, state);
  }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Click Event
 */
function handleClick(state: ActionButtonState, event: FederatedPointerEvent): void {
  event.stopPropagation();
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å click handler ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  if (state.clickHandler) {
    state.clickHandler(event);
  }

  console.log(`üñ±Ô∏è ‡∏Ñ‡∏•‡∏¥‡∏Å ActionButton ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${state.buttonType}`);
}

/**
 * Animation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Hover ‡πÄ‡∏Ç‡πâ‡∏≤
 */
function animateHoverIn(container: Container, state: ActionButtonState): void {
  // ‡∏ß‡∏≤‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ hover
  drawButton(state);
  
  // Scale animation
  const targetScale = state.options.hoverScale;
  const duration = 150;
  const startScale = container.scale.x;
  const startTime = Date.now();

  const animate = () => {
    const elapsed = Date.now() - startTime;
    const progress = Math.min(elapsed / duration, 1);
    
    // Ease-out animation
    const easeProgress = 1 - Math.pow(1 - progress, 3);
    const currentScale = startScale + (targetScale - startScale) * easeProgress;
    
    container.scale.set(currentScale);
    
    if (progress < 1) {
      requestAnimationFrame(animate);
    }
  };

  animate();
}

/**
 * Animation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Hover ‡∏≠‡∏≠‡∏Å
 */
function animateHoverOut(container: Container, state: ActionButtonState): void {
  // ‡∏ß‡∏≤‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡∏õ‡∏Å‡∏ï‡∏¥
  drawButton(state);
  
  // Scale animation ‡∏Å‡∏•‡∏±‡∏ö
  const targetScale = 1.0;
  const duration = 150;
  const startScale = container.scale.x;
  const startTime = Date.now();

  const animate = () => {
    const elapsed = Date.now() - startTime;
    const progress = Math.min(elapsed / duration, 1);
    
    // Ease-out animation
    const easeProgress = 1 - Math.pow(1 - progress, 3);
    const currentScale = startScale + (targetScale - startScale) * easeProgress;
    
    container.scale.set(currentScale);
    
    if (progress < 1) {
      requestAnimationFrame(animate);
    }
  };

  animate();
}

/**
 * Function-based ActionButton factory
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á ActionButton ‡∏û‡∏£‡πâ‡∏≠‡∏° internal state ‡πÅ‡∏•‡∏∞ methods
 */
export function createActionButton(type: ActionButtonType, options: ActionButtonOptions = {}): Container & {
  getButtonType: () => ActionButtonType;
  setClickHandler: (handler: (event: FederatedPointerEvent) => void) => void;
  destroy: () => void;
} {
  const container = new Container();
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö button
  const state: ActionButtonState = {
    buttonGraphics: new Graphics(),
    iconGraphics: new Graphics(),
    buttonType: type,
    options: {
      size: 32,
      backgroundColor: 0xffffff,
      borderColor: 0x666666,
      iconColor: getDefaultIconColor(type),
      hoverBackgroundColor: 0xf0f0f0,
      hoverScale: 1.1,
      ...options
    },
    isHovered: false,
    clickHandler: undefined
  };

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á graphics components
  createButtonGraphics(container, state);
  createIconGraphics(container, state);
  setupEvents(container, state);

  console.log(`üîò ‡∏™‡∏£‡πâ‡∏≤‡∏á ActionButton ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${type}`);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° methods ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö container
  return Object.assign(container, {
    getButtonType: () => state.buttonType,
    
    setClickHandler: (handler: (event: FederatedPointerEvent) => void) => {
      state.clickHandler = handler;
    },
    
    destroy: () => {
      // ‡∏•‡∏ö children ‡πÅ‡∏•‡∏∞ destroy graphics
      state.buttonGraphics?.destroy();
      state.iconGraphics?.destroy();
      
      console.log(`üóëÔ∏è ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ ActionButton ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${state.buttonType}`);
      
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å parent destroy
      container.destroy();
    }
  });
}

/**
 * ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ (Edit, Delete)
 * ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ hover effects
 * 
 * @deprecated ‡πÉ‡∏ä‡πâ createActionButton ‡πÅ‡∏ó‡∏ô - function-based approach
 */
export class ActionButton extends Container {
  private buttonGraphics!: Graphics;
  private iconGraphics!: Graphics;
  private buttonType: ActionButtonType;
  private options: Required<ActionButtonOptions>;
  private isHovered: boolean = false;
  private clickHandler?: (event: FederatedPointerEvent) => void;

  constructor(type: ActionButtonType, options: ActionButtonOptions = {}) {
    super();

    this.buttonType = type;
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default options
    this.options = {
      size: 32,
      backgroundColor: 0xffffff,
      borderColor: 0x666666,
      iconColor: getDefaultIconColor(type),
      hoverBackgroundColor: 0xf0f0f0,
      hoverScale: 1.1,
      ...options
    };

    this.createButtonGraphics();
    this.createIconGraphics();
    this.setupEvents();

    console.log(`üîò ‡∏™‡∏£‡πâ‡∏≤‡∏á ActionButton ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${type}`);
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏™‡∏µ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏∏‡πà‡∏°
   */
  private getDefaultIconColor(type: ActionButtonType): number {
    return getDefaultIconColor(type);
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á Graphics ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° (‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á)
   */
  private createButtonGraphics(): void {
    const state = this.getState();
    createButtonGraphics(this, state);
    this.buttonGraphics = state.buttonGraphics;
  }

  /**
   * ‡∏ß‡∏≤‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   */
  private drawButton(): void {
    const state = this.getState();
    drawButton(state);
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á Graphics ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
   */
  private createIconGraphics(): void {
    const state = this.getState();
    createIconGraphics(this, state);
    this.iconGraphics = state.iconGraphics;
  }

  /**
   * ‡∏ß‡∏≤‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏∏‡πà‡∏°
   */
  private drawIcon(): void {
    const state = this.getState();
    drawIcon(state);
  }

  /**
   * ‡πÑ‡∏î‡πâ state object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö function calls
   */
  private getState(): ActionButtonState {
    return {
      buttonGraphics: this.buttonGraphics,
      iconGraphics: this.iconGraphics,
      buttonType: this.buttonType,
      options: this.options,
      isHovered: this.isHovered,
      clickHandler: this.clickHandler
    };
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Handlers
   */
  private setupEvents(): void {
    const state = this.getState();
    setupEvents(this, state);
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Pointer Over Event (Hover ‡πÄ‡∏Ç‡πâ‡∏≤)
   */
  private handlePointerOver(event: FederatedPointerEvent): void {
    const state = this.getState();
    handlePointerOver(this, state, event);
    this.isHovered = state.isHovered;
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Pointer Out Event (Hover ‡∏≠‡∏≠‡∏Å)
   */
  private handlePointerOut(event: FederatedPointerEvent): void {
    const state = this.getState();
    handlePointerOut(this, state, event);
    this.isHovered = state.isHovered;
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Click Event
   */
  private handleClick(event: FederatedPointerEvent): void {
    const state = this.getState();
    handleClick(state, event);
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Click Handler
   */
  public setClickHandler(handler: (event: FederatedPointerEvent) => void): void {
    this.clickHandler = handler;
  }

  /**
   * Animation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Hover ‡πÄ‡∏Ç‡πâ‡∏≤
   */
  private animateHoverIn(): void {
    const state = this.getState();
    animateHoverIn(this, state);
  }

  /**
   * Animation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Hover ‡∏≠‡∏≠‡∏Å
   */
  private animateHoverOut(): void {
    const state = this.getState();
    animateHoverOut(this, state);
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°
   */
  public getButtonType(): ActionButtonType {
    return this.buttonType;
  }

  /**
   * ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ component ‡πÅ‡∏•‡∏∞ cleanup resources
   */
  public destroy(): void {
    // ‡∏•‡∏ö children ‡πÅ‡∏•‡∏∞ destroy graphics
    this.buttonGraphics?.destroy();
    this.iconGraphics?.destroy();
    
    console.log(`üóëÔ∏è ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ ActionButton ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${this.buttonType}`);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å parent destroy
    super.destroy();
  }
}