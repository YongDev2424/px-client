// src/components/C4BoxEnhancer.ts

import { Container, Graphics } from 'pixi.js';
import { DEFAULT_STYLE_OPTIONS, C4ThemeHelper } from '../utils/C4Themes';
import type { C4StyleOptions } from '../utils/C4Themes';

/**
 * C4BoxEnhancer - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö C4Box ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
 * ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏° (Additive Approach)
 * 
 * ‡∏ï‡∏≤‡∏° Requirements 6.1-6.6:
 * - Rounded rectangle shapes with shadows and borders
 * - Level-specific colors (Level 1-4)
 * - Icon system for C4 model standards
 * - Text readability improvements
 * - Hover and selection state enhancements
 */
export class C4BoxEnhancer {

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö C4Box ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
   * @param c4Box - Container ‡∏Ç‡∏≠‡∏á C4Box ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
   * @param options - ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡πÑ‡∏ï‡∏•‡πå
   * @returns Container ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏î‡∏¥‡∏° + enhancements)
   */
  static enhanceExistingBox(c4Box: Container, options?: C4StyleOptions): Container {
    const finalOptions = { ...DEFAULT_STYLE_OPTIONS, ...options };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ enhanced styling ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!finalOptions.enableEnhancedStyling) {
      return c4Box; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ original box ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ enhancement
    }

    console.log('üé® Enhancing C4Box with level:', finalOptions.level);

    // ‡πÑ‡∏î‡πâ theme ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö level ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    const theme = C4ThemeHelper.getThemeForLevel(finalOptions.level || 'level1');

    // ‡πÑ‡∏î‡πâ existing graphics (rectangle ‡∏´‡∏•‡∏±‡∏Å)
    const existingGraphics = c4Box.children.find(child => child instanceof Graphics) as Graphics;
    if (!existingGraphics) {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Graphics component ‡πÉ‡∏ô C4Box');
      return c4Box;
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° enhancements ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    if (finalOptions.enableRoundedCorners) {
      this.addRoundedCorners(c4Box, existingGraphics, theme, finalOptions);
    }

    if (finalOptions.enableShadows) {
      this.addShadowEffect(c4Box, theme, finalOptions);
    }

    this.addLevelSpecificColors(c4Box, existingGraphics, theme);

    // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ö‡∏ô Node ‡πÅ‡∏•‡πâ‡∏ß
    // if (finalOptions.enableIcons) {
    //   this.addIconSystem(c4Box, theme, finalOptions);
    // }

    this.enhanceTextReadability(c4Box, theme);
    this.addStateEnhancements(c4Box, theme);

    // ‡πÄ‡∏Å‡πá‡∏ö enhancement metadata
    (c4Box as any).enhancementData = {
      isEnhanced: true,
      level: finalOptions.level,
      theme: theme,
      options: finalOptions
    };

    console.log('‚úÖ C4Box enhancement completed');
    return c4Box;
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° rounded corners ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö existing graphics
   */
  private static addRoundedCorners(
    _container: Container,
    existingGraphics: Graphics,
    _theme: any,
    options: C4StyleOptions
  ): void {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á rounded rectangle ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà existing rectangle
    const width = 200; // ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å createC4Box
    const height = 100;
    const radius = options.cornerRadius || 8;

    // ‡∏•‡πâ‡∏≤‡∏á existing graphics ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ rounded corners (outlined style)
    existingGraphics.clear();
    existingGraphics
      .roundRect(0, 0, width, height, radius)
      .fill(0x1e1e1e) // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö canvas
      .stroke({ width: 2, color: 0x999999 }); // ‡∏Ç‡∏≠‡∏ö‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≤‡∏ß

    console.log('üîÑ Added rounded corners with radius:', radius);
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏á‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö container
   */
  private static addShadowEffect(
    container: Container,
    theme: any,
    options: C4StyleOptions
  ): void {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á shadow graphics
    const shadowGraphics = new Graphics();
    const width = 200;
    const height = 100;
    const radius = options.cornerRadius || 8;
    const shadowOffset = options.shadowOffset || { x: 2, y: 2 };

    // ‡∏ß‡∏≤‡∏î‡πÄ‡∏á‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
    shadowGraphics
      .fill({ color: theme.shadowColor, alpha: 0.3 })
      .roundRect(
        shadowOffset.x,
        shadowOffset.y,
        width,
        height,
        radius
      )
      .fill();

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏≤‡πÄ‡∏õ‡πá‡∏ô child ‡πÅ‡∏£‡∏Å (‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á)
    container.addChildAt(shadowGraphics, 0);

    // ‡πÄ‡∏Å‡πá‡∏ö reference ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
    (container as any).shadowGraphics = shadowGraphics;

    console.log('üå´Ô∏è Added shadow effect');
  }

  /**
   * ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ C4 level
   */
  private static addLevelSpecificColors(
    container: Container,
    existingGraphics: Graphics,
    theme: any
  ): void {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡∏Ç‡∏≠‡∏á existing graphics
    existingGraphics.tint = 0xFFFFFF; // Reset tint ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏µ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏µ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ fallback
    const originalColor = (container as any).nodeData?.boxColor || 0x4A90E2;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï metadata ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡πÉ‡∏´‡∏°‡πà
    if ((container as any).nodeData) {
      (container as any).nodeData.originalColor = originalColor;
      (container as any).nodeData.enhancedColor = theme.primaryColor;
      (container as any).nodeData.level = theme;
    }

    console.log('üé® Applied level-specific colors for theme:', theme);
  }

  // ‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô addIconSystem - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ö‡∏ô Node ‡πÅ‡∏•‡πâ‡∏ß

  /**
   * ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
   */
  private static enhanceTextReadability(container: Container, theme: any): void {
    // ‡∏´‡∏≤ existing label
    const existingLabel = (container as any).nodeLabel;
    if (!existingLabel) {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö label element ‡πÉ‡∏ô C4Box');
      return;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö theme
    if (existingLabel.style) {
      existingLabel.style.fill = theme.textColor;

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° text shadow ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
      existingLabel.style.dropShadow = {
        color: theme.shadowColor,
        alpha: 0.5,
        angle: Math.PI / 4,
        blur: 2,
        distance: 1
      };

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö contrast ratio
      const hasGoodContrast = C4ThemeHelper.checkContrastRatio(
        theme.primaryColor,
        theme.textColor
      );

      if (!hasGoodContrast) {
        console.warn('‚ö†Ô∏è Text contrast ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö WCAG AA');
      }
    }

    console.log('üìù Enhanced text readability');
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° hover ‡πÅ‡∏•‡∏∞ selection state enhancements
   */
  private static addStateEnhancements(container: Container, _theme: any): void {
    // ‡πÄ‡∏Å‡πá‡∏ö original event handlers (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
    // const originalPointerOver = container.listeners('pointerover');
    // const originalPointerOut = container.listeners('pointerout');

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° enhanced hover effects (outlined style)
    container.on('pointerover', () => {
      const existingGraphics = container.children.find(child => child instanceof Graphics) as Graphics;
      if (existingGraphics) {
        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ hover (outlined style)
        existingGraphics.clear();
        existingGraphics
          .roundRect(0, 0, 200, 100, 8)
          .fill(0x1e1e1e) // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö canvas
          .stroke({ width: 2, color: 0xFFFFFF }); // ‡∏Ç‡∏≠‡∏ö‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover
      }
    });

    container.on('pointerout', () => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å select ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const isSelected = (container as any).nodeData?.isSelected;
      const borderColor = isSelected ? 0x4fc3f7 : 0x999999; // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠ select, ‡πÄ‡∏ó‡∏≤‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≤‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥

      const existingGraphics = container.children.find(child => child instanceof Graphics) as Graphics;
      if (existingGraphics) {
        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏î‡∏¥‡∏° (outlined style)
        existingGraphics.clear();
        existingGraphics
          .roundRect(0, 0, 200, 100, 8)
          .fill(0x1e1e1e) // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö canvas
          .stroke({ width: 2, color: borderColor });
      }
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° selection state enhancement
    const originalSelectHandler = (container as any).selectHandler;
    (container as any).selectHandler = () => {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å original handler ‡∏Å‡πà‡∏≠‡∏ô
      if (originalSelectHandler) {
        originalSelectHandler();
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° visual feedback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö selection (outlined style)
      const existingGraphics = container.children.find(child => child instanceof Graphics) as Graphics;
      if (existingGraphics) {
        existingGraphics.clear();
        existingGraphics
          .roundRect(0, 0, 200, 100, 8)
          .fill(0x1e1e1e) // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö canvas
          .stroke({ width: 3, color: 0x4fc3f7 }); // ‡∏Ç‡∏≠‡∏ö‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏´‡∏ô‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ select
      }
    };

    console.log('üéØ Added state enhancements (hover/select)');
  }

  /**
   * ‡∏•‡∏ö enhancements ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô original state
   */
  static removeEnhancements(container: Container): Container {
    const enhancementData = (container as any).enhancementData;
    if (!enhancementData?.isEnhanced) {
      return container; // ‡πÑ‡∏°‡πà‡∏°‡∏µ enhancements ‡πÉ‡∏´‡πâ‡∏•‡∏ö
    }

    // ‡∏•‡∏ö shadow graphics
    const shadowGraphics = (container as any).shadowGraphics;
    if (shadowGraphics && shadowGraphics.parent) {
      shadowGraphics.parent.removeChild(shadowGraphics);
    }

    // ‡∏•‡∏ö icon element (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ - ‡πÅ‡∏ï‡πà‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß)
    const iconElement = (container as any).iconElement;
    if (iconElement && iconElement.parent) {
      iconElement.parent.removeChild(iconElement);
    }

    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ graphics ‡πÄ‡∏õ‡πá‡∏ô outlined style ‡πÄ‡∏î‡∏¥‡∏°
    const existingGraphics = container.children.find(child => child instanceof Graphics) as Graphics;

    if (existingGraphics) {
      existingGraphics.clear();
      existingGraphics
        .rect(0, 0, 200, 100)
        .fill(0x1e1e1e) // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö canvas
        .stroke({ width: 2, color: 0x999999 }); // ‡∏Ç‡∏≠‡∏ö‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≤‡∏ß
    }

    // ‡∏•‡∏ö enhancement metadata
    delete (container as any).enhancementData;
    delete (container as any).shadowGraphics;
    delete (container as any).iconElement;

    console.log('üîÑ Removed all enhancements, restored to original state');
    return container;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ container ‡∏°‡∏µ enhancements ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  static isEnhanced(container: Container): boolean {
    return !!(container as any).enhancementData?.isEnhanced;
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï enhancement level ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö container ‡∏ó‡∏µ‡πà‡∏°‡∏µ enhancements ‡πÅ‡∏•‡πâ‡∏ß
   */
  static updateEnhancementLevel(
    container: Container,
    newLevel: 'level1' | 'level2' | 'level3' | 'level4'
  ): Container {
    if (!this.isEnhanced(container)) {
      console.warn('‚ö†Ô∏è Container ‡πÑ‡∏°‡πà‡∏°‡∏µ enhancements ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï');
      return container;
    }

    const currentOptions = (container as any).enhancementData?.options;
    const newOptions = { ...currentOptions, level: newLevel };

    // ‡∏•‡∏ö enhancements ‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
    this.removeEnhancements(container);
    return this.enhanceExistingBox(container, newOptions);
  }
}