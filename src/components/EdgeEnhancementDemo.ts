// src/components/EdgeEnhancementDemo.ts

import { Application, Container } from 'pixi.js';
import { createEdge, createEnhancedEdge, enhanceExistingEdge } from './Edge';
import { createC4Box } from './C4Box';
import type { EdgeStyleOptions } from '../utils/EdgeThemes';

/**
 * EdgeEnhancementDemo - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Edge
 * ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Edge ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
 */
export class EdgeEnhancementDemo {
  private app: Application;
  private demoContainer: Container;
  private sourceNodes: Container[] = [];
  private targetNodes: Container[] = [];
  private edges: Container[] = [];

  constructor(app: Application) {
    this.app = app;
    this.demoContainer = new Container();
    this.app.stage.addChild(this.demoContainer);
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Edge ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
   */
  public async createComparisonDemo(): Promise<void> {
    console.log('üé® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Edge Enhancement');

    // ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°
    this.clearDemo();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á nodes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    await this.createDemoNodes();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á edges ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
    await this.createVariousEdges();

    console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á nodes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
   */
  private async createDemoNodes(): Promise<void> {
    const nodeConfigs = [
      { name: 'User', color: 0x4A90E2, x: 100, y: 100 },
      { name: 'System A', color: 0x7ED321, x: 400, y: 100 },
      { name: 'Database', color: 0xF5A623, x: 100, y: 300 },
      { name: 'API Gateway', color: 0xBD10E0, x: 400, y: 300 },
      { name: 'Service B', color: 0x50E3C2, x: 700, y: 200 }
    ];

    for (const config of nodeConfigs) {
      const node = createC4Box(this.app, config.name, config.color);
      node.x = config.x;
      node.y = config.y;
      
      this.demoContainer.addChild(node);
      
      if (this.sourceNodes.length < 3) {
        this.sourceNodes.push(node);
      } else {
        this.targetNodes.push(node);
      }
    }

    console.log(`üì¶ ‡∏™‡∏£‡πâ‡∏≤‡∏á ${nodeConfigs.length} nodes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö`);
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á edges ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á
   */
  private async createVariousEdges(): Promise<void> {
    if (this.sourceNodes.length < 2 || this.targetNodes.length < 2) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ nodes ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á edges');
      return;
    }

    // 1. Edge ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏°‡∏µ enhancement)
    const standardEdge = createEdge(
      this.sourceNodes[0],
      this.targetNodes[0],
      'Standard Edge',
      0x000000,
      2,
      true,
      'right',
      'left',
      false // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ enhancement
    );
    this.demoContainer.addChild(standardEdge);
    this.edges.push(standardEdge);
    console.log('üìè ‡∏™‡∏£‡πâ‡∏≤‡∏á Standard Edge');

    // 2. Enhanced Edge ‡πÅ‡∏ö‡∏ö default theme
    const defaultEnhancedEdge = createEnhancedEdge(
      this.sourceNodes[1],
      this.targetNodes[1],
      'Enhanced Default',
      'default',
      'right',
      'left'
    );
    this.demoContainer.addChild(defaultEnhancedEdge);
    this.edges.push(defaultEnhancedEdge);
    console.log('‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á Enhanced Edge (default theme)');

    // 3. Enhanced Edge ‡πÅ‡∏ö‡∏ö primary theme
    if (this.sourceNodes[2] && this.targetNodes[0]) {
      const primaryEnhancedEdge = createEnhancedEdge(
        this.sourceNodes[2],
        this.targetNodes[0],
        'Primary Relationship',
        'primary',
        'top',
        'bottom'
      );
      this.demoContainer.addChild(primaryEnhancedEdge);
      this.edges.push(primaryEnhancedEdge);
      console.log('üîµ ‡∏™‡∏£‡πâ‡∏≤‡∏á Enhanced Edge (primary theme)');
    }

    // 4. Enhanced Edge ‡πÅ‡∏ö‡∏ö dependency theme
    if (this.sourceNodes[0] && this.targetNodes[1]) {
      const dependencyEdge = createEnhancedEdge(
        this.sourceNodes[0],
        this.targetNodes[1],
        'Depends On',
        'dependency',
        'bottom',
        'top'
      );
      this.demoContainer.addChild(dependencyEdge);
      this.edges.push(dependencyEdge);
      console.log('üîó ‡∏™‡∏£‡πâ‡∏≤‡∏á Enhanced Edge (dependency theme)');
    }

    // 5. Retrofit enhancement - ‡πÄ‡∏û‡∏¥‡πà‡∏° enhancement ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö edge ‡πÄ‡∏î‡∏¥‡∏°
    setTimeout(async () => {
      try {
        await enhanceExistingEdge(standardEdge, 'composition');
        console.log('üîÑ ‡πÄ‡∏û‡∏¥‡πà‡∏° enhancement ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Standard Edge ‡πÅ‡∏•‡πâ‡∏ß');
      } catch (error) {
        console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° enhancement ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Standard Edge ‡πÑ‡∏î‡πâ:', error);
      }
    }, 2000); // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏° enhancement
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ custom theme
   */
  public async createCustomThemeDemo(): Promise<void> {
    console.log('üé® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Custom Theme');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á custom theme
    const customTheme: EdgeStyleOptions = {
      enableEnhancedStyling: true,
      lineStyle: {
        width: 4,
        color: 0xFF6B6B,
        alpha: 0.9,
        quality: 'high'
      },
      arrowStyle: {
        size: 16,
        width: 12,
        color: 0xFF6B6B,
        style: 'diamond',
        filled: true
      },
      labelStyle: {
        hasBackground: true,
        backgroundColor: 0xFF6B6B,
        backgroundAlpha: 1.0,
        borderColor: 0xE55555,
        borderWidth: 2,
        borderRadius: 8,
        padding: 10,
        textColor: 0xFFFFFF,
        fontSize: 14,
        fontWeight: '700',
        shadowColor: 0x000000,
        shadowBlur: 4,
        shadowOffset: { x: 2, y: 2 }
      }
    };

    if (this.sourceNodes.length >= 2 && this.targetNodes.length >= 2) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á nodes ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö custom theme demo
      const customSourceNode = createC4Box(this.app, 'Custom Source', 0xFF6B6B);
      customSourceNode.x = 100;
      customSourceNode.y = 500;
      this.demoContainer.addChild(customSourceNode);

      const customTargetNode = createC4Box(this.app, 'Custom Target', 0xFF6B6B);
      customTargetNode.x = 400;
      customTargetNode.y = 500;
      this.demoContainer.addChild(customTargetNode);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á edge ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏° custom enhancement
      const customEdge = createEdge(
        customSourceNode,
        customTargetNode,
        'Custom Styled',
        0x000000,
        2,
        true,
        'right',
        'left',
        false
      );
      this.demoContainer.addChild(customEdge);

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° custom enhancement
      try {
        const { EdgeStyler } = await import('./EdgeStyler');
        EdgeStyler.enhanceExistingEdge(customEdge, customTheme);
        console.log('‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° Custom Theme Enhancement ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } catch (error) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° Custom Theme Enhancement ‡πÑ‡∏î‡πâ:', error);
      }
    }
  }

  /**
   * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á theme switching
   */
  public async testThemeSwitching(): Promise<void> {
    console.log('üîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Theme');

    if (this.edges.length === 0) {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ edges ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö theme switching');
      return;
    }

    const themes = ['default', 'primary', 'dependency', 'composition'];
    let currentThemeIndex = 0;

    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô theme ‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    const themeInterval = setInterval(async () => {
      const themeName = themes[currentThemeIndex];
      console.log(`üé® ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô ${themeName} theme`);

      try {
        const { EdgeStyler } = await import('./EdgeStyler');
        const { getThemeForRelationship } = await import('../utils/EdgeThemes');

        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô theme ‡∏Ç‡∏≠‡∏á edge ‡πÅ‡∏£‡∏Å
        if (this.edges[0]) {
          const theme = getThemeForRelationship(themeName);
          EdgeStyler.enhanceExistingEdge(this.edges[0], theme);
        }

        currentThemeIndex = (currentThemeIndex + 1) % themes.length;

        // ‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏£‡∏ö‡∏£‡∏≠‡∏ö
        if (currentThemeIndex === 0) {
          clearInterval(themeInterval);
          console.log('‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö theme switching ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
        }
      } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô theme:', error);
        clearInterval(themeInterval);
      }
    }, 3000);
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á enhancement
   */
  public showEnhancementStats(): void {
    console.log('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Edge Enhancement:');
    
    let enhancedCount = 0;
    let standardCount = 0;

    this.edges.forEach((edge, index) => {
      const isEnhanced = !!(edge as any).enhancementData?.isEnhanced;
      if (isEnhanced) {
        enhancedCount++;
        console.log(`   Edge ${index + 1}: Enhanced ‚ú®`);
      } else {
        standardCount++;
        console.log(`   Edge ${index + 1}: Standard üìè`);
      }
    });

    console.log(`üìà ‡∏™‡∏£‡∏∏‡∏õ: Enhanced ${enhancedCount} edges, Standard ${standardCount} edges`);
  }

  /**
   * ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  public clearDemo(): void {
    this.demoContainer.removeChildren();
    this.sourceNodes = [];
    this.targetNodes = [];
    this.edges = [];
    console.log('üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß');
  }

  /**
   * ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ demo ‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
   */
  public destroy(): void {
    this.clearDemo();
    this.app.stage.removeChild(this.demoContainer);
    this.demoContainer.destroy();
    console.log('üóëÔ∏è ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ EdgeEnhancementDemo ‡πÅ‡∏•‡πâ‡∏ß');
  }
}

/**
 * Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á demo ‡πÉ‡∏ô main.ts
 */
export async function createEdgeEnhancementDemo(app: Application): Promise<EdgeEnhancementDemo> {
  const demo = new EdgeEnhancementDemo(app);
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ
  await demo.createComparisonDemo();
  
  // ‡∏£‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á custom theme demo
  setTimeout(async () => {
    await demo.createCustomThemeDemo();
  }, 1000);
  
  // ‡∏£‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏î‡∏™‡∏≠‡∏ö theme switching
  setTimeout(async () => {
    await demo.testThemeSwitching();
  }, 3000);
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
  setTimeout(() => {
    demo.showEnhancementStats();
  }, 15000);
  
  return demo;
}