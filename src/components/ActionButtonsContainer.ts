// src/components/ActionButtonsContainer.ts

import { Container, FederatedPointerEvent } from 'pixi.js';
import { createActionButton, type ActionButtonType } from './ActionButton';
import { useNodeActions } from '../composables';

/**
 * ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ActionButtonsContainer
 */
export interface ActionButtonsContainerOptions {
  buttonSize?: number;                          // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° (default: 32)
  spacing?: number;                             // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° (default: 8)
  position?: 'top' | 'bottom' | 'right';       // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö node (default: 'top')
  showAnimation?: boolean;                      // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô animation ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (default: true)
  offset?: { x: number; y: number };           // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö node (default: { x: 0, y: -16 })
  animationDuration?: number;                   // ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ animation (default: 200)
}

/**
 * Internal state interface for ActionButtonsContainer
 */
interface ActionButtonsContainerState {
  editButton: ReturnType<typeof createActionButton>;
  deleteButton: ReturnType<typeof createActionButton>;
  targetNode: Container;
  options: Required<ActionButtonsContainerOptions>;
  isVisible: boolean;
  isAnimating: boolean;
  onEditClick?: (node: Container, event: FederatedPointerEvent) => void;
  onDeleteClick?: (node: Container, event: FederatedPointerEvent) => void;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° Edit ‡πÅ‡∏•‡∏∞ Delete
 */
function createButtons(container: Container, state: ActionButtonsContainerState): void {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° Edit
  state.editButton = createActionButton('edit', {
    size: state.options.buttonSize,
    hoverScale: 1.1
  });

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° Delete
  state.deleteButton = createActionButton('delete', {
    size: state.options.buttonSize,
    hoverScale: 1.1
  });

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ click handlers
  state.editButton.setClickHandler((event) => handleEditClick(state, event));
  state.deleteButton.setClickHandler((event) => handleDeleteClick(state, event));

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô container
  container.addChild(state.editButton);
  container.addChild(state.deleteButton);
}

/**
 * ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° options
 */
function positionButtons(container: Container, state: ActionButtonsContainerState): void {
  const { buttonSize, spacing, position } = state.options;
  const totalWidth = (buttonSize * 2) + spacing;
  const halfWidth = totalWidth / 2;

  switch (position) {
    case 'top':
    case 'bottom':
      // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
      state.editButton.x = -halfWidth + (buttonSize / 2);
      state.editButton.y = 0;
      
      state.deleteButton.x = -halfWidth + buttonSize + spacing + (buttonSize / 2);
      state.deleteButton.y = 0;
      break;

    case 'right':
      // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
      state.editButton.x = 0;
      state.editButton.y = -halfWidth + (buttonSize / 2);
      
      state.deleteButton.x = 0;
      state.deleteButton.y = -halfWidth + buttonSize + spacing + (buttonSize / 2);
      break;
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á container ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö target node
  updateContainerPosition(container, state);
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á container ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö target node
 */
function updateContainerPosition(container: Container, state: ActionButtonsContainerState): void {
  const bounds = state.targetNode.getBounds();
  const { position, offset } = state.options;

  let x: number, y: number;

  switch (position) {
    case 'top':
      x = bounds.x + (bounds.width / 2) + offset.x;
      y = bounds.y + offset.y;
      break;
    case 'bottom':
      x = bounds.x + (bounds.width / 2) + offset.x;
      y = bounds.y + bounds.height - offset.y;
      break;
    case 'right':
      x = bounds.x + bounds.width - offset.x;
      y = bounds.y + (bounds.height / 2) + offset.y;
      break;
  }

  container.x = x;
  container.y = y;
}

/**
 * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà)
 */
function setupInitialState(container: Container, state: ActionButtonsContainerState): void {
  container.visible = false;
  container.alpha = 0;
  container.scale.set(0.8); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥
  state.isVisible = false;
  state.isAnimating = false;
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° animation
 */
async function showButtons(container: Container, state: ActionButtonsContainerState, animated: boolean = true): Promise<void> {
  if (state.isVisible || state.isAnimating) {
    return;
  }

  state.isVisible = true;
  container.visible = true;

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á
  updateContainerPosition(container, state);

  if (!animated || !state.options.showAnimation) {
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ animation
    container.alpha = 1;
    container.scale.set(1);
    return;
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏î‡πâ‡∏ß‡∏¢ animation
  return new Promise<void>((resolve) => {
    state.isAnimating = true;
    const duration = state.options.animationDuration;
    const startTime = Date.now();
    const startAlpha = container.alpha;
    const startScale = container.scale.x;

    const animate = () => {
      const elapsed = Date.now() - startTime;
      const progress = Math.min(elapsed / duration, 1);
      
      // Ease-out animation
      const easeProgress = 1 - Math.pow(1 - progress, 3);
      
      // Fade in
      container.alpha = startAlpha + (1 - startAlpha) * easeProgress;
      
      // Scale up
      const targetScale = 1;
      container.scale.set(startScale + (targetScale - startScale) * easeProgress);
      
      if (progress < 1) {
        requestAnimationFrame(animate);
      } else {
        state.isAnimating = false;
        resolve();
      }
    };

    animate();
  });
}

/**
 * ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° animation
 */
async function hideButtons(container: Container, state: ActionButtonsContainerState, animated: boolean = true): Promise<void> {
  if (!state.isVisible || state.isAnimating) {
    return;
  }

  state.isVisible = false;

  if (!animated || !state.options.showAnimation) {
    // ‡∏ã‡πà‡∏≠‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ animation
    container.visible = false;
    container.alpha = 0;
    container.scale.set(0.8);
    return;
  }

  // ‡∏ã‡πà‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢ animation
  return new Promise<void>((resolve) => {
    state.isAnimating = true;
    const duration = state.options.animationDuration;
    const startTime = Date.now();
    const startAlpha = container.alpha;
    const startScale = container.scale.x;

    const animate = () => {
      const elapsed = Date.now() - startTime;
      const progress = Math.min(elapsed / duration, 1);
      
      // Ease-in animation
      const easeProgress = Math.pow(progress, 3);
      
      // Fade out
      container.alpha = startAlpha * (1 - easeProgress);
      
      // Scale down
      const targetScale = 0.8;
      container.scale.set(startScale + (targetScale - startScale) * easeProgress);
      
      if (progress < 1) {
        requestAnimationFrame(animate);
      } else {
        container.visible = false;
        state.isAnimating = false;
        resolve();
      }
    };

    animate();
  });
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Edit Button Click
 */
function handleEditClick(state: ActionButtonsContainerState, event: FederatedPointerEvent): void {
  console.log('‚úèÔ∏è ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Edit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Node:', state.targetNode);
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å external handler ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  if (state.onEditClick) {
    state.onEditClick(state.targetNode, event);
  }

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ editing ‡πÉ‡∏ô NodeActions
  const nodeActions = useNodeActions(state.targetNode);
  nodeActions.startEditing();

  // ‡∏™‡πà‡∏á custom event
  dispatchActionEvent('edit', state, event);
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Delete Button Click
 */
function handleDeleteClick(state: ActionButtonsContainerState, event: FederatedPointerEvent): void {
  console.log('üóëÔ∏è ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Delete ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Node:', state.targetNode);
  
  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å external handler ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  if (state.onDeleteClick) {
    state.onDeleteClick(state.targetNode, event);
  }

  // ‡∏™‡πà‡∏á custom event
  dispatchActionEvent('delete', state, event);
}

/**
 * ‡∏™‡πà‡∏á Custom Event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°
 */
function dispatchActionEvent(action: ActionButtonType, state: ActionButtonsContainerState, event: FederatedPointerEvent): void {
  const customEvent = new CustomEvent('node-action-clicked', {
    detail: {
      node: state.targetNode,
      action: action,
      originalEvent: event,
      container: state
    }
  });
  window.dispatchEvent(customEvent);
}

/**
 * Function-based ActionButtonsContainer factory
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á ActionButtonsContainer ‡∏û‡∏£‡πâ‡∏≠‡∏° internal state ‡πÅ‡∏•‡∏∞ methods
 */
export function createActionButtonsContainer(
  targetNode: Container, 
  options: ActionButtonsContainerOptions = {}
): Container & {
  show: (animated?: boolean) => Promise<void>;
  hide: (animated?: boolean) => Promise<void>;
  getVisibility: () => boolean;
  isCurrentlyAnimating: () => boolean;
  updatePosition: () => void;
  getTargetNode: () => Container;
  setEditClickHandler: (handler: (node: Container, event: FederatedPointerEvent) => void) => void;
  setDeleteClickHandler: (handler: (node: Container, event: FederatedPointerEvent) => void) => void;
  destroy: () => void;
} {
  const container = new Container();
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö container
  const state: ActionButtonsContainerState = {
    editButton: createActionButton('edit'), // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô createButtons
    deleteButton: createActionButton('delete'), // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô createButtons
    targetNode,
    options: {
      buttonSize: 32,
      spacing: 8,
      position: 'top',
      showAnimation: true,
      offset: { x: 0, y: -16 },
      animationDuration: 200,
      ...options
    },
    isVisible: false,
    isAnimating: false,
    onEditClick: undefined,
    onDeleteClick: undefined
  };

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á components
  createButtons(container, state);
  positionButtons(container, state);
  setupInitialState(container, state);

  console.log('üîò ‡∏™‡∏£‡πâ‡∏≤‡∏á ActionButtonsContainer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Node:', targetNode);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° methods ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö container
  return Object.assign(container, {
    show: (animated: boolean = true) => showButtons(container, state, animated),
    
    hide: (animated: boolean = true) => hideButtons(container, state, animated),
    
    getVisibility: () => state.isVisible,
    
    isCurrentlyAnimating: () => state.isAnimating,
    
    updatePosition: () => updateContainerPosition(container, state),
    
    getTargetNode: () => state.targetNode,
    
    setEditClickHandler: (handler: (node: Container, event: FederatedPointerEvent) => void) => {
      state.onEditClick = handler;
    },
    
    setDeleteClickHandler: (handler: (node: Container, event: FederatedPointerEvent) => void) => {
      state.onDeleteClick = handler;
    },
    
    destroy: () => {
      // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏•‡∏≤‡∏¢
      if (state.isVisible) {
        hideButtons(container, state, false); // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ animation
      }

      // ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏õ‡∏∏‡πà‡∏°
      state.editButton?.destroy();
      state.deleteButton?.destroy();
      
      console.log('üóëÔ∏è ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ ActionButtonsContainer');
      
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å parent destroy
      container.destroy();
    }
  });
}

/**
 * Container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° Edit ‡πÅ‡∏•‡∏∞ Delete ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ Node ‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
 * ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö show/hide animations ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
 * 
 * @deprecated ‡πÉ‡∏ä‡πâ createActionButtonsContainer ‡πÅ‡∏ó‡∏ô - function-based approach
 */
export class ActionButtonsContainer extends Container {
  private editButton!: ReturnType<typeof createActionButton>;
  private deleteButton!: ReturnType<typeof createActionButton>;
  private targetNode: Container;
  private options: Required<ActionButtonsContainerOptions>;
  private isVisible: boolean = false;
  private isAnimating: boolean = false;

  // Event handlers
  private onEditClick?: (node: Container, event: FederatedPointerEvent) => void;
  private onDeleteClick?: (node: Container, event: FederatedPointerEvent) => void;

  constructor(targetNode: Container, options: ActionButtonsContainerOptions = {}) {
    super();

    this.targetNode = targetNode;
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default options
    this.options = {
      buttonSize: 32,
      spacing: 8,
      position: 'top',
      showAnimation: true,
      offset: { x: 0, y: -16 },
      animationDuration: 200,
      ...options
    };

    this.createButtons();
    this.positionButtons();
    this.setupInitialState();

    console.log('üîò ‡∏™‡∏£‡πâ‡∏≤‡∏á ActionButtonsContainer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Node:', targetNode);
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° Edit ‡πÅ‡∏•‡∏∞ Delete
   */
  private createButtons(): void {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° Edit
    this.editButton = createActionButton('edit', {
      size: this.options.buttonSize,
      hoverScale: 1.1
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° Delete
    this.deleteButton = createActionButton('delete', {
      size: this.options.buttonSize,
      hoverScale: 1.1
    });

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ click handlers
    this.editButton.setClickHandler(this.handleEditClick.bind(this));
    this.deleteButton.setClickHandler(this.handleDeleteClick.bind(this));

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô container
    this.addChild(this.editButton);
    this.addChild(this.deleteButton);
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° options
   */
  private positionButtons(): void {
    const { buttonSize, spacing, position } = this.options;
    const totalWidth = (buttonSize * 2) + spacing;
    const halfWidth = totalWidth / 2;

    switch (position) {
      case 'top':
      case 'bottom':
        // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
        this.editButton.x = -halfWidth + (buttonSize / 2);
        this.editButton.y = 0;
        
        this.deleteButton.x = -halfWidth + buttonSize + spacing + (buttonSize / 2);
        this.deleteButton.y = 0;
        break;

      case 'right':
        // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
        this.editButton.x = 0;
        this.editButton.y = -halfWidth + (buttonSize / 2);
        
        this.deleteButton.x = 0;
        this.deleteButton.y = -halfWidth + buttonSize + spacing + (buttonSize / 2);
        break;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á container ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö target node
    this.updateContainerPosition();
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á container ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö target node
   */
  private updateContainerPosition(): void {
    const bounds = this.targetNode.getBounds();
    const { position, offset } = this.options;

    let x: number, y: number;

    switch (position) {
      case 'top':
        x = bounds.x + (bounds.width / 2) + offset.x;
        y = bounds.y + offset.y;
        break;
      case 'bottom':
        x = bounds.x + (bounds.width / 2) + offset.x;
        y = bounds.y + bounds.height - offset.y;
        break;
      case 'right':
        x = bounds.x + bounds.width - offset.x;
        y = bounds.y + (bounds.height / 2) + offset.y;
        break;
    }

    this.x = x;
    this.y = y;
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà)
   */
  private setupInitialState(): void {
    this.visible = false;
    this.alpha = 0;
    this.scale.set(0.8); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° animation
   */
  public async show(animated: boolean = true): Promise<void> {
    if (this.isVisible || this.isAnimating) {
      return;
    }

    this.isVisible = true;
    this.visible = true;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á
    this.updateContainerPosition();

    if (!animated || !this.options.showAnimation) {
      // ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ animation
      this.alpha = 1;
      this.scale.set(1);
      return;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏î‡πâ‡∏ß‡∏¢ animation
    return new Promise<void>((resolve) => {
      this.isAnimating = true;
      const duration = this.options.animationDuration;
      const startTime = Date.now();
      const startAlpha = this.alpha;
      const startScale = this.scale.x;

      const animate = () => {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // Ease-out animation
        const easeProgress = 1 - Math.pow(1 - progress, 3);
        
        // Fade in
        this.alpha = startAlpha + (1 - startAlpha) * easeProgress;
        
        // Scale up
        const targetScale = 1;
        this.scale.set(startScale + (targetScale - startScale) * easeProgress);
        
        if (progress < 1) {
          requestAnimationFrame(animate);
        } else {
          this.isAnimating = false;
          resolve();
        }
      };

      animate();
    });
  }

  /**
   * ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° animation
   */
  public async hide(animated: boolean = true): Promise<void> {
    if (!this.isVisible || this.isAnimating) {
      return;
    }

    this.isVisible = false;

    if (!animated || !this.options.showAnimation) {
      // ‡∏ã‡πà‡∏≠‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ animation
      this.visible = false;
      this.alpha = 0;
      this.scale.set(0.8);
      return;
    }

    // ‡∏ã‡πà‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢ animation
    return new Promise<void>((resolve) => {
      this.isAnimating = true;
      const duration = this.options.animationDuration;
      const startTime = Date.now();
      const startAlpha = this.alpha;
      const startScale = this.scale.x;

      const animate = () => {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // Ease-in animation
        const easeProgress = Math.pow(progress, 3);
        
        // Fade out
        this.alpha = startAlpha * (1 - easeProgress);
        
        // Scale down
        const targetScale = 0.8;
        this.scale.set(startScale + (targetScale - startScale) * easeProgress);
        
        if (progress < 1) {
          requestAnimationFrame(animate);
        } else {
          this.visible = false;
          this.isAnimating = false;
          resolve();
        }
      };

      animate();
    });
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Edit Button Click
   */
  private handleEditClick(event: FederatedPointerEvent): void {
    console.log('‚úèÔ∏è ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Edit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Node:', this.targetNode);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å external handler ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (this.onEditClick) {
      this.onEditClick(this.targetNode, event);
    }

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ editing ‡πÉ‡∏ô NodeActions
    const nodeActions = useNodeActions(this.targetNode);
    nodeActions.startEditing();

    // ‡∏™‡πà‡∏á custom event
    this.dispatchActionEvent('edit', event);
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Delete Button Click
   */
  private handleDeleteClick(event: FederatedPointerEvent): void {
    console.log('üóëÔ∏è ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Delete ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Node:', this.targetNode);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å external handler ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (this.onDeleteClick) {
      this.onDeleteClick(this.targetNode, event);
    }

    // ‡∏™‡πà‡∏á custom event
    this.dispatchActionEvent('delete', event);
  }

  /**
   * ‡∏™‡πà‡∏á Custom Event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°
   */
  private dispatchActionEvent(action: ActionButtonType, event: FederatedPointerEvent): void {
    const customEvent = new CustomEvent('node-action-clicked', {
      detail: {
        node: this.targetNode,
        action: action,
        originalEvent: event,
        container: this
      }
    });
    window.dispatchEvent(customEvent);
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Edit Click Handler
   */
  public setEditClickHandler(handler: (node: Container, event: FederatedPointerEvent) => void): void {
    this.onEditClick = handler;
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Delete Click Handler
   */
  public setDeleteClickHandler(handler: (node: Container, event: FederatedPointerEvent) => void): void {
    this.onDeleteClick = handler;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  public getVisibility(): boolean {
    return this.isVisible;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á animate ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  public isCurrentlyAnimating(): boolean {
    return this.isAnimating;
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏∏‡πà‡∏° (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ Node ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á)
   */
  public updatePosition(): void {
    this.updateContainerPosition();
  }

  /**
   * ‡πÑ‡∏î‡πâ target node
   */
  public getTargetNode(): Container {
    return this.targetNode;
  }

  /**
   * ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ component ‡πÅ‡∏•‡∏∞ cleanup resources
   */
  public destroy(): void {
    // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏•‡∏≤‡∏¢
    if (this.isVisible) {
      this.hide(false); // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ animation
    }

    // ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏õ‡∏∏‡πà‡∏°
    this.editButton?.destroy();
    this.deleteButton?.destroy();
    
    console.log('üóëÔ∏è ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ ActionButtonsContainer');
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å parent destroy
    super.destroy();
  }
}

/**
 * Factory function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á ActionButtonsContainer (Class-based compatibility)
 * @param targetNode - Node ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° action
 * @param options - ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á container
 * @returns ActionButtonsContainer instance
 * @deprecated ‡πÉ‡∏ä‡πâ createActionButtonsContainer function ‡πÅ‡∏ó‡∏ô
 */
export function createActionButtonsContainerClass(
  targetNode: Container, 
  options?: ActionButtonsContainerOptions
): ActionButtonsContainer {
  return new ActionButtonsContainer(targetNode, options);
}