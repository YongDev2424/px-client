// src/components/CanvasContainer.ts
import { Application } from 'pixi.js';
import { GridOverlay } from '../utils/GridOverlay';
import { SnapToGrid } from '../utils/SnapToGrid';

/**
 * CanvasContainer - Enhanced wrapper for PixiJS application
 * 
 * üõ°Ô∏è ADDITIVE APPROACH: This class enhances existing PixiJS app without modifying it
 * - Wraps existing Application instance (doesn't replace main.ts setup)
 * - Adds optional grid overlay and snap-to-grid functionality
 * - All enhancements can be toggled on/off to preserve existing behavior
 * - Existing PixiJS interactions remain unchanged
 */
export class CanvasContainer {
  private pixiApp: Application;
  private gridOverlay: GridOverlay;
  private snapToGrid: SnapToGrid;
  private canvasElement: HTMLElement;
  private isGridEnabled: boolean = false;
  private isSnapEnabled: boolean = false;

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á CanvasContainer ‡∏ó‡∏µ‡πà wrap existing PixiJS application
   * @param existingApp - PixiJS Application ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å main.ts
   * @param canvasElement - HTML element ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô container
   */
  constructor(existingApp: Application, canvasElement: HTMLElement) {
    this.pixiApp = existingApp;
    this.canvasElement = canvasElement;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á enhancement components ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    this.gridOverlay = new GridOverlay(canvasElement);
    this.snapToGrid = new SnapToGrid(existingApp);
    
    this.initializeEnhancements();
    
    console.log('‚úÖ CanvasContainer initialized as optional enhancement');
  }

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô enhancement features (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
   */
  private initializeEnhancements(): void {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° resize handler ‡πÄ‡∏õ‡πá‡∏ô enhancement ‡∏Ç‡∏≠‡∏á existing resize logic
    this.addResizeEnhancement();
    
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° grid ‡πÅ‡∏•‡∏∞ snap features ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    this.gridOverlay.initialize();
    this.snapToGrid.initialize();
  }

  /**
   * ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î grid overlay (optional enhancement)
   * @param enabled - true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô grid, false ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î
   */
  public enableGrid(enabled: boolean = true): void {
    this.isGridEnabled = enabled;
    
    if (enabled) {
      this.gridOverlay.show();
      console.log('üî≤ Grid overlay enabled');
    } else {
      this.gridOverlay.hide();
      console.log('üî≤ Grid overlay disabled');
    }
  }

  /**
   * ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î snap-to-grid functionality (optional enhancement)
   * @param enabled - true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô snap, false ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î
   */
  public enableSnapToGrid(enabled: boolean = true): void {
    this.isSnapEnabled = enabled;
    
    if (enabled) {
      this.snapToGrid.enable();
      console.log('üß≤ Snap-to-grid enabled');
    } else {
      this.snapToGrid.disable();
      console.log('üß≤ Snap-to-grid disabled');
    }
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î grid (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ grid ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
   * @param size - ‡∏Ç‡∏ô‡∏≤‡∏î grid ‡πÉ‡∏ô pixels
   */
  public setGridSize(size: number): void {
    this.gridOverlay.setGridSize(size);
    this.snapToGrid.setGridSize(size);
    console.log(`üî≤ Grid size set to ${size}px`);
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ grid (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ grid ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
   * @param color - ‡∏™‡∏µ grid ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö CSS color
   */
  public setGridColor(color: string): void {
    this.gridOverlay.setGridColor(color);
    console.log(`üé® Grid color set to ${color}`);
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° resize enhancement ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö existing resize logic
   */
  private addResizeEnhancement(): void {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° resize observer ‡πÄ‡∏õ‡πá‡∏ô enhancement (‡πÑ‡∏°‡πà‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà existing logic)
    const resizeObserver = new ResizeObserver((entries) => {
      for (const entry of entries) {
        const { width, height } = entry.contentRect;
        this.handleCanvasResize(width, height);
      }
    });

    resizeObserver.observe(this.canvasElement);
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ canvas resize ‡πÄ‡∏õ‡πá‡∏ô enhancement ‡∏Ç‡∏≠‡∏á existing resize logic
   * @param width - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
   * @param height - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÉ‡∏´‡∏°‡πà
   */
  private handleCanvasResize(width: number, height: number): void {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï grid overlay ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà
    if (this.isGridEnabled) {
      this.gridOverlay.updateSize(width, height);
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï snap-to-grid boundaries
    if (this.isSnapEnabled) {
      this.snapToGrid.updateBoundaries(width, height);
    }
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö reference ‡πÑ‡∏õ‡∏¢‡∏±‡∏á existing PixiJS application
   * @returns PixiJS Application instance
   */
  public getPixiApp(): Application {
    return this.pixiApp;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ grid
   * @returns true ‡∏´‡∏≤‡∏Å grid ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
   */
  public isGridVisible(): boolean {
    return this.isGridEnabled;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ snap-to-grid
   * @returns true ‡∏´‡∏≤‡∏Å snap-to-grid ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
   */
  public isSnapToGridEnabled(): boolean {
    return this.isSnapEnabled;
  }

  /**
   * ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï canvas enhancements ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
   */
  public resetEnhancements(): void {
    this.enableGrid(false);
    this.enableSnapToGrid(false);
    console.log('üîÑ Canvas enhancements reset to default state');
  }

  /**
   * ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ CanvasContainer ‡πÅ‡∏•‡∏∞ cleanup resources
   */
  public destroy(): void {
    this.gridOverlay.destroy();
    this.snapToGrid.destroy();
    console.log('üóëÔ∏è CanvasContainer destroyed');
  }
}