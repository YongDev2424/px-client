// src/types/enhancedTypes.ts

/**
 * üèóÔ∏è Enhanced Data Structures ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Multi Label ‡πÅ‡∏•‡∏∞ Multi Property System
 * 
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ interfaces ‡πÅ‡∏•‡∏∞ types ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Multi Label ‡πÅ‡∏•‡∏∞ Multi Property
 * ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô function-based ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö existing codebase
 */

import type { PropertyValue } from './propertyTypes';

// ===== ENHANCED PROPERTY SYSTEM =====

/**
 * Property Validator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validation rules
 */
export interface PropertyValidator {
  minLength?: number;              // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á string
  maxLength?: number;              // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á string
  pattern?: string;                // Regex pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validation
  min?: number;                    // ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö number
  max?: number;                    // ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö number
  required?: boolean;              // ‡πÄ‡∏õ‡πá‡∏ô required field ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  customValidator?: (value: string) => ValidationResult; // Custom validation function
}

/**
 * ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á validation
 */
export interface ValidationResult {
  valid: boolean;                  // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå validation
  error?: string;                  // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  warning?: string;                // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° warning (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  suggestion?: string;             // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
}

/**
 * ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Property
 */
export interface PropertyDisplayOptions {
  color?: number;                  // ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  icon?: string;                   // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  priority?: number;               // ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡πÄ‡∏•‡∏Ç‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
  isCollapsible?: boolean;         // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ collapse ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  placeholder?: string;            // Placeholder text ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input
  helpText?: string;               // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
  showInSummary?: boolean;         // ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô summary view ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  groupLabel?: string;             // Label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏¢‡πà‡∏≠‡∏¢
}

/**
 * Property types ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö (‡∏Ç‡∏¢‡∏≤‡∏¢‡∏à‡∏≤‡∏Å existing)
 */
export type EnhancedPropertyType = 
  | 'text' 
  | 'number' 
  | 'boolean' 
  | 'url' 
  | 'email' 
  | 'date' 
  | 'color' 
  | 'select' 
  | 'multiselect'
  | 'textarea'
  | 'password';

/**
 * Enhanced Property Value ‡∏ó‡∏µ‡πà‡∏Ç‡∏¢‡∏≤‡∏¢‡∏à‡∏≤‡∏Å PropertyValue ‡πÄ‡∏î‡∏¥‡∏°
 */
export interface EnhancedPropertyValue extends Omit<PropertyValue, 'type'> {
  type: EnhancedPropertyType;      // ‡πÉ‡∏ä‡πâ enhanced type ‡πÅ‡∏ó‡∏ô
  category?: string;               // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏≠‡∏á property
  isRequired?: boolean;            // ‡πÄ‡∏õ‡πá‡∏ô required field ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  validation?: PropertyValidator;  // Validation rules
  displayOptions?: PropertyDisplayOptions; // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  metadata?: Record<string, any>;  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (flexible)
  lastModified?: number;           // Timestamp ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö select ‡πÅ‡∏•‡∏∞ multiselect types
  selectOptions?: PropertySelectOption[];
}

/**
 * ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö select properties
 */
export interface PropertySelectOption {
  value: string;                   // ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  label: string;                   // ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á
  color?: number;                  // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  icon?: string;                   // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  description?: string;            // ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  isDefault?: boolean;             // ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ default ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
}

// ===== MULTI LABEL SYSTEM =====

/**
 * ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á Label
 */
export type LabelType = 
  | 'primary'      // Label ‡∏´‡∏•‡∏±‡∏Å
  | 'secondary'    // Label ‡∏£‡∏≠‡∏á
  | 'tag'          // Tag/Badge
  | 'description'  // ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
  | 'metadata'     // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• metadata
  | 'status'       // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  | 'category';    // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà

/**
 * ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á Label
 */
export interface LabelPosition {
  side: 'top' | 'bottom' | 'left' | 'right' | 'center' | 'floating'; // ‡∏î‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á
  offset: { x: number; y: number }; // ‡∏£‡∏∞‡∏¢‡∏∞ offset ‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  alignment?: 'start' | 'center' | 'end'; // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  margin?: number;                 // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö element
  zIndex?: number;                 // Z-index ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö layering
}

/**
 * ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á Label
 */
export interface LabelStyle {
  fontSize: number;                // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
  fontWeight: 'normal' | 'bold' | 'lighter'; // ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
  fontFamily?: string;             // ‡∏ü‡∏≠‡∏ô‡∏ï‡πå family
  color: number;                   // ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
  backgroundColor?: number;        // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
  borderColor?: number;            // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏ö
  borderWidth?: number;            // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏ö
  borderRadius?: number;           // ‡∏°‡∏∏‡∏°‡πÇ‡∏Ñ‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏ö
  padding: { x: number; y: number }; // Padding ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
  opacity?: number;                // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ (0-1)
  shadow?: LabelShadow;            // ‡πÄ‡∏á‡∏≤
  animation?: LabelAnimation;      // Animation effects
}

/**
 * ‡πÄ‡∏á‡∏≤‡∏Ç‡∏≠‡∏á Label
 */
export interface LabelShadow {
  offsetX: number;                 // ‡∏£‡∏∞‡∏¢‡∏∞ offset X ‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏≤
  offsetY: number;                 // ‡∏£‡∏∞‡∏¢‡∏∞ offset Y ‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏≤
  blur: number;                    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ö‡∏•‡∏≠‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏≤
  color: number;                   // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏≤
  alpha: number;                   // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏≤
}

/**
 * Animation effects ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Label
 */
export interface LabelAnimation {
  type: 'none' | 'fade' | 'slide' | 'bounce' | 'pulse'; // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó animation
  duration: number;                // ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ animation (ms)
  delay?: number;                  // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° animation (ms)
  repeat?: boolean;                // ‡∏ß‡∏ô‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
}

/**
 * Label Value ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Multi Label System
 */
export interface LabelValue {
  id: string;                      // Unique identifier
  text: string;                    // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á label
  type: LabelType;                 // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á label
  position: LabelPosition;         // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á label
  style: LabelStyle;               // ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á label
  isEditable: boolean;             // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isVisible: boolean;              // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  order: number;                   // ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  metadata?: Record<string, any>;  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  lastModified?: number;           // Timestamp ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  
  // Event handlers (optional)
  onClick?: () => void;            // Handler ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å
  onDoubleClick?: () => void;      // Handler ‡πÄ‡∏°‡∏∑‡πà‡∏≠ double click
  onHover?: () => void;            // Handler ‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover
}

// ===== EDGE ENHANCEMENT SYSTEM =====

/**
 * Metadata ‡∏Ç‡∏≠‡∏á Edge
 */
export interface EdgeMetadata {
  relationshipType: string;        // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
  sourceSide?: string;             // ‡∏à‡∏∏‡∏î‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ù‡∏±‡πà‡∏á source
  targetSide?: string;             // ‡∏à‡∏∏‡∏î‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ù‡∏±‡πà‡∏á target
  styleTheme?: string;             // Theme ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  isDirectional: boolean;          // ‡∏°‡∏µ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  lineStyle: 'solid' | 'dashed' | 'dotted' | 'double'; // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏™‡πâ‡∏ô
  lineWidth: number;               // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô
  lineColor: number;               // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô
  arrowStyle?: ArrowStyle;         // ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£
  isAnimated?: boolean;            // ‡∏°‡∏µ animation ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  animationSpeed?: number;         // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß animation
}

/**
 * ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏®‡∏£
 */
export interface ArrowStyle {
  type: 'triangle' | 'diamond' | 'circle' | 'square'; // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏•‡∏π‡∏Å‡∏®‡∏£
  size: number;                    // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏•‡∏π‡∏Å‡∏®‡∏£
  color?: number;                  // ‡∏™‡∏µ‡∏•‡∏π‡∏Å‡∏®‡∏£ (‡∏ñ‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡πâ‡∏ô)
  filled: boolean;                 // ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  borderWidth?: number;            // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏ö‡∏•‡∏π‡∏Å‡∏®‡∏£
}

/**
 * Edge State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö function-based edge management
 */
export interface EdgeState {
  id: string;                      // Unique edge ID
  sourceNodeId: string;            // Source node ID
  targetNodeId: string;            // Target node ID
  labels: Map<string, LabelValue>; // Edge labels
  properties: Map<string, EnhancedPropertyValue>; // Edge properties
  metadata: EdgeMetadata;          // Edge configuration
  isVisible: boolean;              // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  isSelected: boolean;             // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  isHighlighted: boolean;          // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£ highlight
  lastModified: number;            // Timestamp ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
}

// ===== CATEGORY SYSTEM =====

/**
 * ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏≠‡∏á Property
 */
export interface PropertyCategory {
  id: string;                      // Unique identifier
  name: string;                    // ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  displayName?: string;            // ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á (‡∏ñ‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á)
  description?: string;            // ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  icon?: string;                   // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  color?: number;                  // ‡∏™‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  order: number;                   // ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  isCollapsed?: boolean;           // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ collapse
  isVisible: boolean;              // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  propertyIds: string[];           // Property IDs ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ
  metadata?: Record<string, any>;  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
}

// ===== VALIDATION SYSTEM =====

/**
 * ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£ validate ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
export interface ValidationSummary {
  elementId: string;               // ID ‡∏Ç‡∏≠‡∏á element ‡∏ó‡∏µ‡πà validate
  elementType: 'node' | 'edge';    // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á element
  isValid: boolean;                // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏ß‡∏°
  errors: ValidationError[];       // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ errors
  warnings: ValidationWarning[];   // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ warnings
  validatedAt: number;             // Timestamp ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£ validate
}

/**
 * Error ‡∏Ç‡∏≠‡∏á validation
 */
export interface ValidationError {
  propertyId: string;              // Property ID ‡∏ó‡∏µ‡πà‡∏°‡∏µ error
  field: string;                   // ‡∏ä‡∏∑‡πà‡∏≠ field ‡∏ó‡∏µ‡πà‡∏°‡∏µ error
  message: string;                 // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
  code: string;                    // ‡∏£‡∏´‡∏±‡∏™ error
  severity: 'error' | 'critical'; // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á
  suggestions?: string[];          // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
}

/**
 * Warning ‡∏Ç‡∏≠‡∏á validation
 */
export interface ValidationWarning {
  propertyId: string;              // Property ID ‡∏ó‡∏µ‡πà‡∏°‡∏µ warning
  field: string;                   // ‡∏ä‡∏∑‡πà‡∏≠ field ‡∏ó‡∏µ‡πà‡∏°‡∏µ warning
  message: string;                 // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° warning
  code: string;                    // ‡∏£‡∏´‡∏±‡∏™ warning
  suggestions?: string[];          // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
}

// ===== UTILITY TYPES =====

/**
 * Generic CRUD operations
 */
export interface CRUDOperations<T> {
  create: (item: Omit<T, 'id'>) => string;
  read: (id: string) => T | null;
  update: (id: string, updates: Partial<T>) => boolean;
  delete: (id: string) => boolean;
  list: () => T[];
}

/**
 * Event payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö state changes
 */
export interface StateChangeEvent<T = any> {
  elementId: string;               // ID ‡∏Ç‡∏≠‡∏á element ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  elementType: 'node' | 'edge';    // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á element
  changeType: string;              // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  oldValue?: T;                    // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤
  newValue: T;                     // ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
  timestamp: number;               // Timestamp ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  metadata?: Record<string, any>;  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
}

/**
 * Search ‡πÅ‡∏•‡∏∞ Filter options
 */
export interface SearchOptions {
  query?: string;                  // ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  type?: EnhancedPropertyType | LabelType; // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  category?: string;               // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
  isRequired?: boolean;            // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° required status
  hasErrors?: boolean;             // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° validation status
  sortBy?: 'name' | 'type' | 'order' | 'lastModified'; // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°
  sortOrder?: 'asc' | 'desc';      // ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á
  limit?: number;                  // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  offset?: number;                 // Offset ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pagination
}

// ===== DEFAULT VALUES =====

/**
 * ‡∏Ñ‡πà‡∏≤ default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö property validation
 */
export const DEFAULT_PROPERTY_VALIDATION: PropertyValidator = {
  required: false,
  minLength: 0,
  maxLength: 1000
};

/**
 * ‡∏Ñ‡πà‡∏≤ default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö property display options
 */
export const DEFAULT_PROPERTY_DISPLAY: PropertyDisplayOptions = {
  priority: 0,
  isCollapsible: false,
  showInSummary: true,
  color: 0x333333
};

/**
 * ‡∏Ñ‡πà‡∏≤ default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö label style
 */
export const DEFAULT_LABEL_STYLE: LabelStyle = {
  fontSize: 12,
  fontWeight: 'normal',
  color: 0xFFFFFF,
  backgroundColor: 0x1e1e1e,
  borderRadius: 4,
  padding: { x: 8, y: 4 },
  opacity: 0.9
};

/**
 * ‡∏Ñ‡πà‡∏≤ default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö label position
 */
export const DEFAULT_LABEL_POSITION: LabelPosition = {
  side: 'top',
  offset: { x: 0, y: -10 },
  alignment: 'center',
  margin: 5
};

/**
 * ‡∏Ñ‡πà‡∏≤ default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö edge metadata
 */
export const DEFAULT_EDGE_METADATA: EdgeMetadata = {
  relationshipType: 'default',
  isDirectional: true,
  lineStyle: 'solid',
  lineWidth: 2,
  lineColor: 0x999999
};