// src/utils/SnapToGrid.ts
import { Application, Container, FederatedPointerEvent } from 'pixi.js';

/**
 * SnapToGrid - Grid snapping functionality for PixiJS objects
 * 
 * üõ°Ô∏è ADDITIVE APPROACH: Enhances existing drag behavior without replacing it
 * - Works alongside existing draggable.ts functionality
 * - Provides optional grid snapping for precise alignment
 * - Can be toggled on/off without affecting existing drag behavior
 * - Preserves all existing PixiJS interactions
 */
export class SnapToGrid {
  private pixiApp: Application;
  private gridSize: number = 20; // Default grid size in pixels
  private isEnabled: boolean = false;
  private canvasWidth: number = 0;
  private canvasHeight: number = 0;
  private originalDragHandlers: Map<Container, any> = new Map();

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á SnapToGrid system ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PixiJS application
   * @param pixiApp - PixiJS Application instance
   */
  constructor(pixiApp: Application) {
    this.pixiApp = pixiApp;
    this.updateBoundaries(pixiApp.screen.width, pixiApp.screen.height);
  }

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô snap-to-grid system
   */
  public initialize(): void {
    console.log('üß≤ SnapToGrid initialized (disabled by default)');
  }

  /**
   * ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô snap-to-grid functionality
   */
  public enable(): void {
    this.isEnabled = true;
    this.enhanceExistingDragBehavior();
    console.log('üß≤ Snap-to-grid enabled');
  }

  /**
   * ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô snap-to-grid functionality
   */
  public disable(): void {
    this.isEnabled = false;
    this.restoreOriginalDragBehavior();
    console.log('üß≤ Snap-to-grid disabled');
  }

  /**
   * Enhance existing drag behavior ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà existing handlers
   */
  private enhanceExistingDragBehavior(): void {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ draggable objects ‡πÉ‡∏ô stage
    this.findAndEnhanceDraggableObjects(this.pixiApp.stage);
  }

  /**
   * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞ enhance draggable objects recursively
   * @param container - Container ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
   */
  private findAndEnhanceDraggableObjects(container: Container): void {
    container.children.forEach((child) => {
      if (child instanceof Container) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ object ‡∏ô‡∏µ‡πâ‡∏°‡∏µ drag behavior ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (this.isDraggableObject(child)) {
          this.enhanceObjectDragBehavior(child);
        }
        
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ children recursively
        this.findAndEnhanceDraggableObjects(child);
      }
    });
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ object ‡πÄ‡∏õ‡πá‡∏ô draggable ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   * @param object - PixiJS Container ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   * @returns true ‡∏´‡∏≤‡∏Å object ‡πÄ‡∏õ‡πá‡∏ô draggable
   */
  private isDraggableObject(object: Container): boolean {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å metadata ‡∏´‡∏£‡∏∑‡∏≠ event listeners ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    return (
      object.eventMode === 'static' &&
      object.cursor === 'pointer' &&
      (object as any).nodeData !== undefined
    );
  }

  /**
   * Enhance drag behavior ‡∏Ç‡∏≠‡∏á object ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà existing behavior
   * @param object - PixiJS Container ‡∏ó‡∏µ‡πà‡∏à‡∏∞ enhance
   */
  private enhanceObjectDragBehavior(object: Container): void {
    // ‡πÄ‡∏Å‡πá‡∏ö original handlers ‡πÑ‡∏ß‡πâ
    const originalHandlers = this.getOriginalEventHandlers(object);
    this.originalDragHandlers.set(object, originalHandlers);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° snap enhancement ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà existing handlers
    this.addSnapEnhancement(object, originalHandlers);
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö original event handlers ‡∏Ç‡∏≠‡∏á object
   * @param object - PixiJS Container
   * @returns Object ‡∏ó‡∏µ‡πà‡∏°‡∏µ original handlers
   */
  private getOriginalEventHandlers(object: Container): any {
    // ‡πÉ‡∏ä‡πâ reflection ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö existing handlers
    const eventData = (object as any)._events;
    return {
      pointerdown: eventData?.pointerdown || [],
      pointermove: eventData?.pointermove || [],
      pointerup: eventData?.pointerup || []
    };
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° snap enhancement ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà existing handlers
   * @param object - PixiJS Container
   * @param _originalHandlers - Original event handlers (reserved for future use)
   */
  private addSnapEnhancement(object: Container, _originalHandlers: any): void {
    let isDragging = false;
    let dragOffset = { x: 0, y: 0 };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° enhanced pointerdown handler
    object.on('pointerdown', (event: FederatedPointerEvent) => {
      if (!this.isEnabled) return;
      
      isDragging = true;
      const globalPos = event.global.clone();
      dragOffset.x = object.x - globalPos.x;
      dragOffset.y = object.y - globalPos.y;
      
      // ‡πÑ‡∏°‡πà stopPropagation ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ existing handlers ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° enhanced globalpointermove handler
    this.pixiApp.stage.on('globalpointermove', (event: FederatedPointerEvent) => {
      if (!this.isEnabled || !isDragging) return;
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
      const globalPos = event.global.clone();
      let newX = globalPos.x + dragOffset.x;
      let newY = globalPos.y + dragOffset.y;

      // ‡πÉ‡∏ä‡πâ snap-to-grid
      newX = this.snapToGrid(newX);
      newY = this.snapToGrid(newY);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö boundaries
      newX = this.clampToBoundaries(newX, 'x');
      newY = this.clampToBoundaries(newY, 'y');

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á object
      object.x = newX;
      object.y = newY;
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° enhanced pointerup handler
    object.on('pointerup', () => {
      if (!this.isEnabled) return;
      
      isDragging = false;
    });
  }

  /**
   * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà snap ‡πÑ‡∏õ‡∏¢‡∏±‡∏á grid
   * @param value - ‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
   * @returns ‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà snap ‡πÅ‡∏•‡πâ‡∏ß
   */
  private snapToGrid(value: number): number {
    return Math.round(value / this.gridSize) * this.gridSize;
  }

  /**
   * ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô canvas boundaries
   * @param value - ‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
   * @param axis - ‡πÅ‡∏Å‡∏ô ('x' ‡∏´‡∏£‡∏∑‡∏≠ 'y')
   * @returns ‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
   */
  private clampToBoundaries(value: number, axis: 'x' | 'y'): number {
    if (axis === 'x') {
      return Math.max(0, Math.min(this.canvasWidth - this.gridSize, value));
    } else {
      return Math.max(0, Math.min(this.canvasHeight - this.gridSize, value));
    }
  }

  /**
   * ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ original drag behavior
   */
  private restoreOriginalDragBehavior(): void {
    // ‡∏•‡∏ö enhanced handlers ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ original handlers
    this.originalDragHandlers.forEach((handlers, object) => {
      // ‡∏•‡∏ö enhanced handlers
      object.off('pointerdown');
      object.off('pointermove');
      object.off('pointerup');
      
      // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ original handlers (‡∏´‡∏≤‡∏Å‡∏°‡∏µ)
      if (handlers.pointerdown.length > 0) {
        handlers.pointerdown.forEach((handler: any) => {
          object.on('pointerdown', handler);
        });
      }
    });
    
    this.originalDragHandlers.clear();
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î grid
   * @param size - ‡∏Ç‡∏ô‡∏≤‡∏î grid ‡πÉ‡∏ô pixels
   */
  public setGridSize(size: number): void {
    this.gridSize = size;
    console.log(`üß≤ Snap grid size set to ${size}px`);
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï canvas boundaries
   * @param width - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á canvas
   * @param height - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á canvas
   */
  public updateBoundaries(width: number, height: number): void {
    this.canvasWidth = width;
    this.canvasHeight = height;
    console.log(`üß≤ Snap boundaries updated to ${width}x${height}`);
  }

  /**
   * Snap object ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á grid ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
   * @param object - PixiJS Container ‡∏ó‡∏µ‡πà‡∏à‡∏∞ snap
   */
  public snapObjectToGrid(object: Container): void {
    if (!this.isEnabled) return;

    const snappedX = this.snapToGrid(object.x);
    const snappedY = this.snapToGrid(object.y);

    object.x = this.clampToBoundaries(snappedX, 'x');
    object.y = this.clampToBoundaries(snappedY, 'y');

    console.log(`üß≤ Object snapped to grid at (${object.x}, ${object.y})`);
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î grid ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   * @returns ‡∏Ç‡∏ô‡∏≤‡∏î grid ‡πÉ‡∏ô pixels
   */
  public getGridSize(): number {
    return this.gridSize;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ snap-to-grid ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   * @returns true ‡∏´‡∏≤‡∏Å snap-to-grid ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
   */
  public isSnapEnabled(): boolean {
    return this.isEnabled;
  }

  /**
   * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á grid ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
   * @param x - ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á x
   * @param y - ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á y
   * @returns Object ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á grid ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
   */
  public getNearestGridPoint(x: number, y: number): { x: number; y: number } {
    return {
      x: this.snapToGrid(x),
      y: this.snapToGrid(y)
    };
  }

  /**
   * ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ SnapToGrid ‡πÅ‡∏•‡∏∞ cleanup resources
   */
  public destroy(): void {
    this.disable();
    this.originalDragHandlers.clear();
    console.log('üóëÔ∏è SnapToGrid destroyed');
  }
}