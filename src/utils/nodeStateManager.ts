// src/utils/nodeStateManager.ts

import { Container } from 'pixi.js';

/**
 * Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á Property
 */
export interface PropertyValue {
  key: string;
  value: string;
  type: 'text' | 'number' | 'boolean';
  id: string;      // Unique identifier
  order: number;   // Display order
}

/**
 * Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Node
 */
export interface NodeState {
  isCollapsed: boolean;
  isEditing: boolean;
  properties: Map<string, PropertyValue>;
  actionButtonsVisible: boolean;
  originalBounds?: { width: number; height: number };
  collapsedBounds?: { width: number; height: number };
}

/**
 * ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Enhanced Nodes
 * ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ collapse/expand, property management, ‡πÅ‡∏•‡∏∞ editing states
 */
class NodeStateManager {
  private nodeStates: Map<Container, NodeState> = new Map();
  private propertyIdCounter: number = 0;

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Node ‡πÉ‡∏´‡∏°‡πà
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @param initialState - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (optional)
   * @returns NodeState ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
   */
  initializeNodeState(node: Container, initialState?: Partial<NodeState>): NodeState {
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°
    const existingState = this.nodeStates.get(node);
    if (existingState) {
      return existingState;
    }

    const defaultState: NodeState = {
      isCollapsed: false,
      isEditing: false,
      properties: new Map(),
      actionButtonsVisible: false,
      ...initialState
    };

    this.nodeStates.set(node, defaultState);
    console.log('üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Node:', node);
    return defaultState;
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Node
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @returns NodeState ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
   */
  getNodeState(node: Container): NodeState | null {
    return this.nodeStates.get(node) || null;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Node ‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @returns true ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
   */
  hasNodeState(node: Container): boolean {
    return this.nodeStates.has(node);
  }

  // === Collapse/Expand State Management ===

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ collapsed ‡∏Ç‡∏≠‡∏á Node
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @param collapsed - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ collapsed ‡πÉ‡∏´‡∏°‡πà
   * @returns true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö Node
   */
  setCollapsed(node: Container, collapsed: boolean): boolean {
    const state = this.getNodeState(node);
    if (!state) {
      console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Node ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö setCollapsed');
      return false;
    }

    const previousState = state.isCollapsed;
    state.isCollapsed = collapsed;

    // Dispatch event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI updates
    if (previousState !== collapsed) {
      this.dispatchNodeStateChangeEvent(node, 'collapse', {
        isCollapsed: collapsed,
        previousState: previousState
      });
      console.log(`üì¶ Node ${collapsed ? 'collapsed' : 'expanded'}:`, node);
    }

    return true;
  }

  /**
   * ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ collapsed ‡∏Ç‡∏≠‡∏á Node
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @returns ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å toggle ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö Node
   */
  toggleCollapse(node: Container): boolean | null {
    const state = this.getNodeState(node);
    if (!state) {
      console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Node ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö toggleCollapse');
      return null;
    }

    const newState = !state.isCollapsed;
    this.setCollapsed(node, newState);
    return newState;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Node ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ collapsed ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @returns true ‡∏ñ‡πâ‡∏≤ collapsed, false ‡∏ñ‡πâ‡∏≤ expanded ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö Node
   */
  isCollapsed(node: Container): boolean {
    const state = this.getNodeState(node);
    return state?.isCollapsed || false;
  }

  // === Editing State Management ===

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ editing ‡∏Ç‡∏≠‡∏á Node
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @param editing - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ editing ‡πÉ‡∏´‡∏°‡πà
   * @returns true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö Node
   */
  setEditing(node: Container, editing: boolean): boolean {
    const state = this.getNodeState(node);
    if (!state) {
      console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Node ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö setEditing');
      return false;
    }

    const previousState = state.isEditing;
    state.isEditing = editing;

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° editing ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å editing ‡∏Ç‡∏≠‡∏á Node ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    if (editing && !previousState) {
      // ‡∏™‡πà‡∏á node ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô excludeNode ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
      this.exitAllEditingModes(node);
    }

    // Dispatch event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI updates
    if (previousState !== editing) {
      this.dispatchNodeStateChangeEvent(node, 'editing', {
        isEditing: editing,
        previousState: previousState
      });
      console.log(`‚úèÔ∏è Node ${editing ? '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà' : '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å'} ‡πÇ‡∏´‡∏°‡∏î editing:`, node);
    }

    return true;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Node ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ editing ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @returns true ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á editing
   */
  isEditing(node: Container): boolean {
    const state = this.getNodeState(node);
    return state?.isEditing || false;
  }

  /**
   * ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏´‡∏°‡∏î editing ‡∏Ç‡∏≠‡∏á Node ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô Node ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
   * @param excludeNode - Node ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å editing (optional)
   */
  exitAllEditingModes(excludeNode?: Container): void {
    let exitedCount = 0;

    this.nodeStates.forEach((state, node) => {
      if (state.isEditing && node !== excludeNode) {
        this.setEditing(node, false);
        exitedCount++;
      }
    });

    if (exitedCount > 0) {
      console.log(`üö™ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏´‡∏°‡∏î editing ‡∏Ç‡∏≠‡∏á ${exitedCount} Node(s)`);
    }
  }

  // === Property Management ===

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° Property ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Node
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @param property - PropertyValue ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
   * @returns true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (key ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö Node)
   */
  addProperty(node: Container, property: PropertyValue): boolean {
    const state = this.getNodeState(node);
    if (!state) {
      console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Node ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö addProperty');
      return false;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö key ‡∏ã‡πâ‡∏≥
    if (state.properties.has(property.key)) {
      console.warn(`Property key "${property.key}" ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
      return false;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!property.id) {
      property.id = `prop_${++this.propertyIdCounter}`;
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° property
    state.properties.set(property.key, { ...property });

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï nodeData ‡πÉ‡∏ô Container
    this.syncPropertiesToNodeData(node);

    // Dispatch event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI updates
    this.dispatchNodeStateChangeEvent(node, 'property-added', {
      property: property,
      propertyCount: state.properties.size
    });

    console.log(`‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° Property "${property.key}" ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Node:`, node);
    return true;
  }

  /**
   * ‡∏•‡∏ö Property ‡∏à‡∏≤‡∏Å Node
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @param key - Key ‡∏Ç‡∏≠‡∏á Property ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
   * @returns true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö Property ‡∏´‡∏£‡∏∑‡∏≠ Node
   */
  removeProperty(node: Container, key: string): boolean {
    const state = this.getNodeState(node);
    if (!state) {
      console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Node ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö removeProperty');
      return false;
    }

    const property = state.properties.get(key);
    if (!property) {
      console.warn(`‡πÑ‡∏°‡πà‡∏û‡∏ö Property key "${key}"`);
      return false;
    }

    // ‡∏•‡∏ö property
    state.properties.delete(key);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï nodeData ‡πÉ‡∏ô Container
    this.syncPropertiesToNodeData(node);

    // Dispatch event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI updates
    this.dispatchNodeStateChangeEvent(node, 'property-removed', {
      property: property,
      propertyCount: state.properties.size
    });

    console.log(`‚ûñ ‡∏•‡∏ö Property "${key}" ‡∏à‡∏≤‡∏Å Node:`, node);
    return true;
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Property ‡∏Ç‡∏≠‡∏á Node
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @param key - Key ‡∏Ç‡∏≠‡∏á Property ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
   * @param newValue - ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
   * @param newType - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà (optional)
   * @returns true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö Property ‡∏´‡∏£‡∏∑‡∏≠ Node
   */
  updateProperty(node: Container, key: string, newValue: string, newType?: PropertyValue['type']): boolean {
    const state = this.getNodeState(node);
    if (!state) {
      console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Node ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö updateProperty');
      return false;
    }

    const property = state.properties.get(key);
    if (!property) {
      console.warn(`‡πÑ‡∏°‡πà‡∏û‡∏ö Property key "${key}"`);
      return false;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤
    const oldValue = property.value;
    property.value = newValue;
    if (newType) {
      property.type = newType;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï nodeData ‡πÉ‡∏ô Container
    this.syncPropertiesToNodeData(node);

    // Dispatch event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI updates
    this.dispatchNodeStateChangeEvent(node, 'property-updated', {
      property: property,
      oldValue: oldValue,
      newValue: newValue
    });

    console.log(`üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Property "${key}" ‡∏Ç‡∏≠‡∏á Node:`, node);
    return true;
  }

  /**
   * ‡πÑ‡∏î‡πâ Property ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á Node
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @returns Array ‡∏Ç‡∏≠‡∏á PropertyValue ‡∏´‡∏£‡∏∑‡∏≠ empty array ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö Node
   */
  getProperties(node: Container): PropertyValue[] {
    const state = this.getNodeState(node);
    if (!state) {
      return [];
    }

    return Array.from(state.properties.values())
      .sort((a, b) => a.order - b.order);
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Property ‡∏Ç‡∏≠‡∏á Node
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @returns ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Property
   */
  getPropertyCount(node: Container): number {
    const state = this.getNodeState(node);
    return state?.properties.size || 0;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Property key ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @param key - Key ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   * @returns true ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ key ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
   */
  hasProperty(node: Container, key: string): boolean {
    const state = this.getNodeState(node);
    return state?.properties.has(key) || false;
  }

  // === Action Buttons Visibility ===

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Action Buttons
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @param visible - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
   * @returns true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö Node
   */
  setActionButtonsVisible(node: Container, visible: boolean): boolean {
    const state = this.getNodeState(node);
    if (!state) {
      console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Node ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö setActionButtonsVisible');
      return false;
    }

    const previousState = state.actionButtonsVisible;
    state.actionButtonsVisible = visible;

    // Dispatch event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI updates
    if (previousState !== visible) {
      this.dispatchNodeStateChangeEvent(node, 'action-buttons', {
        visible: visible,
        previousState: previousState
      });
      console.log(`üîò Action Buttons ${visible ? '‡πÅ‡∏™‡∏î‡∏á' : '‡∏ã‡πà‡∏≠‡∏ô'} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Node:`, node);
    }

    return true;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Action Buttons ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @returns true ‡∏ñ‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà
   */
  areActionButtonsVisible(node: Container): boolean {
    const state = this.getNodeState(node);
    return state?.actionButtonsVisible || false;
  }

  // === Bounds Management ===

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ bounds ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á Node (‡∏Å‡πà‡∏≠‡∏ô collapse)
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @param bounds - ‡∏Ç‡∏ô‡∏≤‡∏î bounds ‡πÄ‡∏î‡∏¥‡∏°
   * @returns true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö Node
   */
  setOriginalBounds(node: Container, bounds: { width: number; height: number }): boolean {
    const state = this.getNodeState(node);
    if (!state) {
      console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Node ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö setOriginalBounds');
      return false;
    }

    state.originalBounds = { ...bounds };
    return true;
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ bounds ‡∏Ç‡∏≠‡∏á Node ‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ collapsed
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @param bounds - ‡∏Ç‡∏ô‡∏≤‡∏î bounds ‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ collapsed
   * @returns true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö Node
   */
  setCollapsedBounds(node: Container, bounds: { width: number; height: number }): boolean {
    const state = this.getNodeState(node);
    if (!state) {
      console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Node ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö setCollapsedBounds');
      return false;
    }

    state.collapsedBounds = { ...bounds };
    return true;
  }

  /**
   * ‡πÑ‡∏î‡πâ bounds ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á Node ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @returns bounds ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
   */
  getCurrentBounds(node: Container): { width: number; height: number } | null {
    const state = this.getNodeState(node);
    if (!state) {
      return null;
    }

    if (state.isCollapsed && state.collapsedBounds) {
      return { ...state.collapsedBounds };
    } else if (state.originalBounds) {
      return { ...state.originalBounds };
    }

    return null;
  }

  // === Utility Methods ===

  /**
   * ‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Node
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @returns true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö Node
   */
  removeNodeState(node: Container): boolean {
    const hasState = this.nodeStates.has(node);
    if (hasState) {
      this.nodeStates.delete(node);
      console.log('üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Node:', node);
    }
    return hasState;
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Node ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
   * @returns ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Node
   */
  getNodeCount(): number {
    return this.nodeStates.size;
  }

  /**
   * ‡πÑ‡∏î‡πâ Array ‡∏Ç‡∏≠‡∏á Node ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
   * @returns Array ‡∏Ç‡∏≠‡∏á Container
   */
  getAllNodes(): Container[] {
    return Array.from(this.nodeStates.keys());
  }

  /**
   * ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  clearAllStates(): void {
    const nodeCount = this.nodeStates.size;
    this.nodeStates.clear();
    this.propertyIdCounter = 0;
    console.log(`üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á ${nodeCount} Node(s)`);
  }

  // === Private Helper Methods ===

  /**
   * ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå Properties ‡∏à‡∏≤‡∏Å NodeState ‡πÑ‡∏õ‡∏¢‡∏±‡∏á nodeData ‡πÉ‡∏ô Container
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   */
  private syncPropertiesToNodeData(node: Container): void {
    const state = this.getNodeState(node);
    if (!state) return;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï nodeData ‡πÉ‡∏ô Container
    const nodeData = (node as any).nodeData || {};
    nodeData.properties = Array.from(state.properties.values());
    (node as any).nodeData = nodeData;
  }

  /**
   * ‡∏™‡πà‡∏á Custom Event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Node ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
   * @param node - Container ‡∏Ç‡∏≠‡∏á Node
   * @param changeType - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
   * @param details - ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
   */
  private dispatchNodeStateChangeEvent(node: Container, changeType: string, details: any): void {
    const event = new CustomEvent('node-state-changed', {
      detail: {
        node: node,
        changeType: changeType,
        ...details
      }
    });
    window.dispatchEvent(event);
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô (Singleton pattern)
export const nodeStateManager = new NodeStateManager();