// src/utils/selectableEdge.ts

import { Container, Graphics } from 'pixi.js';
import { makeSelectable, type SelectableElement } from '../stores/selectionState';

/**
 * ‡∏ó‡∏≥‡πÉ‡∏´‡πâ Edge Container ‡πÄ‡∏õ‡πá‡∏ô selectable ‡∏û‡∏£‡πâ‡∏≠‡∏° hit area ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô
 * @param edgeContainer - Edge container ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ selectable
 * @param options - ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
 * @returns SelectableElement object
 */
export function makeSelectableEdge(
  edgeContainer: Container,
  options: {
    data?: any;
    onSelect?: () => void;
    onDeselect?: () => void;
    hitAreaPadding?: number;
  } = {}
): SelectableElement {
  const { hitAreaPadding = 10 } = options;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á hit area ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö easier selection
  const hitArea = createEdgeHitArea(edgeContainer, hitAreaPadding);
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° hit area ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô edge container
  edgeContainer.addChild(hitArea);
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ interaction
  edgeContainer.eventMode = 'static';
  edgeContainer.cursor = 'pointer';

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á enhanced callbacks
  const enhancedOnSelect = () => {
    console.log('üîó Edge selected:', edgeContainer);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å original callback
    options.onSelect?.();
    
    // ‡∏™‡πà‡∏á event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö toolbar update
    const event = new CustomEvent('pixi-selection-change', {
      detail: {
        container: edgeContainer,
        action: 'select',
        type: 'edge'
      }
    });
    window.dispatchEvent(event);
  };

  const enhancedOnDeselect = () => {
    console.log('‚≠ï Edge deselected:', edgeContainer);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å original callback
    options.onDeselect?.();
    
    // ‡∏™‡πà‡∏á event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö toolbar update
    const event = new CustomEvent('pixi-selection-change', {
      detail: {
        container: edgeContainer,
        action: 'deselect',
        type: 'edge'
      }
    });
    window.dispatchEvent(event);
  };

  // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ selectable ‡∏î‡πâ‡∏ß‡∏¢ type = 'edge'
  const selectableElement = makeSelectable(edgeContainer, {
    type: 'edge',
    data: options.data,
    onSelect: enhancedOnSelect,
    onDeselect: enhancedOnDeselect,
    selectOnClick: true
  });

  console.log('üîó Created selectable edge');
  return selectableElement;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á hit area ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Edge ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
 * @param edgeContainer - Edge container
 * @param padding - ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏£‡∏≠‡∏ö edge
 * @returns Graphics hit area
 */
function createEdgeHitArea(edgeContainer: Container, padding: number): Graphics {
  const hitArea = new Graphics();
  
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ line graphics ‡πÉ‡∏ô edge container
  const lineGraphics = findLineGraphics(edgeContainer);
  
  if (lineGraphics && lineGraphics.length > 0) {
    // ‡πÉ‡∏ä‡πâ bounds ‡∏Ç‡∏≠‡∏á line ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á hit area
    const bounds = lineGraphics[0].getBounds();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á rectangle hit area ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô
    hitArea
      .rect(
        bounds.x - padding,
        bounds.y - padding, 
        bounds.width + (padding * 2),
        bounds.height + (padding * 2)
      )
      .fill({ color: 0x000000, alpha: 0 }); // invisible
  } else {
    // fallback: ‡∏™‡∏£‡πâ‡∏≤‡∏á hit area ‡∏à‡∏≤‡∏Å edge container bounds
    const bounds = edgeContainer.getBounds();
    
    hitArea
      .rect(
        bounds.x - padding,
        bounds.y - padding,
        bounds.width + (padding * 2), 
        bounds.height + (padding * 2)
      )
      .fill({ color: 0x000000, alpha: 0 }); // invisible
  }
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ hit area
  hitArea.eventMode = 'static';
  hitArea.label = 'edge-hit-area';
  
  return hitArea;
}

/**
 * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ line graphics ‡πÉ‡∏ô edge container
 * @param container - Container ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
 * @returns Array ‡∏Ç‡∏≠‡∏á Graphics ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô line
 */
function findLineGraphics(container: Container): Graphics[] {
  const lineGraphics: Graphics[] = [];
  
  // ‡∏ß‡∏ô‡∏´‡∏≤ Graphics children ‡∏ó‡∏µ‡πà‡∏°‡∏µ line drawing
  container.children.forEach(child => {
    if (child instanceof Graphics) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô line graphics ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      // (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡∏≤‡∏° naming convention ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ)
      if (child.label?.includes('line') || child.label?.includes('edge')) {
        lineGraphics.push(child);
      }
    }
  });
  
  return lineGraphics;
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï hit area ‡πÄ‡∏°‡∏∑‡πà‡∏≠ edge ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î
 * @param edgeContainer - Edge container
 * @param padding - ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
 */
export function updateEdgeHitArea(edgeContainer: Container, padding: number = 10): void {
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ hit area ‡πÄ‡∏î‡∏¥‡∏°
  const existingHitArea = edgeContainer.children.find(
    child => child.label === 'edge-hit-area'
  ) as Graphics;
  
  if (existingHitArea) {
    // ‡∏•‡∏ö hit area ‡πÄ‡∏î‡∏¥‡∏°
    edgeContainer.removeChild(existingHitArea);
    existingHitArea.destroy();
  }
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á hit area ‡πÉ‡∏´‡∏°‡πà
  const newHitArea = createEdgeHitArea(edgeContainer, padding);
  edgeContainer.addChild(newHitArea);
}

/**
 * ‡∏•‡∏ö selectable capability ‡∏à‡∏≤‡∏Å Edge
 * @param edgeContainer - Edge container
 */
export function removeSelectableEdge(edgeContainer: Container): void {
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏•‡∏ö hit area
  const hitArea = edgeContainer.children.find(
    child => child.label === 'edge-hit-area'
  );
  
  if (hitArea) {
    edgeContainer.removeChild(hitArea);
    hitArea.destroy();
  }
  
  // ‡∏•‡∏ö event mode
  edgeContainer.eventMode = 'none';
  edgeContainer.cursor = 'default';
  
  // ‡∏•‡∏ö SelectableElement ‡∏ú‡πà‡∏≤‡∏ô selection store
  // (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ removeSelectable function ‡∏à‡∏≤‡∏Å selectionState)
  console.log('üóëÔ∏è Removed selectable capability from edge');
}