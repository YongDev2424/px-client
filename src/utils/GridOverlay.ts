// src/utils/GridOverlay.ts

/**
 * GridOverlay - CSS-based grid background system
 * 
 * üõ°Ô∏è ADDITIVE APPROACH: Enhances existing canvas-grid CSS without replacing it
 * - Works alongside existing .canvas-grid CSS class
 * - Provides programmatic control over grid appearance
 * - Can be toggled on/off without affecting existing styling
 * - Preserves existing grid background from style.css
 */
export class GridOverlay {
  private containerElement: HTMLElement;
  private gridElement: HTMLElement | null = null;
  private gridSize: number = 20; // Default grid size in pixels
  private gridColor: string = 'rgba(255, 255, 255, 0.1)'; // Default grid color
  private isVisible: boolean = false;

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á GridOverlay ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö canvas container
   * @param containerElement - HTML element ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° grid overlay
   */
  constructor(containerElement: HTMLElement) {
    this.containerElement = containerElement;
  }

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô grid overlay system
   */
  public initialize(): void {
    this.createGridElement();
    console.log('üî≤ GridOverlay initialized');
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á grid element ‡πÄ‡∏õ‡πá‡∏ô enhancement ‡∏Ç‡∏≠‡∏á existing .canvas-grid
   */
  private createGridElement(): void {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ existing grid element ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingGrid = this.containerElement.querySelector('.canvas-grid');
    
    if (existingGrid) {
      // ‡πÉ‡∏ä‡πâ existing grid element ‡πÅ‡∏•‡∏∞ enhance ‡∏°‡∏±‡∏ô‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      this.gridElement = existingGrid as HTMLElement;
      console.log('üî≤ Using existing canvas-grid element');
    } else {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á grid element ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ existing
      this.gridElement = document.createElement('div');
      this.gridElement.className = 'canvas-grid enhanced-grid';
      this.containerElement.appendChild(this.gridElement);
      console.log('üî≤ Created new enhanced grid element');
    }

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ initial styles
    this.applyGridStyles();
    
    // ‡∏ã‡πà‡∏≠‡∏ô grid ‡πÇ‡∏î‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (preserve existing behavior)
    this.hide();
  }

  /**
   * ‡πÉ‡∏ä‡πâ grid styles ‡∏Å‡∏±‡∏ö element
   */
  private applyGridStyles(): void {
    if (!this.gridElement) return;

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° enhanced styles ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà existing CSS
    const styles = {
      position: 'absolute',
      top: '0',
      left: '0',
      width: '100%',
      height: '100%',
      pointerEvents: 'none',
      zIndex: '0',
      backgroundImage: `
        linear-gradient(to right, ${this.gridColor} 1px, transparent 1px),
        linear-gradient(to bottom, ${this.gridColor} 1px, transparent 1px)
      `,
      backgroundSize: `${this.gridSize}px ${this.gridSize}px`,
      opacity: '0.3',
      transition: 'opacity 0.3s ease'
    };

    Object.assign(this.gridElement.style, styles);
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á grid overlay
   */
  public show(): void {
    if (!this.gridElement) return;

    this.isVisible = true;
    this.gridElement.style.display = 'block';
    this.gridElement.style.opacity = '0.3';
    
    console.log('üî≤ Grid overlay shown');
  }

  /**
   * ‡∏ã‡πà‡∏≠‡∏ô grid overlay
   */
  public hide(): void {
    if (!this.gridElement) return;

    this.isVisible = false;
    this.gridElement.style.display = 'none';
    
    console.log('üî≤ Grid overlay hidden');
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î grid
   * @param size - ‡∏Ç‡∏ô‡∏≤‡∏î grid ‡πÉ‡∏ô pixels
   */
  public setGridSize(size: number): void {
    this.gridSize = size;
    
    if (this.gridElement) {
      this.gridElement.style.backgroundSize = `${size}px ${size}px`;
    }
    
    console.log(`üî≤ Grid size updated to ${size}px`);
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ grid
   * @param color - ‡∏™‡∏µ grid ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö CSS color
   */
  public setGridColor(color: string): void {
    this.gridColor = color;
    
    if (this.gridElement) {
      this.gridElement.style.backgroundImage = `
        linear-gradient(to right, ${color} 1px, transparent 1px),
        linear-gradient(to bottom, ${color} 1px, transparent 1px)
      `;
    }
    
    console.log(`üé® Grid color updated to ${color}`);
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ grid
   * @param opacity - ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ (0-1)
   */
  public setOpacity(opacity: number): void {
    if (!this.gridElement) return;

    const clampedOpacity = Math.max(0, Math.min(1, opacity));
    this.gridElement.style.opacity = clampedOpacity.toString();
    
    console.log(`üî≤ Grid opacity set to ${clampedOpacity}`);
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡∏ô‡∏≤‡∏î grid overlay
   * @param width - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
   * @param height - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÉ‡∏´‡∏°‡πà
   */
  public updateSize(width: number, height: number): void {
    if (!this.gridElement) return;

    this.gridElement.style.width = `${width}px`;
    this.gridElement.style.height = `${height}px`;
    
    console.log(`üî≤ Grid size updated to ${width}x${height}`);
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ grid ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   * @returns true ‡∏´‡∏≤‡∏Å grid ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà
   */
  public isGridVisible(): boolean {
    return this.isVisible;
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î grid ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   * @returns ‡∏Ç‡∏ô‡∏≤‡∏î grid ‡πÉ‡∏ô pixels
   */
  public getGridSize(): number {
    return this.gridSize;
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏µ grid ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   * @returns ‡∏™‡∏µ grid ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö CSS color
   */
  public getGridColor(): string {
    return this.gridColor;
  }

  /**
   * ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á grid
   */
  public toggle(): void {
    if (this.isVisible) {
      this.hide();
    } else {
      this.show();
    }
  }

  /**
   * ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ GridOverlay ‡πÅ‡∏•‡∏∞ cleanup resources
   */
  public destroy(): void {
    if (this.gridElement && this.gridElement.classList.contains('enhanced-grid')) {
      // ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ enhanced grid ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏•‡∏ö existing .canvas-grid
      this.gridElement.remove();
    }
    
    this.gridElement = null;
    console.log('üóëÔ∏è GridOverlay destroyed');
  }
}