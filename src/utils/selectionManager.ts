// src/utils/selectionManager.ts

import { Container, FederatedPointerEvent, Graphics } from 'pixi.js';

/**
 * Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Selectable Element
 */
export interface SelectableElement {
  container: Container;
  onSelect?: () => void;
  onDeselect?: () => void;
  isSelected: boolean;
}

/**
 * ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£ Selection ‡∏Ç‡∏≠‡∏á Elements ‡∏ö‡∏ô Stage
 * ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ select/deselect elements ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£ clear selection ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
class SelectionManager {
  private selectedElements: Set<SelectableElement> = new Set();
  private selectionIndicators: Map<Container, Graphics> = new Map();

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° Element ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô selection
   * @param element - Element ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ select
   */
  selectElement(element: SelectableElement): void {
    if (this.selectedElements.has(element)) {
      return; // ‡∏ñ‡∏π‡∏Å select ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô selection set
    this.selectedElements.add(element);
    element.isSelected = true;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á visual indicator
    this.createSelectionIndicator(element.container);

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    element.onSelect?.();

    console.log('‚úÖ Selected element:', element.container);
  }

  /**
   * ‡∏•‡∏ö Element ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å selection
   * @param element - Element ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ deselect
   */
  deselectElement(element: SelectableElement): void {
    if (!this.selectedElements.has(element)) {
      return; // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å select ‡∏≠‡∏¢‡∏π‡πà
    }

    // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å selection set
    this.selectedElements.delete(element);
    element.isSelected = false;

    // ‡∏•‡∏ö visual indicator
    this.removeSelectionIndicator(element.container);

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    element.onDeselect?.();

    console.log('‚ùå Deselected element:', element.container);
  }

  /**
   * Toggle selection state ‡∏Ç‡∏≠‡∏á Element
   * @param element - Element ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ toggle
   */
  toggleSelection(element: SelectableElement): void {
    if (element.isSelected) {
      this.deselectElement(element);
    } else {
      this.selectElement(element);
    }
  }

  /**
   * ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£ select ‡∏ó‡∏∏‡∏Å elements (‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
   */
  deselectAll(): void {
    const elementsToDeselect = Array.from(this.selectedElements);

    elementsToDeselect.forEach(element => {
      this.deselectElement(element);
    });

    // ‡∏ã‡πà‡∏≠‡∏ô toolbar action buttons ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ element ‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if (elementsToDeselect.length > 0) {
      if ((window as any).toolbarActionButtons) {
        (window as any).toolbarActionButtons.hide();
      }
    }

    // Dispatch event for ComponentTree sync
    if (elementsToDeselect.length > 0) {
      const event = new CustomEvent('selection-cleared');
      window.dispatchEvent(event);
    }

    console.log('üîÑ Deselected all elements');
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Element ‡∏ñ‡∏π‡∏Å select ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   * @param element - Element ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   * @returns true ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å select
   */
  isSelected(element: SelectableElement): boolean {
    return this.selectedElements.has(element);
  }

  /**
   * ‡πÑ‡∏î‡πâ Array ‡∏Ç‡∏≠‡∏á elements ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å select ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   * @returns Array ‡∏Ç‡∏≠‡∏á selected elements
   */
  getSelectedElements(): SelectableElement[] {
    return Array.from(this.selectedElements);
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô elements ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å select
   * @returns ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô selected elements
   */
  getSelectedCount(): number {
    return this.selectedElements.size;
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á visual indicator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö selected element
   * @param container - Container ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà indicator
   */
  private createSelectionIndicator(container: Container): void {
    // ‡∏•‡∏ö indicator ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    this.removeSelectionIndicator(container);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì bounds ‡∏Ç‡∏≠‡∏á container ‡πÉ‡∏ô local coordinates
    const localBounds = container.getLocalBounds();
    const padding = 8; // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á selection indicator (‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô)
    // ‡πÉ‡∏ä‡πâ local bounds ‡πÅ‡∏ó‡∏ô global bounds ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ zoom
    const indicator = new Graphics()
      .rect(
        localBounds.x - padding,
        localBounds.y - padding,
        localBounds.width + (padding * 2),
        localBounds.height + (padding * 2)
      )
      .stroke({
        width: 3,
        color: 0x007AFF, // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô iOS style
        alpha: 0.8
      });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° indicator ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô container
    container.addChild(indicator);

    // ‡πÄ‡∏Å‡πá‡∏ö reference ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
    this.selectionIndicators.set(container, indicator);
  }

  /**
   * ‡∏•‡∏ö visual indicator ‡∏Ç‡∏≠‡∏á container
   * @param container - Container ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö indicator
   */
  private removeSelectionIndicator(container: Container): void {
    const indicator = this.selectionIndicators.get(container);
    if (indicator && indicator.parent) {
      indicator.parent.removeChild(indicator);
      indicator.destroy();
    }
    this.selectionIndicators.delete(container);
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï visual indicators ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏°‡∏∑‡πà‡∏≠ elements ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà)
   */
  updateAllIndicators(): void {
    this.selectedElements.forEach(element => {
      this.createSelectionIndicator(element.container);
    });
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï SelectableElement ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö enhanced nodes
   * ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ node ‡∏ñ‡∏π‡∏Å enhance ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡πÉ‡∏´‡πâ selectable ‡πÅ‡∏•‡πâ‡∏ß
   * @param container - Container ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å enhance
   */
  updateSelectableForEnhancedNode(container: Container): void {
    const selectableElement = (container as any).selectableElement as SelectableElement;
    if (!selectableElement) {
      console.warn('Container is not selectable, cannot update for enhanced node');
      return;
    }

    const nodeEnhancer = (container as any).nodeEnhancer;
    if (!nodeEnhancer) {
      console.warn('Container does not have NodeEnhancer, cannot update');
      return;
    }

    // ‡πÄ‡∏Å‡πá‡∏ö original callbacks
    const originalOnSelect = selectableElement.onSelect;
    const originalOnDeselect = selectableElement.onDeselect;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á enhanced callbacks
    selectableElement.onSelect = () => {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å original callback ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (originalOnSelect) {
        originalOnSelect();
      }

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ action buttons ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö enhanced nodes
      const actionButtons = nodeEnhancer.getActionButtons?.();
      if (actionButtons) {
        actionButtons.show();
        console.log('üéØ Enhanced node selected - showing action buttons');
      }

      // ‡∏™‡πà‡∏á enhanced selection event
      const event = new CustomEvent('pixi-selection-change', {
        detail: {
          container: container,
          action: 'select',
          isEnhanced: true
        }
      });
      window.dispatchEvent(event);
    };

    selectableElement.onDeselect = () => {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å original callback ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (originalOnDeselect) {
        originalOnDeselect();
      }

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ action buttons ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö enhanced nodes
      const actionButtons = nodeEnhancer.getActionButtons?.();
      if (actionButtons) {
        actionButtons.hide();
        console.log('‚≠ï Enhanced node deselected - hiding action buttons');
      }

      // ‡∏™‡πà‡∏á enhanced deselection event
      const event = new CustomEvent('pixi-selection-change', {
        detail: {
          container: container,
          action: 'deselect',
          isEnhanced: true
        }
      });
      window.dispatchEvent(event);
    };

    console.log('üîÑ Updated SelectableElement for enhanced node');
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ container ‡πÄ‡∏õ‡πá‡∏ô enhanced node ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   * @param container - Container ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   * @returns true ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô enhanced node
   */
  isEnhancedNode(container: Container): boolean {
    return !!(container as any).nodeEnhancer;
  }

  /**
   * ‡πÑ‡∏î‡πâ SelectableElement ‡∏à‡∏≤‡∏Å container
   * @param container - Container ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏≤ SelectableElement
   * @returns SelectableElement ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
   */
  getSelectableElement(container: Container): SelectableElement | null {
    return (container as any).selectableElement || null;
  }

  /**
   * ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î selection manager
   */
  destroy(): void {
    // Deselect ‡∏ó‡∏∏‡∏Å elements
    this.deselectAll();

    // ‡∏•‡∏ö indicators ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    this.selectionIndicators.forEach((_indicator, container) => {
      this.removeSelectionIndicator(container);
    });

    this.selectedElements.clear();
    this.selectionIndicators.clear();

    console.log('üóëÔ∏è Selection Manager destroyed');
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô (Singleton pattern)
export const selectionManager = new SelectionManager();

/**
 * Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° selection capability ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Container
 * ‡∏û‡∏£‡πâ‡∏≠‡∏° ToolbarActionButtons ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô toolbar ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
 * @param container - Container ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ selectable
 * @param options - ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
 * @returns SelectableElement object
 */
export function makeSelectable(
  container: Container,
  options: {
    onSelect?: () => void;
    onDeselect?: () => void;
    selectOnClick?: boolean;
  } = {}
): SelectableElement {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á selection callbacks
  const enhancedOnSelect = () => {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å original callback ‡∏Å‡πà‡∏≠‡∏ô
    options.onSelect?.();

    // ‡πÅ‡∏™‡∏î‡∏á toolbar action buttons ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö C4Box
    const isC4Box = (container as any).nodeData && (container as any).nodeData.nodeType === 'c4box';
    if (isC4Box) {
      // ‡πÉ‡∏ä‡πâ global reference ‡πÅ‡∏ó‡∏ô dynamic import
      if ((window as any).toolbarActionButtons) {
        (window as any).toolbarActionButtons.show(container);
        console.log('üéØ C4Box selected - showing toolbar action buttons');
      } else {
        console.warn('‚ö†Ô∏è ToolbarActionButtons not available');
      }
    }

    // ‡∏™‡πà‡∏á selection event
    const event = new CustomEvent('pixi-selection-change', {
      detail: {
        container: container,
        action: 'select',
        isC4Box: isC4Box
      }
    });
    window.dispatchEvent(event);
  };

  const enhancedOnDeselect = () => {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å original callback ‡∏Å‡πà‡∏≠‡∏ô
    options.onDeselect?.();

    // ‡∏ã‡πà‡∏≠‡∏ô toolbar action buttons ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö C4Box
    const isC4Box = (container as any).nodeData && (container as any).nodeData.nodeType === 'c4box';
    if (isC4Box) {
      // ‡πÉ‡∏ä‡πâ global reference ‡πÅ‡∏ó‡∏ô dynamic import
      if ((window as any).toolbarActionButtons) {
        (window as any).toolbarActionButtons.hide();
        console.log('‚≠ï C4Box deselected - hiding toolbar action buttons');
      }
    }

    // ‡∏™‡πà‡∏á deselection event
    const event = new CustomEvent('pixi-selection-change', {
      detail: {
        container: container,
        action: 'deselect',
        isC4Box: isC4Box
      }
    });
    window.dispatchEvent(event);
  };

  const element: SelectableElement = {
    container,
    onSelect: enhancedOnSelect,
    onDeselect: enhancedOnDeselect,
    isSelected: false
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° click handler ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  if (options.selectOnClick !== false) { // default = true
    container.on('pointerdown', (event: FederatedPointerEvent) => {
      event.stopPropagation();
      selectionManager.toggleSelection(element);
    });
  }

  // ‡πÄ‡∏Å‡πá‡∏ö reference ‡πÉ‡∏ô container metadata
  (container as any).selectableElement = element;

  return element;
}