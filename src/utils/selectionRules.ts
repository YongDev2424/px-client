// src/utils/selectionRules.ts

import { useSelectionState } from '../stores/selectionState';

/**
 * Selection Rules ‡∏ï‡∏≤‡∏° Requirements 1-7
 * 
 * Requirements Summary:
 * 1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Node ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‚Üí ‡πÅ‡∏™‡∏î‡∏á edit/delete
 * 2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Edge ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‚Üí ‡πÅ‡∏™‡∏î‡∏á edit/delete  
 * 3. ‡∏Ñ‡∏•‡∏¥‡∏Å edit ‚Üí ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î edit
 * 4. ‡∏Ñ‡∏•‡∏¥‡∏Å delete ‚Üí ‡πÅ‡∏™‡∏î‡∏á confirmation dialog
 * 5. ‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£ ‚Üí ‡∏ã‡πà‡∏≠‡∏ô edit/delete
 * 6. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß (same type) ‚Üí ‡∏ã‡πà‡∏≠‡∏ô edit/delete
 * 7. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß (mixed type) ‚Üí ‡∏ã‡πà‡∏≠‡∏ô edit/delete
 */

export interface ToolbarVisibilityConfig {
  showEditButton: boolean;
  showDeleteButton: boolean;
  canEdit: boolean;
  canDelete: boolean;
  reason?: string; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á toolbar buttons ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏≤‡∏° Selection Rules
 * @returns ToolbarVisibilityConfig
 */
export function calculateToolbarVisibility(): ToolbarVisibilityConfig {
  const selectionState = useSelectionState.getState();
  const selectedElements = selectionState.getSelectedElements();
  const selectionType = selectionState.getSelectionType();
  const selectedTypes = selectionState.getSelectedTypes();

  // Requirement 5: ‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£ ‚Üí ‡∏ã‡πà‡∏≠‡∏ô edit/delete
  if (selectionType === 'none') {
    return {
      showEditButton: false,
      showDeleteButton: false,
      canEdit: false,
      canDelete: false,
      reason: 'No selection (Requirement 5)'
    };
  }

  // Requirements 6-7: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß (same type ‡∏´‡∏£‡∏∑‡∏≠ mixed type) ‚Üí ‡∏ã‡πà‡∏≠‡∏ô edit/delete
  if (selectionType === 'multiple' || selectionType === 'mixed') {
    return {
      showEditButton: false,
      showDeleteButton: false,
      canEdit: false,
      canDelete: false,
      reason: `Multiple/Mixed selection: ${selectionType} (Requirements 6-7)`
    };
  }

  // Requirements 1-2: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (Node ‡∏´‡∏£‡∏∑‡∏≠ Edge) ‚Üí ‡πÅ‡∏™‡∏î‡∏á edit/delete
  if (selectionType === 'single') {
    const selectedElement = selectedElements[0];
    const elementType = selectedElement.type;

    return {
      showEditButton: true,
      showDeleteButton: true,
      canEdit: true,
      canDelete: true,
      reason: `Single ${elementType} selected (Requirements 1-2)`
    };
  }

  // Fallback case (shouldn't happen)
  return {
    showEditButton: false,
    showDeleteButton: false,
    canEdit: false,
    canDelete: false,
    reason: 'Unknown selection state'
  };
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á Edit Actions ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * (‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö selectionState.canShowEditActions())
 * @returns boolean
 */
export function canShowEditActions(): boolean {
  const config = calculateToolbarVisibility();
  return config.showEditButton && config.showDeleteButton;
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Edit ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (Requirement 3)
 * @returns boolean
 */
export function canEdit(): boolean {
  const config = calculateToolbarVisibility();
  return config.canEdit;
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Delete ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (Requirement 4)
 * @returns boolean
 */
export function canDelete(): boolean {
  const config = calculateToolbarVisibility();
  return config.canDelete;
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á element ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
 * @returns 'node' | 'edge' | 'mixed' | 'none'
 */
export function getSelectedElementType(): 'node' | 'edge' | 'mixed' | 'none' {
  const selectionState = useSelectionState.getState();
  const selectedTypes = selectionState.getSelectedTypes();
  const selectionType = selectionState.getSelectionType();

  if (selectionType === 'none') {
    return 'none';
  }

  if (selectedTypes.size > 1) {
    return 'mixed';
  }

  if (selectedTypes.has('node')) {
    return 'node';
  }

  if (selectedTypes.has('edge')) {
    return 'edge';
  }

  return 'none';
}

/**
 * ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö element ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö single selection)
 * @returns SelectableElement | null
 */
export function getCurrentSelectedElement() {
  const selectionState = useSelectionState.getState();
  const selectedElements = selectionState.getSelectedElements();
  const selectionType = selectionState.getSelectionType();

  if (selectionType === 'single' && selectedElements.length === 1) {
    return selectedElements[0];
  }

  return null;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Selection Rules Event Handler
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö listen ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á selection ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï toolbar
 */
export class SelectionRulesManager {
  private listeners: Set<(config: ToolbarVisibilityConfig) => void> = new Set();
  private currentConfig: ToolbarVisibilityConfig;

  constructor() {
    this.currentConfig = calculateToolbarVisibility();
    this.setupSelectionListener();
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á toolbar visibility
   */
  addListener(callback: (config: ToolbarVisibilityConfig) => void): void {
    this.listeners.add(callback);
    // ‡∏™‡πà‡∏á current config ‡πÉ‡∏´‡πâ listener ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    callback(this.currentConfig);
  }

  /**
   * ‡∏•‡∏ö listener
   */
  removeListener(callback: (config: ToolbarVisibilityConfig) => void): void {
    this.listeners.delete(callback);
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï toolbar visibility ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á listeners
   */
  private updateToolbarVisibility(): void {
    const newConfig = calculateToolbarVisibility();
    
    // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö config ‡πÄ‡∏Å‡πà‡∏≤
    const hasChanged = 
      this.currentConfig.showEditButton !== newConfig.showEditButton ||
      this.currentConfig.showDeleteButton !== newConfig.showDeleteButton ||
      this.currentConfig.canEdit !== newConfig.canEdit ||
      this.currentConfig.canDelete !== newConfig.canDelete;

    if (hasChanged) {
      this.currentConfig = newConfig;
      console.log('üîÑ Toolbar visibility changed:', newConfig.reason);
      
      // ‡πÅ‡∏à‡πâ‡∏á listeners ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      this.listeners.forEach(listener => {
        listener(this.currentConfig);
      });
    }
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö selection changes
   */
  private setupSelectionListener(): void {
    window.addEventListener('pixi-selection-change', () => {
      this.updateToolbarVisibility();
    });

    window.addEventListener('selection-cleared', () => {
      this.updateToolbarVisibility();
    });
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö current config
   */
  getCurrentConfig(): ToolbarVisibilityConfig {
    return { ...this.currentConfig };
  }

  /**
   * ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ manager ‡πÅ‡∏•‡∏∞‡∏•‡∏ö listeners
   */
  destroy(): void {
    this.listeners.clear();
    // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö window event listeners ‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡πá‡∏ö reference
    // ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ AbortController ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡πá‡∏ö reference ‡∏Ç‡∏≠‡∏á listener functions
  }
}

/**
 * Global instance ‡∏Ç‡∏≠‡∏á SelectionRulesManager
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ selection rules ‡∏ó‡∏±‡πà‡∏ß‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ
 */
export const selectionRulesManager = new SelectionRulesManager();

/**
 * Utility function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug selection state
 */
export function debugSelectionState(): void {
  const selectionState = useSelectionState.getState();
  const config = calculateToolbarVisibility();
  
  console.group('üîç Selection Debug Info');
  console.log('Selected Elements:', selectionState.getSelectedElements());
  console.log('Selection Type:', selectionState.getSelectionType());
  console.log('Selected Types:', Array.from(selectionState.getSelectedTypes()));
  console.log('Can Show Edit Actions:', selectionState.canShowEditActions());
  console.log('Toolbar Config:', config);
  console.groupEnd();
}