// src/utils/draggable.ts

import { Application, Container, FederatedPointerEvent, Point } from 'pixi.js';
import { edgeStateManager } from './edgeState';
import { updateEdgePosition, isEdgeConnectedToNode } from '../components/Edge';

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ (target) ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÉ‡∏´‡πâ
 * @param target - ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ PixiJS ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏•‡∏≤‡∏Å‡πÑ‡∏î‡πâ (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô Container ‡∏´‡∏£‡∏∑‡∏≠ Sprite)
 * @param app - ‡∏ï‡∏±‡∏ß‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô Pixi ‡∏´‡∏•‡∏±‡∏Å
 */
export function makeDraggable(target: Container, app: Application): void {
    // --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ ---
    target.eventMode = 'static';
    target.cursor = 'pointer';

    // --- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å ---
    let dragOffset = new Point();
    let isDragging = false;


    // --- Event Listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å ---

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ "‡∏Å‡∏î" ‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏•‡∏á‡∏ö‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    target.on('pointerdown', (event: FederatedPointerEvent) => {
        isDragging = true;
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Å‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
        dragOffset.x = target.x - event.global.x;
        dragOffset.y = target.y - event.global.y;
    });

    app.stage.eventMode = 'static';
    app.stage.hitArea = app.screen;

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ "‡∏õ‡∏•‡πà‡∏≠‡∏¢" ‡πÄ‡∏°‡∏≤‡∏™‡πå (‡πÄ‡∏£‡∏≤‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á‡∏ó‡∏µ‡πà stage ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    app.stage.on('pointerup', () => {
        isDragging = false;
    });

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ "‡∏Ç‡∏¢‡∏±‡∏ö" ‡πÄ‡∏°‡∏≤‡∏™‡πå (‡πÄ‡∏£‡∏≤‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á‡∏ó‡∏µ‡πà stage ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    app.stage.on('globalpointermove', (event: FederatedPointerEvent) => {
        if (isDragging) {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÑ‡∏ß‡πâ
            target.x = event.global.x + dragOffset.x;
            target.y = event.global.y + dragOffset.y;
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á edges ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö node ‡∏ô‡∏µ‡πâ
            const allEdges = edgeStateManager.getAllEdges();
            console.log('üöÄ Node ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà, ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', allEdges.length, 'edges');
            
            allEdges.forEach(edgeData => {
                const isConnected = isEdgeConnectedToNode(edgeData.edgeGraphics, target);
                console.log('üîó Edge', edgeData.id, '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Node ‡∏ô‡∏µ‡πâ:', isConnected);
                
                if (isConnected) {
                    console.log('‚ö° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Edge:', edgeData.id);
                    updateEdgePosition(edgeData.edgeGraphics);
                }
            });
        }
    });
}