// src/utils/ZoomManager.ts
import { Application, Point } from 'pixi.js';

/**
 * ZoomManager - Utility class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ zoom operations ‡πÅ‡∏•‡∏∞ coordinate transformations
 * 
 * üõ°Ô∏è ADDITIVE APPROACH: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå zoom management ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç existing PixiJS setup
 * - ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ utility functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö zoom calculations
 * - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ coordinate transformations
 * - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö zoom-to-point ‡πÅ‡∏•‡∏∞ zoom-to-fit functionality
 * - ‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç existing PixiJS application ‡∏´‡∏£‡∏∑‡∏≠ stage
 */

export interface ZoomBounds {
  minX: number;
  minY: number;
  maxX: number;
  maxY: number;
}

export interface ZoomToFitOptions {
  padding?: number;
  maxZoom?: number;
  minZoom?: number;
  animate?: boolean;
  duration?: number;
}

export interface ZoomToPointOptions {
  animate?: boolean;
  duration?: number;
  easing?: (t: number) => number;
}

export class ZoomManager {
  private static instance: ZoomManager;
  private pixiApp: Application | null = null;

  private constructor() {}

  /**
   * Singleton pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ZoomManager
   */
  public static getInstance(): ZoomManager {
    if (!ZoomManager.instance) {
      ZoomManager.instance = new ZoomManager();
    }
    return ZoomManager.instance;
  }

  /**
   * Initialize ZoomManager ‡∏Å‡∏±‡∏ö PixiJS Application
   */
  public initialize(app: Application): void {
    this.pixiApp = app;
    console.log('‚úÖ ZoomManager initialized with PixiJS app');
  }

  /**
   * ‡πÅ‡∏õ‡∏•‡∏á screen coordinates ‡πÄ‡∏õ‡πá‡∏ô world coordinates
   */
  public screenToWorld(screenPoint: Point): Point {
    if (!this.pixiApp) {
      console.warn('ZoomManager not initialized');
      return screenPoint.clone();
    }

    // ‡πÉ‡∏ä‡πâ toLocal ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á screen coordinates ‡πÄ‡∏õ‡πá‡∏ô world coordinates
    return this.pixiApp.stage.toLocal(screenPoint);
  }

  /**
   * ‡πÅ‡∏õ‡∏•‡∏á world coordinates ‡πÄ‡∏õ‡πá‡∏ô screen coordinates
   */
  public worldToScreen(worldPoint: Point): Point {
    if (!this.pixiApp) {
      console.warn('ZoomManager not initialized');
      return worldPoint.clone();
    }

    // ‡πÉ‡∏ä‡πâ toGlobal ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á world coordinates ‡πÄ‡∏õ‡πá‡∏ô screen coordinates
    return this.pixiApp.stage.toGlobal(worldPoint);
  }

  /**
   * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì zoom level ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö bounds ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
   */
  public calculateZoomToFit(bounds: ZoomBounds, options: ZoomToFitOptions = {}): number {
    if (!this.pixiApp) {
      console.warn('ZoomManager not initialized');
      return 1.0;
    }

    const {
      padding = 50,
      maxZoom = 4.0,
      minZoom = 0.25
    } = options;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á bounds
    const boundsWidth = bounds.maxX - bounds.minX;
    const boundsHeight = bounds.maxY - bounds.minY;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á viewport (‡∏´‡∏±‡∏Å padding)
    const viewportWidth = this.pixiApp.screen.width - (padding * 2);
    const viewportHeight = this.pixiApp.screen.height - (padding * 2);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì zoom ratio ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏Å‡∏ô
    const zoomX = viewportWidth / boundsWidth;
    const zoomY = viewportHeight / boundsHeight;

    // ‡πÉ‡∏ä‡πâ zoom ratio ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ bounds ‡∏û‡∏≠‡∏î‡∏µ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    const calculatedZoom = Math.min(zoomX, zoomY);

    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î zoom ‡∏ï‡∏≤‡∏° min/max
    return Math.max(minZoom, Math.min(maxZoom, calculatedZoom));
  }

  /**
   * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô stage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ bounds ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
   */
  public calculateCenterPosition(bounds: ZoomBounds, zoomLevel: number): Point {
    if (!this.pixiApp) {
      console.warn('ZoomManager not initialized');
      return new Point(0, 0);
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á bounds
    const boundsCenter = new Point(
      (bounds.minX + bounds.maxX) / 2,
      (bounds.minY + bounds.maxY) / 2
    );

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á viewport
    const viewportCenter = new Point(
      this.pixiApp.screen.width / 2,
      this.pixiApp.screen.height / 2
    );

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà stage ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà
    return new Point(
      viewportCenter.x - (boundsCenter.x * zoomLevel),
      viewportCenter.y - (boundsCenter.y * zoomLevel)
    );
  }

  /**
   * Zoom ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏î‡∏¢‡∏Ñ‡∏á‡∏à‡∏∏‡∏î‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
   */
  public zoomToPoint(worldPoint: Point, zoomLevel: number, options: ZoomToPointOptions = {}): void {
    if (!this.pixiApp) {
      console.warn('ZoomManager not initialized');
      return;
    }

    const {
      animate = true,
      duration = 300,
      easing = this.easeOutCubic
    } = options;

    // ‡πÅ‡∏õ‡∏•‡∏á world point ‡πÄ‡∏õ‡πá‡∏ô screen coordinates ‡∏Å‡πà‡∏≠‡∏ô zoom
    const screenPoint = this.worldToScreen(worldPoint);

    if (animate) {
      this.animateZoomToPoint(screenPoint, zoomLevel, duration, easing);
    } else {
      this.applyZoomToPoint(screenPoint, zoomLevel);
    }
  }

  /**
   * Apply zoom ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
   */
  private applyZoomToPoint(screenPoint: Point, zoomLevel: number): void {
    if (!this.pixiApp) return;

    const stage = this.pixiApp.stage;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á stage
    const newX = screenPoint.x - (screenPoint.x - stage.x) * (zoomLevel / stage.scale.x);
    const newY = screenPoint.y - (screenPoint.y - stage.y) * (zoomLevel / stage.scale.y);

    // Apply zoom ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
    stage.scale.set(zoomLevel);
    stage.position.set(newX, newY);
  }

  /**
   * Animate zoom ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
   */
  private animateZoomToPoint(
    screenPoint: Point,
    targetZoom: number,
    duration: number,
    easing: (t: number) => number
  ): void {
    if (!this.pixiApp) return;

    const stage = this.pixiApp.stage;
    const startZoom = stage.scale.x;
    const startX = stage.x;
    const startY = stage.y;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
    const targetX = screenPoint.x - (screenPoint.x - startX) * (targetZoom / startZoom);
    const targetY = screenPoint.y - (screenPoint.y - startY) * (targetZoom / startZoom);

    const startTime = performance.now();

    const animate = (currentTime: number) => {
      const elapsed = currentTime - startTime;
      const progress = Math.min(elapsed / duration, 1);
      const easedProgress = easing(progress);

      // Interpolate zoom ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      const currentZoom = startZoom + (targetZoom - startZoom) * easedProgress;
      const currentX = startX + (targetX - startX) * easedProgress;
      const currentY = startY + (targetY - startY) * easedProgress;

      // Apply ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
      stage.scale.set(currentZoom);
      stage.position.set(currentX, currentY);

      if (progress < 1) {
        requestAnimationFrame(animate);
      }
    };

    requestAnimationFrame(animate);
  }

  /**
   * Zoom ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ bounds ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≠‡∏î‡∏µ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
   */
  public zoomToFit(bounds: ZoomBounds, options: ZoomToFitOptions = {}): void {
    if (!this.pixiApp) {
      console.warn('ZoomManager not initialized');
      return;
    }

    const {
      animate = true,
      duration = 500
    } = options;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì zoom level ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    const zoomLevel = this.calculateZoomToFit(bounds, options);
    const centerPosition = this.calculateCenterPosition(bounds, zoomLevel);

    if (animate) {
      this.animateZoomToFit(zoomLevel, centerPosition, duration);
    } else {
      this.applyZoomToFit(zoomLevel, centerPosition);
    }
  }

  /**
   * Apply zoom to fit ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
   */
  private applyZoomToFit(zoomLevel: number, position: Point): void {
    if (!this.pixiApp) return;

    const stage = this.pixiApp.stage;
    stage.scale.set(zoomLevel);
    stage.position.copyFrom(position);
  }

  /**
   * Animate zoom to fit
   */
  private animateZoomToFit(targetZoom: number, targetPosition: Point, duration: number): void {
    if (!this.pixiApp) return;

    const stage = this.pixiApp.stage;
    const startZoom = stage.scale.x;
    const startPosition = stage.position.clone();
    const startTime = performance.now();

    const animate = (currentTime: number) => {
      const elapsed = currentTime - startTime;
      const progress = Math.min(elapsed / duration, 1);
      const easedProgress = this.easeOutCubic(progress);

      // Interpolate zoom ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      const currentZoom = startZoom + (targetZoom - startZoom) * easedProgress;
      const currentX = startPosition.x + (targetPosition.x - startPosition.x) * easedProgress;
      const currentY = startPosition.y + (targetPosition.y - startPosition.y) * easedProgress;

      // Apply ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
      stage.scale.set(currentZoom);
      stage.position.set(currentX, currentY);

      if (progress < 1) {
        requestAnimationFrame(animate);
      }
    };

    requestAnimationFrame(animate);
  }

  /**
   * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì bounds ‡∏Ç‡∏≠‡∏á objects ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô stage
   */
  public calculateStageBounds(): ZoomBounds | null {
    if (!this.pixiApp) {
      console.warn('ZoomManager not initialized');
      return null;
    }

    const stage = this.pixiApp.stage;
    
    if (stage.children.length === 0) {
      return null;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì bounds ‡∏à‡∏≤‡∏Å children ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const bounds = stage.getBounds();
    
    return {
      minX: bounds.x,
      minY: bounds.y,
      maxX: bounds.x + bounds.width,
      maxY: bounds.y + bounds.height
    };
  }

  /**
   * Zoom ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô objects ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô stage
   */
  public zoomToFitAll(options: ZoomToFitOptions = {}): void {
    const bounds = this.calculateStageBounds();
    
    if (!bounds) {
      console.log('No objects to fit in view');
      return;
    }

    this.zoomToFit(bounds, options);
  }

  /**
   * Reset zoom ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
   */
  public resetView(animate: boolean = true): void {
    if (!this.pixiApp) {
      console.warn('ZoomManager not initialized');
      return;
    }

    const stage = this.pixiApp.stage;
    const targetZoom = 1.0;
    const targetPosition = new Point(0, 0);

    if (animate) {
      this.animateZoomToFit(targetZoom, targetPosition, 300);
    } else {
      stage.scale.set(targetZoom);
      stage.position.copyFrom(targetPosition);
    }
  }

  /**
   * ‡πÑ‡∏î‡πâ zoom level ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   */
  public getCurrentZoom(): number {
    if (!this.pixiApp) {
      console.warn('ZoomManager not initialized');
      return 1.0;
    }

    return this.pixiApp.stage.scale.x;
  }

  /**
   * ‡πÑ‡∏î‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á stage
   */
  public getCurrentPosition(): Point {
    if (!this.pixiApp) {
      console.warn('ZoomManager not initialized');
      return new Point(0, 0);
    }

    return this.pixiApp.stage.position.clone();
  }

  /**
   * Easing function - ease out cubic
   */
  private easeOutCubic(t: number): number {
    return 1 - Math.pow(1 - t, 3);
  }

  /**
   * Easing function - ease in out cubic
   */
  public easeInOutCubic(t: number): number {
    return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  public isPointInView(worldPoint: Point, margin: number = 0): boolean {
    if (!this.pixiApp) {
      console.warn('ZoomManager not initialized');
      return false;
    }

    const screenPoint = this.worldToScreen(worldPoint);
    const screen = this.pixiApp.screen;

    return (
      screenPoint.x >= -margin &&
      screenPoint.y >= -margin &&
      screenPoint.x <= screen.width + margin &&
      screenPoint.y <= screen.height + margin
    );
  }

  /**
   * ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ ZoomManager
   */
  public destroy(): void {
    this.pixiApp = null;
    console.log('üóëÔ∏è ZoomManager destroyed');
  }
}