// src/utils/elementDeletion.ts

import { Container, Application } from 'pixi.js';
import type { SelectableElement } from '../stores/selectionState';

/**
 * Element Deletion Utilities
 * Pure functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö elements ‡∏ï‡πà‡∏≤‡∏á‡πÜ
 * ‡πÉ‡∏ä‡πâ Function-based architecture ‡∏ï‡∏≤‡∏° CLAUDE.md
 */

/**
 * ‡∏•‡∏ö element ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å PixiJS stage
 * @param container - Container ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
 * @param _app - PixiJS Application (optional, ‡∏à‡∏∞‡∏´‡∏≤‡∏à‡∏≤‡∏Å global ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏)
 * @returns success status
 */
export function removeElementFromStage(container: Container, _app?: Application): boolean {
  try {
    if (!container || !container.parent) {
      console.warn('‚ö†Ô∏è Container not found or not added to stage');
      return false;
    }

    // ‡∏•‡∏ö container ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å parent (stage)
    container.parent.removeChild(container);
    
    // ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ container ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡πà‡∏≠‡∏¢ memory
    container.destroy({
      children: true,    // ‡∏•‡∏ö children ‡∏î‡πâ‡∏ß‡∏¢
      texture: false     // ‡πÄ‡∏Å‡πá‡∏ö textures ‡πÑ‡∏ß‡πâ (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥)
    });
    
    console.log('‚úÖ Removed element from stage successfully');
    return true;
    
  } catch (error) {
    console.error('‚ùå Failed to remove element from stage:', error);
    return false;
  }
}

/**
 * ‡∏•‡∏ö element ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å ComponentTree
 * @param container - Container ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
 * @returns success status
 */
export function removeElementFromComponentTree(container: Container): boolean {
  try {
    // ‡∏™‡πà‡∏á event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á ComponentTree ‡πÉ‡∏´‡πâ‡∏•‡∏ö component
    const event = new CustomEvent('pixi-component-removed', {
      detail: { container }
    });
    window.dispatchEvent(event);
    
    console.log('‚úÖ Notified ComponentTree to remove element');
    return true;
    
  } catch (error) {
    console.error('‚ùå Failed to remove element from ComponentTree:', error);
    return false;
  }
}

/**
 * ‡∏´‡∏≤ edges ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö node container ‡∏ô‡∏µ‡πâ
 * @param nodeContainer - Node container ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏≤ connected edges
 * @returns array ‡∏Ç‡∏≠‡∏á edge containers ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
 */
export function findConnectedEdges(nodeContainer: Container): Container[] {
  const connectedEdges: Container[] = [];
  
  try {
    // ‡∏´‡∏≤ app ‡∏à‡∏≤‡∏Å nodeContainer.parent hierarchy
    let currentParent = nodeContainer.parent;
    while (currentParent && !currentParent.children) {
      currentParent = currentParent.parent;
    }
    
    if (!currentParent) {
      console.warn('‚ö†Ô∏è Could not find stage to search for connected edges');
      return connectedEdges;
    }
    
    // ‡∏ß‡∏ô‡∏´‡∏≤‡∏ó‡∏∏‡∏Å children ‡πÉ‡∏ô stage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ edges ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    currentParent.children.forEach(child => {
      if (child instanceof Container && (child as any).edgeData) {
        const edgeData = (child as any).edgeData;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ edge ‡∏ô‡∏µ‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö node ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (edgeData.sourceNode === nodeContainer || edgeData.targetNode === nodeContainer) {
          connectedEdges.push(child);
          console.log('üîó Found connected edge:', edgeData.labelText);
        }
      }
    });
    
    console.log(`üîç Found ${connectedEdges.length} connected edges`);
    return connectedEdges;
    
  } catch (error) {
    console.error('‚ùå Failed to find connected edges:', error);
    return connectedEdges;
  }
}

/**
 * ‡∏•‡∏ö edge connections ‡πÅ‡∏•‡∏∞ references
 * @param edgeContainer - Edge container ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö connections
 * @returns success status
 */
export function removeEdgeConnections(edgeContainer: Container): boolean {
  try {
    const edgeData = (edgeContainer as any).edgeData;
    
    if (!edgeData) {
      console.warn('‚ö†Ô∏è Edge data not found, cannot remove connections');
      return false;
    }
    
    // ‡∏•‡∏ö reference ‡∏à‡∏≤‡∏Å source ‡πÅ‡∏•‡∏∞ target nodes (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (edgeData.sourceNode) {
      const sourceData = (edgeData.sourceNode as any).nodeData;
      if (sourceData && sourceData.connectedEdges) {
        sourceData.connectedEdges = sourceData.connectedEdges.filter(
          (edge: Container) => edge !== edgeContainer
        );
      }
    }
    
    if (edgeData.targetNode) {
      const targetData = (edgeData.targetNode as any).nodeData;
      if (targetData && targetData.connectedEdges) {
        targetData.connectedEdges = targetData.connectedEdges.filter(
          (edge: Container) => edge !== edgeContainer
        );
      }
    }
    
    console.log('‚úÖ Removed edge connections successfully');
    return true;
    
  } catch (error) {
    console.error('‚ùå Failed to remove edge connections:', error);
    return false;
  }
}

/**
 * ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î references ‡πÅ‡∏•‡∏∞ metadata ‡∏Ç‡∏≠‡∏á element
 * @param container - Container ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
 */
export function cleanupElementReferences(container: Container): void {
  try {
    // ‡∏•‡∏ö selection state references
    if ((container as any).selectableElement) {
      delete (container as any).selectableElement;
    }
    
    // ‡∏•‡∏ö node data references
    if ((container as any).nodeData) {
      delete (container as any).nodeData;
    }
    
    // ‡∏•‡∏ö edge data references
    if ((container as any).edgeData) {
      delete (container as any).edgeData;
    }
    
    // ‡∏•‡∏ö event listeners
    container.removeAllListeners();
    
    console.log('‚úÖ Cleaned up element references');
    
  } catch (error) {
    console.error('‚ùå Failed to cleanup element references:', error);
  }
}

/**
 * ‡∏•‡∏ö Node element ‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
 * @param element - SelectableElement ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
 * @returns success status
 */
export async function deleteNodeElement(element: SelectableElement): Promise<boolean> {
  try {
    console.log('üóëÔ∏è Starting node element deletion process');
    
    const container = element.container;
    
    // 1. ‡∏´‡∏≤ connected edges ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Å‡πà‡∏≠‡∏ô
    const connectedEdges = findConnectedEdges(container);
    console.log(`üîó Deleting ${connectedEdges.length} connected edges`);
    
    for (const edgeContainer of connectedEdges) {
      const success = await deleteEdgeElement({
        container: edgeContainer,
        nodeId: `edge_${Date.now()}`,
        type: 'edge',
        isSelected: false
      } as SelectableElement);
      
      if (!success) {
        console.warn('‚ö†Ô∏è Failed to delete connected edge, continuing...');
      }
    }
    
    // 2. ‡∏•‡∏ö‡∏à‡∏≤‡∏Å selection state
    const { useSelectionState } = await import('../stores/selectionState');
    const selectionState = useSelectionState.getState();
    selectionState.deselectElement(element);
    
    // 3. ‡∏•‡∏ö‡∏à‡∏≤‡∏Å node state
    const { useNodeState } = await import('../stores/nodeState');
    const nodeState = useNodeState.getState();
    if (nodeState.removeNodeState) {
      nodeState.removeNodeState(element.nodeId);
    }
    
    // 4. ‡∏•‡∏ö‡∏à‡∏≤‡∏Å ComponentTree
    removeElementFromComponentTree(container);
    
    // 5. ‡∏•‡∏ö‡∏à‡∏≤‡∏Å stage
    removeElementFromStage(container);
    
    // 6. ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î references
    cleanupElementReferences(container);
    
    console.log('‚úÖ Node element deletion completed successfully');
    return true;
    
  } catch (error) {
    console.error('‚ùå Node element deletion failed:', error);
    return false;
  }
}

/**
 * ‡∏•‡∏ö Edge element ‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
 * @param element - SelectableElement ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
 * @returns success status
 */
export async function deleteEdgeElement(element: SelectableElement): Promise<boolean> {
  try {
    console.log('üóëÔ∏è Starting edge element deletion process');
    
    const container = element.container;
    
    // 1. ‡∏•‡∏ö‡∏à‡∏≤‡∏Å selection state
    const { useSelectionState } = await import('../stores/selectionState');
    const selectionState = useSelectionState.getState();
    selectionState.deselectElement(element);
    
    // 2. ‡∏•‡∏ö edge connections
    removeEdgeConnections(container);
    
    // 3. ‡∏•‡∏ö‡∏à‡∏≤‡∏Å ComponentTree (‡∏ñ‡πâ‡∏≤ edges ‡∏ñ‡∏π‡∏Å‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô tree)
    removeElementFromComponentTree(container);
    
    // 4. ‡∏•‡∏ö‡∏à‡∏≤‡∏Å stage
    removeElementFromStage(container);
    
    // 5. ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î references
    cleanupElementReferences(container);
    
    console.log('‚úÖ Edge element deletion completed successfully');
    return true;
    
  } catch (error) {
    console.error('‚ùå Edge element deletion failed:', error);
    return false;
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ element ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param element - SelectableElement ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
 * @returns permission object
 */
export function calculateDeletionPermissions(element: SelectableElement): {
  canDelete: boolean;
  reason?: string;
} {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ container ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!element.container) {
      return {
        canDelete: false,
        reason: 'Container not found'
      };
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ element ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô stage ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!element.container.parent) {
      return {
        canDelete: false,
        reason: 'Element not in stage'
      };
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á delete ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (skip for now due to import issues)
    
    // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ
    return {
      canDelete: true
    };
    
  } catch (error) {
    console.error('‚ùå Failed to calculate deletion permissions:', error);
    return {
      canDelete: false,
      reason: 'Permission check failed'
    };
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á fade out animation ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö element (UX enhancement)
 * @param container - Container ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ animate
 * @param duration - ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ animation (ms)
 * @returns Promise ‡∏ó‡∏µ‡πà resolve ‡πÄ‡∏°‡∏∑‡πà‡∏≠ animation ‡πÄ‡∏™‡∏£‡πá‡∏à
 */
export function fadeOutElement(container: Container, duration: number = 300): Promise<void> {
  return new Promise((resolve) => {
    if (!container || !container.parent) {
      resolve();
      return;
    }
    
    const startAlpha = container.alpha;
    const startTime = Date.now();
    
    function animate() {
      const elapsed = Date.now() - startTime;
      const progress = Math.min(elapsed / duration, 1);
      
      // Ease-out animation curve
      const easedProgress = 1 - Math.pow(1 - progress, 3);
      container.alpha = startAlpha * (1 - easedProgress);
      
      if (progress < 1) {
        requestAnimationFrame(animate);
      } else {
        resolve();
      }
    }
    
    requestAnimationFrame(animate);
  });
}